/*! For license information please see vendors-node_modules_bootstrap_dist_js_bootstrap_esm_js-node_modules_jquery-parallax_js_paral-f9cd96.bundle.js.LICENSE.txt */
(self.webpackChunkmichelle_updated_website=self.webpackChunkmichelle_updated_website||[]).push([["vendors-node_modules_bootstrap_dist_js_bootstrap_esm_js-node_modules_jquery-parallax_js_paral-f9cd96"],{"./node_modules/@popperjs/core/lib/createPopper.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{createPopper:()=>w,detectOverflow:()=>f.default,popperGenerator:()=>x});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),l=i("./node_modules/@popperjs/core/lib/utils/orderModifiers.js"),c=i("./node_modules/@popperjs/core/lib/utils/debounce.js"),h=i("./node_modules/@popperjs/core/lib/utils/validateModifiers.js"),d=i("./node_modules/@popperjs/core/lib/utils/uniqueBy.js"),u=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),p=i("./node_modules/@popperjs/core/lib/utils/mergeByName.js"),f=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),g=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),m=i("./node_modules/@popperjs/core/lib/enums.js"),b="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",_="Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.",v={placement:"bottom",modifiers:[],strategy:"absolute"};function y(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function x(t){void 0===t&&(t={});var e=t,i=e.defaultModifiers,f=void 0===i?[]:i,x=e.defaultOptions,w=void 0===x?v:x;return function(t,e,i){void 0===i&&(i=w);var x={placement:"bottom",orderedModifiers:[],options:Object.assign({},v,w),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},k=[],j=!1,S={state:x,setOptions:function(i){var n="function"==typeof i?i(x.options):i;T(),x.options=Object.assign({},w,x.options,n),x.scrollParents={reference:(0,g.isElement)(t)?(0,o.default)(t):t.contextElement?(0,o.default)(t.contextElement):[],popper:(0,o.default)(e)};var s=(0,l.default)((0,p.default)([].concat(f,x.options.modifiers)));x.orderedModifiers=s.filter((function(t){return t.enabled}));var r=(0,d.default)([].concat(s,x.options.modifiers),(function(t){return t.name}));(0,h.default)(r),(0,u.default)(x.options.placement)===m.auto&&(x.orderedModifiers.find((function(t){return"flip"===t.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var c=(0,a.default)(e);return[c.marginTop,c.marginRight,c.marginBottom,c.marginLeft].some((function(t){return parseFloat(t)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),x.orderedModifiers.forEach((function(t){var e=t.name,i=t.options,n=void 0===i?{}:i,s=t.effect;if("function"==typeof s){var o=s({state:x,name:e,instance:S,options:n}),r=function(){};k.push(o||r)}})),S.update()},forceUpdate:function(){if(!j){var t=x.elements,e=t.reference,i=t.popper;if(y(e,i)){x.rects={reference:(0,n.default)(e,(0,r.default)(i),"fixed"===x.options.strategy),popper:(0,s.default)(i)},x.reset=!1,x.placement=x.options.placement,x.orderedModifiers.forEach((function(t){return x.modifiersData[t.name]=Object.assign({},t.data)}));for(var o=0,a=0;a<x.orderedModifiers.length;a++){if((o+=1)>100){console.error(_);break}if(!0!==x.reset){var l=x.orderedModifiers[a],c=l.fn,h=l.options,d=void 0===h?{}:h,u=l.name;"function"==typeof c&&(x=c({state:x,options:d,name:u,instance:S})||x)}else x.reset=!1,a=-1}}else console.error(b)}},update:(0,c.default)((function(){return new Promise((function(t){S.forceUpdate(),t(x)}))})),destroy:function(){T(),j=!0}};if(!y(t,e))return console.error(b),S;function T(){k.forEach((function(t){return t()})),k=[]}return S.setOptions(i).then((function(t){!j&&i.onFirstUpdate&&i.onFirstUpdate(t)})),S}}var w=x()},"./node_modules/@popperjs/core/lib/dom-utils/contains.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function s(t,e){var i=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(i&&(0,n.isShadowRoot)(i)){var s=e;do{if(s&&t.isSameNode(s))return!0;s=s.parentNode||s.host}while(s)}return!1}},"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),s=i("./node_modules/@popperjs/core/lib/utils/math.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function a(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1);var a=t.getBoundingClientRect(),l=1,c=1;e&&(0,n.isHTMLElement)(t)&&(l=t.offsetWidth>0&&(0,s.round)(a.width)/t.offsetWidth||1,c=t.offsetHeight>0&&(0,s.round)(a.height)/t.offsetHeight||1);var h=((0,n.isElement)(t)?(0,o.default)(t):window).visualViewport,d=!(0,r.default)()&&i,u=(a.left+(d&&h?h.offsetLeft:0))/l,p=(a.top+(d&&h?h.offsetTop:0))/c,f=a.width/l,g=a.height/c;return{width:f,height:g,top:p,right:u+f,bottom:p+g,left:u,x:u,y:p}}},"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>_});var n=i("./node_modules/@popperjs/core/lib/enums.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),h=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),d=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),u=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),p=i("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),f=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),g=i("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),m=i("./node_modules/@popperjs/core/lib/utils/math.js");function b(t,e,i){return e===n.viewport?(0,g.default)((0,s.default)(t,i)):(0,h.isElement)(e)?function(t,e){var i=(0,d.default)(t,!1,"fixed"===e);return i.top=i.top+t.clientTop,i.left=i.left+t.clientLeft,i.bottom=i.top+t.clientHeight,i.right=i.left+t.clientWidth,i.width=t.clientWidth,i.height=t.clientHeight,i.x=i.left,i.y=i.top,i}(e,i):(0,g.default)((0,o.default)((0,l.default)(t)))}function _(t,e,i,n){var s="clippingParents"===e?function(t){var e=(0,r.default)((0,u.default)(t)),i=["absolute","fixed"].indexOf((0,c.default)(t).position)>=0&&(0,h.isHTMLElement)(t)?(0,a.default)(t):t;return(0,h.isElement)(i)?e.filter((function(t){return(0,h.isElement)(t)&&(0,p.default)(t,i)&&"body"!==(0,f.default)(t)})):[]}(t):[].concat(e),o=[].concat(s,[i]),l=o[0],d=o.reduce((function(e,i){var s=b(t,i,n);return e.top=(0,m.max)(s.top,e.top),e.right=(0,m.min)(s.right,e.right),e.bottom=(0,m.min)(s.bottom,e.bottom),e.left=(0,m.max)(s.left,e.left),e}),b(t,l,n));return d.width=d.right-d.left,d.height=d.bottom-d.top,d.x=d.left,d.y=d.top,d}},"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>d});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),h=i("./node_modules/@popperjs/core/lib/utils/math.js");function d(t,e,i){void 0===i&&(i=!1);var d=(0,r.isHTMLElement)(e),u=(0,r.isHTMLElement)(e)&&function(t){var e=t.getBoundingClientRect(),i=(0,h.round)(e.width)/t.offsetWidth||1,n=(0,h.round)(e.height)/t.offsetHeight||1;return 1!==i||1!==n}(e),p=(0,l.default)(e),f=(0,n.default)(t,u,i),g={scrollLeft:0,scrollTop:0},m={x:0,y:0};return(d||!d&&!i)&&(("body"!==(0,o.default)(e)||(0,c.default)(p))&&(g=(0,s.default)(e)),(0,r.isHTMLElement)(e)?((m=(0,n.default)(e,!0)).x+=e.clientLeft,m.y+=e.clientTop):p&&(m.x=(0,a.default)(p))),{x:f.left+g.scrollLeft-m.x,y:f.top+g.scrollTop-m.y,width:f.width,height:f.height}}},"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function s(t){return(0,n.default)(t).getComputedStyle(t)}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function s(t){return(((0,n.isElement)(t)?t.ownerDocument:t.document)||window.document).documentElement}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),a=i("./node_modules/@popperjs/core/lib/utils/math.js");function l(t){var e,i=(0,n.default)(t),l=(0,r.default)(t),c=null==(e=t.ownerDocument)?void 0:e.body,h=(0,a.max)(i.scrollWidth,i.clientWidth,c?c.scrollWidth:0,c?c.clientWidth:0),d=(0,a.max)(i.scrollHeight,i.clientHeight,c?c.scrollHeight:0,c?c.clientHeight:0),u=-l.scrollLeft+(0,o.default)(t),p=-l.scrollTop;return"rtl"===(0,s.default)(c||i).direction&&(u+=(0,a.max)(i.clientWidth,c?c.clientWidth:0)-h),{width:h,height:d,x:u,y:p}}},"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":(t,e,i)=>{"use strict";function n(t){return{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");function s(t){var e=(0,n.default)(t),i=t.offsetWidth,s=t.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-s)<=1&&(s=e.height),{x:t.offsetLeft,y:t.offsetTop,width:i,height:s}}},"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":(t,e,i)=>{"use strict";function n(t){return t?(t.nodeName||"").toLowerCase():null}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");function a(t){return t!==(0,s.default)(t)&&(0,o.isHTMLElement)(t)?(0,r.default)(t):(0,n.default)(t)}},"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>d});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),c=i("./node_modules/@popperjs/core/lib/utils/userAgent.js");function h(t){return(0,r.isHTMLElement)(t)&&"fixed"!==(0,o.default)(t).position?t.offsetParent:null}function d(t){for(var e=(0,n.default)(t),i=h(t);i&&(0,a.default)(i)&&"static"===(0,o.default)(i).position;)i=h(i);return i&&("html"===(0,s.default)(i)||"body"===(0,s.default)(i)&&"static"===(0,o.default)(i).position)?e:i||function(t){var e=/firefox/i.test((0,c.default)());if(/Trident/i.test((0,c.default)())&&(0,r.isHTMLElement)(t)&&"fixed"===(0,o.default)(t).position)return null;var i=(0,l.default)(t);for((0,r.isShadowRoot)(i)&&(i=i.host);(0,r.isHTMLElement)(i)&&["html","body"].indexOf((0,s.default)(i))<0;){var n=(0,o.default)(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||e&&"filter"===n.willChange||e&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(t)||e}},"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(t){return"html"===(0,n.default)(t)?t:t.assignedSlot||t.parentNode||((0,o.isShadowRoot)(t)?t.host:null)||(0,s.default)(t)}},"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function a(t){return["html","body","#document"].indexOf((0,o.default)(t))>=0?t.ownerDocument.body:(0,r.isHTMLElement)(t)&&(0,s.default)(t)?t:a((0,n.default)(t))}},"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function a(t,e){var i=(0,n.default)(t),a=(0,s.default)(t),l=i.visualViewport,c=a.clientWidth,h=a.clientHeight,d=0,u=0;if(l){c=l.width,h=l.height;var p=(0,r.default)();(p||!p&&"fixed"===e)&&(d=l.offsetLeft,u=l.offsetTop)}return{width:c,height:h,x:d+(0,o.default)(t),y:u}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":(t,e,i)=>{"use strict";function n(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function s(t){var e=(0,n.default)(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");function r(t){return(0,n.default)((0,s.default)(t)).left+(0,o.default)(t).scrollLeft}},"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{isElement:()=>s,isHTMLElement:()=>o,isShadowRoot:()=>r});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function s(t){return t instanceof(0,n.default)(t).Element||t instanceof Element}function o(t){return t instanceof(0,n.default)(t).HTMLElement||t instanceof HTMLElement}function r(t){return"undefined"!=typeof ShadowRoot&&(t instanceof(0,n.default)(t).ShadowRoot||t instanceof ShadowRoot)}},"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/utils/userAgent.js");function s(){return!/^((?!chrome|android).)*safari/i.test((0,n.default)())}},"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");function s(t){var e=(0,n.default)(t),i=e.overflow,s=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+o+s)}},"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");function s(t){return["table","td","th"].indexOf((0,n.default)(t))>=0}},"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");function a(t,e){var i;void 0===e&&(e=[]);var l=(0,n.default)(t),c=l===(null==(i=t.ownerDocument)?void 0:i.body),h=(0,o.default)(l),d=c?[h].concat(h.visualViewport||[],(0,r.default)(l)?l:[]):l,u=e.concat(d);return c?u:u.concat(a((0,s.default)(d)))}},"./node_modules/@popperjs/core/lib/enums.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{afterMain:()=>w,afterRead:()=>v,afterWrite:()=>S,auto:()=>a,basePlacements:()=>l,beforeMain:()=>y,beforeRead:()=>b,beforeWrite:()=>k,bottom:()=>s,clippingParents:()=>d,end:()=>h,left:()=>r,main:()=>x,modifierPhases:()=>T,placements:()=>m,popper:()=>p,read:()=>_,reference:()=>f,right:()=>o,start:()=>c,top:()=>n,variationPlacements:()=>g,viewport:()=>u,write:()=>j});var n="top",s="bottom",o="right",r="left",a="auto",l=[n,s,o,r],c="start",h="end",d="clippingParents",u="viewport",p="popper",f="reference",g=l.reduce((function(t,e){return t.concat([e+"-"+c,e+"-"+h])}),[]),m=[].concat(l,[a]).reduce((function(t,e){return t.concat([e,e+"-"+c,e+"-"+h])}),[]),b="beforeRead",_="read",v="afterRead",y="beforeMain",x="main",w="afterMain",k="beforeWrite",j="write",S="afterWrite",T=[b,_,v,y,x,w,k,j,S]},"./node_modules/@popperjs/core/lib/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{afterMain:()=>n.afterMain,afterRead:()=>n.afterRead,afterWrite:()=>n.afterWrite,applyStyles:()=>s.applyStyles,arrow:()=>s.arrow,auto:()=>n.auto,basePlacements:()=>n.basePlacements,beforeMain:()=>n.beforeMain,beforeRead:()=>n.beforeRead,beforeWrite:()=>n.beforeWrite,bottom:()=>n.bottom,clippingParents:()=>n.clippingParents,computeStyles:()=>s.computeStyles,createPopper:()=>a.createPopper,createPopperBase:()=>o.createPopper,createPopperLite:()=>l.createPopper,detectOverflow:()=>r.default,end:()=>n.end,eventListeners:()=>s.eventListeners,flip:()=>s.flip,hide:()=>s.hide,left:()=>n.left,main:()=>n.main,modifierPhases:()=>n.modifierPhases,offset:()=>s.offset,placements:()=>n.placements,popper:()=>n.popper,popperGenerator:()=>o.popperGenerator,popperOffsets:()=>s.popperOffsets,preventOverflow:()=>s.preventOverflow,read:()=>n.read,reference:()=>n.reference,right:()=>n.right,start:()=>n.start,top:()=>n.top,variationPlacements:()=>n.variationPlacements,viewport:()=>n.viewport,write:()=>n.write});var n=i("./node_modules/@popperjs/core/lib/enums.js"),s=i("./node_modules/@popperjs/core/lib/modifiers/index.js"),o=i("./node_modules/@popperjs/core/lib/createPopper.js"),r=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),a=i("./node_modules/@popperjs/core/lib/popper.js"),l=i("./node_modules/@popperjs/core/lib/popper-lite.js")},"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");const o={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var i=e.styles[t]||{},o=e.attributes[t]||{},r=e.elements[t];(0,s.isHTMLElement)(r)&&(0,n.default)(r)&&(Object.assign(r.style,i),Object.keys(o).forEach((function(t){var e=o[t];!1===e?r.removeAttribute(t):r.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach((function(t){var o=e.elements[t],r=e.attributes[t]||{},a=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:i[t]).reduce((function(t,e){return t[e]="",t}),{});(0,s.isHTMLElement)(o)&&(0,n.default)(o)&&(Object.assign(o.style,a),Object.keys(r).forEach((function(t){o.removeAttribute(t)})))}))}},requires:["computeStyles"]}},"./node_modules/@popperjs/core/lib/modifiers/arrow.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>p});var n=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=i("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),l=i("./node_modules/@popperjs/core/lib/utils/within.js"),c=i("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),h=i("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js"),d=i("./node_modules/@popperjs/core/lib/enums.js"),u=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");const p={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,i=t.state,o=t.name,u=t.options,p=i.elements.arrow,f=i.modifiersData.popperOffsets,g=(0,n.default)(i.placement),m=(0,a.default)(g),b=[d.left,d.right].indexOf(g)>=0?"height":"width";if(p&&f){var _=function(t,e){return t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t,(0,c.default)("number"!=typeof t?t:(0,h.default)(t,d.basePlacements))}(u.padding,i),v=(0,s.default)(p),y="y"===m?d.top:d.left,x="y"===m?d.bottom:d.right,w=i.rects.reference[b]+i.rects.reference[m]-f[m]-i.rects.popper[b],k=f[m]-i.rects.reference[m],j=(0,r.default)(p),S=j?"y"===m?j.clientHeight||0:j.clientWidth||0:0,T=w/2-k/2,C=_[y],M=S-v[b]-_[x],A=S/2-v[b]/2+T,E=(0,l.within)(C,A,M),O=m;i.modifiersData[o]=((e={})[O]=E,e.centerOffset=E-A,e)}},effect:function(t){var e=t.state,i=t.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=e.elements.popper.querySelector(n)))&&((0,u.isHTMLElement)(n)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),(0,o.default)(e.elements.popper,n)?e.elements.arrow=n:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>p,mapToStyles:()=>u});var n=i("./node_modules/@popperjs/core/lib/enums.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),l=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),c=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),h=i("./node_modules/@popperjs/core/lib/utils/math.js"),d={top:"auto",right:"auto",bottom:"auto",left:"auto"};function u(t){var e,i=t.popper,l=t.popperRect,c=t.placement,u=t.variation,p=t.offsets,f=t.position,g=t.gpuAcceleration,m=t.adaptive,b=t.roundOffsets,_=t.isFixed,v=p.x,y=void 0===v?0:v,x=p.y,w=void 0===x?0:x,k="function"==typeof b?b({x:y,y:w}):{x:y,y:w};y=k.x,w=k.y;var j=p.hasOwnProperty("x"),S=p.hasOwnProperty("y"),T=n.left,C=n.top,M=window;if(m){var A=(0,s.default)(i),E="clientHeight",O="clientWidth";if(A===(0,o.default)(i)&&(A=(0,r.default)(i),"static"!==(0,a.default)(A).position&&"absolute"===f&&(E="scrollHeight",O="scrollWidth")),c===n.top||(c===n.left||c===n.right)&&u===n.end)C=n.bottom,w-=(_&&A===M&&M.visualViewport?M.visualViewport.height:A[E])-l.height,w*=g?1:-1;if(c===n.left||(c===n.top||c===n.bottom)&&u===n.end)T=n.right,y-=(_&&A===M&&M.visualViewport?M.visualViewport.width:A[O])-l.width,y*=g?1:-1}var P,D=Object.assign({position:f},m&&d),L=!0===b?function(t,e){var i=t.x,n=t.y,s=e.devicePixelRatio||1;return{x:(0,h.round)(i*s)/s||0,y:(0,h.round)(n*s)/s||0}}({x:y,y:w},(0,o.default)(i)):{x:y,y:w};return y=L.x,w=L.y,g?Object.assign({},D,((P={})[C]=S?"0":"",P[T]=j?"0":"",P.transform=(M.devicePixelRatio||1)<=1?"translate("+y+"px, "+w+"px)":"translate3d("+y+"px, "+w+"px, 0)",P)):Object.assign({},D,((e={})[C]=S?w+"px":"",e[T]=j?y+"px":"",e.transform="",e))}const p={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,i=t.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,h=i.roundOffsets,d=void 0===h||h,p=(0,a.default)(e.elements.popper).transitionProperty||"";r&&["transform","top","right","bottom","left"].some((function(t){return p.indexOf(t)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var f={placement:(0,l.default)(e.placement),variation:(0,c.default)(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,u(Object.assign({},f,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:d})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,u(Object.assign({},f,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:d})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s={passive:!0};const o={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,i=t.instance,o=t.options,r=o.scroll,a=void 0===r||r,l=o.resize,c=void 0===l||l,h=(0,n.default)(e.elements.popper),d=[].concat(e.scrollParents.reference,e.scrollParents.popper);return a&&d.forEach((function(t){t.addEventListener("scroll",i.update,s)})),c&&h.addEventListener("resize",i.update,s),function(){a&&d.forEach((function(t){t.removeEventListener("scroll",i.update,s)})),c&&h.removeEventListener("resize",i.update,s)}},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/flip.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var n=i("./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js"),s=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),o=i("./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js"),r=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),a=i("./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"),l=i("./node_modules/@popperjs/core/lib/enums.js"),c=i("./node_modules/@popperjs/core/lib/utils/getVariation.js");const h={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,h=t.name;if(!e.modifiersData[h]._skip){for(var d=i.mainAxis,u=void 0===d||d,p=i.altAxis,f=void 0===p||p,g=i.fallbackPlacements,m=i.padding,b=i.boundary,_=i.rootBoundary,v=i.altBoundary,y=i.flipVariations,x=void 0===y||y,w=i.allowedAutoPlacements,k=e.options.placement,j=(0,s.default)(k),S=g||(j===k||!x?[(0,n.default)(k)]:function(t){if((0,s.default)(t)===l.auto)return[];var e=(0,n.default)(t);return[(0,o.default)(t),e,(0,o.default)(e)]}(k)),T=[k].concat(S).reduce((function(t,i){return t.concat((0,s.default)(i)===l.auto?(0,a.default)(e,{placement:i,boundary:b,rootBoundary:_,padding:m,flipVariations:x,allowedAutoPlacements:w}):i)}),[]),C=e.rects.reference,M=e.rects.popper,A=new Map,E=!0,O=T[0],P=0;P<T.length;P++){var D=T[P],L=(0,s.default)(D),N=(0,c.default)(D)===l.start,I=[l.top,l.bottom].indexOf(L)>=0,R=I?"width":"height",F=(0,r.default)(e,{placement:D,boundary:b,rootBoundary:_,altBoundary:v,padding:m}),H=I?N?l.right:l.left:N?l.bottom:l.top;C[R]>M[R]&&(H=(0,n.default)(H));var B=(0,n.default)(H),z=[];if(u&&z.push(F[L]<=0),f&&z.push(F[H]<=0,F[B]<=0),z.every((function(t){return t}))){O=D,E=!1;break}A.set(D,z)}if(E)for(var W=function(t){var e=T.find((function(e){var i=A.get(e);if(i)return i.slice(0,t).every((function(t){return t}))}));if(e)return O=e,"break"},$=x?3:1;$>0;$--){if("break"===W($))break}e.placement!==O&&(e.modifiersData[h]._skip=!0,e.placement=O,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},"./node_modules/@popperjs/core/lib/modifiers/hide.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/enums.js"),s=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js");function o(t,e,i){return void 0===i&&(i={x:0,y:0}),{top:t.top-e.height-i.y,right:t.right-e.width+i.x,bottom:t.bottom-e.height+i.y,left:t.left-e.width-i.x}}function r(t){return[n.top,n.right,n.bottom,n.left].some((function(e){return t[e]>=0}))}const a={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,i=t.name,n=e.rects.reference,a=e.rects.popper,l=e.modifiersData.preventOverflow,c=(0,s.default)(e,{elementContext:"reference"}),h=(0,s.default)(e,{altBoundary:!0}),d=o(c,n),u=o(h,a,l),p=r(d),f=r(u);e.modifiersData[i]={referenceClippingOffsets:d,popperEscapeOffsets:u,isReferenceHidden:p,hasPopperEscaped:f},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":p,"data-popper-escaped":f})}}},"./node_modules/@popperjs/core/lib/modifiers/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{applyStyles:()=>n.default,arrow:()=>s.default,computeStyles:()=>o.default,eventListeners:()=>r.default,flip:()=>a.default,hide:()=>l.default,offset:()=>c.default,popperOffsets:()=>h.default,preventOverflow:()=>d.default});var n=i("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),s=i("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),o=i("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),r=i("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),a=i("./node_modules/@popperjs/core/lib/modifiers/flip.js"),l=i("./node_modules/@popperjs/core/lib/modifiers/hide.js"),c=i("./node_modules/@popperjs/core/lib/modifiers/offset.js"),h=i("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),d=i("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js")},"./node_modules/@popperjs/core/lib/modifiers/offset.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r,distanceAndSkiddingToXY:()=>o});var n=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("./node_modules/@popperjs/core/lib/enums.js");function o(t,e,i){var o=(0,n.default)(t),r=[s.left,s.top].indexOf(o)>=0?-1:1,a="function"==typeof i?i(Object.assign({},e,{placement:t})):i,l=a[0],c=a[1];return l=l||0,c=(c||0)*r,[s.left,s.right].indexOf(o)>=0?{x:c,y:l}:{x:l,y:c}}const r={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,i=t.options,n=t.name,r=i.offset,a=void 0===r?[0,0]:r,l=s.placements.reduce((function(t,i){return t[i]=o(i,e.rects,a),t}),{}),c=l[e.placement],h=c.x,d=c.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=h,e.modifiersData.popperOffsets.y+=d),e.modifiersData[n]=l}}},"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/utils/computeOffsets.js");const s={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,i=t.name;e.modifiersData[i]=(0,n.default)({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>f});var n=i("./node_modules/@popperjs/core/lib/enums.js"),s=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),o=i("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=i("./node_modules/@popperjs/core/lib/utils/getAltAxis.js"),a=i("./node_modules/@popperjs/core/lib/utils/within.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),h=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),d=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),u=i("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js"),p=i("./node_modules/@popperjs/core/lib/utils/math.js");const f={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,f=t.name,g=i.mainAxis,m=void 0===g||g,b=i.altAxis,_=void 0!==b&&b,v=i.boundary,y=i.rootBoundary,x=i.altBoundary,w=i.padding,k=i.tether,j=void 0===k||k,S=i.tetherOffset,T=void 0===S?0:S,C=(0,h.default)(e,{boundary:v,rootBoundary:y,padding:w,altBoundary:x}),M=(0,s.default)(e.placement),A=(0,d.default)(e.placement),E=!A,O=(0,o.default)(M),P=(0,r.default)(O),D=e.modifiersData.popperOffsets,L=e.rects.reference,N=e.rects.popper,I="function"==typeof T?T(Object.assign({},e.rects,{placement:e.placement})):T,R="number"==typeof I?{mainAxis:I,altAxis:I}:Object.assign({mainAxis:0,altAxis:0},I),F=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,H={x:0,y:0};if(D){if(m){var B,z="y"===O?n.top:n.left,W="y"===O?n.bottom:n.right,$="y"===O?"height":"width",V=D[O],q=V+C[z],Y=V-C[W],X=j?-N[$]/2:0,U=A===n.start?L[$]:N[$],K=A===n.start?-N[$]:-L[$],Q=e.elements.arrow,G=j&&Q?(0,l.default)(Q):{width:0,height:0},J=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:(0,u.default)(),Z=J[z],tt=J[W],et=(0,a.within)(0,L[$],G[$]),it=E?L[$]/2-X-et-Z-R.mainAxis:U-et-Z-R.mainAxis,nt=E?-L[$]/2+X+et+tt+R.mainAxis:K+et+tt+R.mainAxis,st=e.elements.arrow&&(0,c.default)(e.elements.arrow),ot=st?"y"===O?st.clientTop||0:st.clientLeft||0:0,rt=null!=(B=null==F?void 0:F[O])?B:0,at=V+it-rt-ot,lt=V+nt-rt,ct=(0,a.within)(j?(0,p.min)(q,at):q,V,j?(0,p.max)(Y,lt):Y);D[O]=ct,H[O]=ct-V}if(_){var ht,dt="x"===O?n.top:n.left,ut="x"===O?n.bottom:n.right,pt=D[P],ft="y"===P?"height":"width",gt=pt+C[dt],mt=pt-C[ut],bt=-1!==[n.top,n.left].indexOf(M),_t=null!=(ht=null==F?void 0:F[P])?ht:0,vt=bt?gt:pt-L[ft]-N[ft]-_t+R.altAxis,yt=bt?pt+L[ft]+N[ft]-_t-R.altAxis:mt,xt=j&&bt?(0,a.withinMaxClamp)(vt,pt,yt):(0,a.within)(j?vt:gt,pt,j?yt:mt);D[P]=xt,H[P]=xt-pt}e.modifiersData[f]=H}},requiresIfExists:["offset"]}},"./node_modules/@popperjs/core/lib/popper-lite.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{createPopper:()=>h,defaultModifiers:()=>c,detectOverflow:()=>s.default,popperGenerator:()=>n.popperGenerator});var n=i("./node_modules/@popperjs/core/lib/createPopper.js"),s=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),o=i("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=i("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),a=i("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),l=i("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),c=[o.default,r.default,a.default,l.default],h=(0,n.popperGenerator)({defaultModifiers:c})},"./node_modules/@popperjs/core/lib/popper.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{applyStyles:()=>g.applyStyles,arrow:()=>g.arrow,computeStyles:()=>g.computeStyles,createPopper:()=>b,createPopperLite:()=>f.createPopper,defaultModifiers:()=>m,detectOverflow:()=>s.default,eventListeners:()=>g.eventListeners,flip:()=>g.flip,hide:()=>g.hide,offset:()=>g.offset,popperGenerator:()=>n.popperGenerator,popperOffsets:()=>g.popperOffsets,preventOverflow:()=>g.preventOverflow});var n=i("./node_modules/@popperjs/core/lib/createPopper.js"),s=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),o=i("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=i("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),a=i("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),l=i("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),c=i("./node_modules/@popperjs/core/lib/modifiers/offset.js"),h=i("./node_modules/@popperjs/core/lib/modifiers/flip.js"),d=i("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js"),u=i("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),p=i("./node_modules/@popperjs/core/lib/modifiers/hide.js"),f=i("./node_modules/@popperjs/core/lib/popper-lite.js"),g=i("./node_modules/@popperjs/core/lib/modifiers/index.js"),m=[o.default,r.default,a.default,l.default,c.default,h.default,d.default,u.default,p.default],b=(0,n.popperGenerator)({defaultModifiers:m})},"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),s=i("./node_modules/@popperjs/core/lib/enums.js"),o=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),r=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");function a(t,e){void 0===e&&(e={});var i=e,a=i.placement,l=i.boundary,c=i.rootBoundary,h=i.padding,d=i.flipVariations,u=i.allowedAutoPlacements,p=void 0===u?s.placements:u,f=(0,n.default)(a),g=f?d?s.variationPlacements:s.variationPlacements.filter((function(t){return(0,n.default)(t)===f})):s.basePlacements,m=g.filter((function(t){return p.indexOf(t)>=0}));0===m.length&&(m=g,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var b=m.reduce((function(e,i){return e[i]=(0,o.default)(t,{placement:i,boundary:l,rootBoundary:c,padding:h})[(0,r.default)(i)],e}),{});return Object.keys(b).sort((function(t,e){return b[t]-b[e]}))}},"./node_modules/@popperjs/core/lib/utils/computeOffsets.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),o=i("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=i("./node_modules/@popperjs/core/lib/enums.js");function a(t){var e,i=t.reference,a=t.element,l=t.placement,c=l?(0,n.default)(l):null,h=l?(0,s.default)(l):null,d=i.x+i.width/2-a.width/2,u=i.y+i.height/2-a.height/2;switch(c){case r.top:e={x:d,y:i.y-a.height};break;case r.bottom:e={x:d,y:i.y+i.height};break;case r.right:e={x:i.x+i.width,y:u};break;case r.left:e={x:i.x-a.width,y:u};break;default:e={x:i.x,y:i.y}}var p=c?(0,o.default)(c):null;if(null!=p){var f="y"===p?"height":"width";switch(h){case r.start:e[p]=e[p]-(i[f]/2-a[f]/2);break;case r.end:e[p]=e[p]+(i[f]/2-a[f]/2)}}return e}},"./node_modules/@popperjs/core/lib/utils/debounce.js":(t,e,i)=>{"use strict";function n(t){var e;return function(){return e||(e=new Promise((function(i){Promise.resolve().then((function(){e=void 0,i(t())}))}))),e}}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/detectOverflow.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>u});var n=i("./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),o=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=i("./node_modules/@popperjs/core/lib/utils/computeOffsets.js"),a=i("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),l=i("./node_modules/@popperjs/core/lib/enums.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),h=i("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),d=i("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");function u(t,e){void 0===e&&(e={});var i=e,u=i.placement,p=void 0===u?t.placement:u,f=i.strategy,g=void 0===f?t.strategy:f,m=i.boundary,b=void 0===m?l.clippingParents:m,_=i.rootBoundary,v=void 0===_?l.viewport:_,y=i.elementContext,x=void 0===y?l.popper:y,w=i.altBoundary,k=void 0!==w&&w,j=i.padding,S=void 0===j?0:j,T=(0,h.default)("number"!=typeof S?S:(0,d.default)(S,l.basePlacements)),C=x===l.popper?l.reference:l.popper,M=t.rects.popper,A=t.elements[k?C:x],E=(0,n.default)((0,c.isElement)(A)?A:A.contextElement||(0,s.default)(t.elements.popper),b,v,g),O=(0,o.default)(t.elements.reference),P=(0,r.default)({reference:O,element:M,strategy:"absolute",placement:p}),D=(0,a.default)(Object.assign({},M,P)),L=x===l.popper?D:O,N={top:E.top-L.top+T.top,bottom:L.bottom-E.bottom+T.bottom,left:E.left-L.left+T.left,right:L.right-E.right+T.right},I=t.modifiersData.offset;if(x===l.popper&&I){var R=I[p];Object.keys(N).forEach((function(t){var e=[l.right,l.bottom].indexOf(t)>=0?1:-1,i=[l.top,l.bottom].indexOf(t)>=0?"y":"x";N[t]+=R[i]*e}))}return N}},"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":(t,e,i)=>{"use strict";function n(t,e){return e.reduce((function(e,i){return e[i]=t,e}),{})}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/format.js":(t,e,i)=>{"use strict";function n(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];return[].concat(i).reduce((function(t,e){return t.replace(/%s/,e)}),t)}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getAltAxis.js":(t,e,i)=>{"use strict";function n(t){return"x"===t?"y":"x"}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":(t,e,i)=>{"use strict";function n(t){return t.split("-")[0]}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":(t,e,i)=>{"use strict";function n(){return{top:0,right:0,bottom:0,left:0}}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":(t,e,i)=>{"use strict";function n(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n={left:"right",right:"left",bottom:"top",top:"bottom"};function s(t){return t.replace(/left|right|bottom|top/g,(function(t){return n[t]}))}},"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n={start:"end",end:"start"};function s(t){return t.replace(/start|end/g,(function(t){return n[t]}))}},"./node_modules/@popperjs/core/lib/utils/getVariation.js":(t,e,i)=>{"use strict";function n(t){return t.split("-")[1]}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/math.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{max:()=>n,min:()=>s,round:()=>o});var n=Math.max,s=Math.min,o=Math.round},"./node_modules/@popperjs/core/lib/utils/mergeByName.js":(t,e,i)=>{"use strict";function n(t){var e=t.reduce((function(t,e){var i=t[e.name];return t[e.name]=i?Object.assign({},i,e,{options:Object.assign({},i.options,e.options),data:Object.assign({},i.data,e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");function s(t){return Object.assign({},(0,n.default)(),t)}},"./node_modules/@popperjs/core/lib/utils/orderModifiers.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("./node_modules/@popperjs/core/lib/enums.js");function s(t){var e=new Map,i=new Set,n=[];function s(t){i.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!i.has(t)){var n=e.get(t);n&&s(n)}})),n.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){i.has(t.name)||s(t)})),n}function o(t){var e=s(t);return n.modifierPhases.reduce((function(t,i){return t.concat(e.filter((function(t){return t.phase===i})))}),[])}},"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":(t,e,i)=>{"use strict";function n(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/uniqueBy.js":(t,e,i)=>{"use strict";function n(t,e){var i=new Set;return t.filter((function(t){var n=e(t);if(!i.has(n))return i.add(n),!0}))}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/userAgent.js":(t,e,i)=>{"use strict";function n(){var t=navigator.userAgentData;return null!=t&&t.brands&&Array.isArray(t.brands)?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}i.r(e),i.d(e,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/validateModifiers.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>l});var n=i("./node_modules/@popperjs/core/lib/utils/format.js"),s=i("./node_modules/@popperjs/core/lib/enums.js"),o='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',r='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',a=["name","enabled","phase","fn","effect","requires","options"];function l(t){t.forEach((function(e){[].concat(Object.keys(e),a).filter((function(t,e,i){return i.indexOf(t)===e})).forEach((function(i){switch(i){case"name":"string"!=typeof e.name&&console.error((0,n.default)(o,String(e.name),'"name"','"string"','"'+String(e.name)+'"'));break;case"enabled":"boolean"!=typeof e.enabled&&console.error((0,n.default)(o,e.name,'"enabled"','"boolean"','"'+String(e.enabled)+'"'));break;case"phase":s.modifierPhases.indexOf(e.phase)<0&&console.error((0,n.default)(o,e.name,'"phase"',"either "+s.modifierPhases.join(", "),'"'+String(e.phase)+'"'));break;case"fn":"function"!=typeof e.fn&&console.error((0,n.default)(o,e.name,'"fn"','"function"','"'+String(e.fn)+'"'));break;case"effect":null!=e.effect&&"function"!=typeof e.effect&&console.error((0,n.default)(o,e.name,'"effect"','"function"','"'+String(e.fn)+'"'));break;case"requires":null==e.requires||Array.isArray(e.requires)||console.error((0,n.default)(o,e.name,'"requires"','"array"','"'+String(e.requires)+'"'));break;case"requiresIfExists":Array.isArray(e.requiresIfExists)||console.error((0,n.default)(o,e.name,'"requiresIfExists"','"array"','"'+String(e.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+e.name+'" modifier, valid properties are '+a.map((function(t){return'"'+t+'"'})).join(", ")+'; but "'+i+'" was provided.')}e.requires&&e.requires.forEach((function(i){null==t.find((function(t){return t.name===i}))&&console.error((0,n.default)(r,String(e.name),i,i))}))}))}))}},"./node_modules/@popperjs/core/lib/utils/within.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{within:()=>s,withinMaxClamp:()=>o});var n=i("./node_modules/@popperjs/core/lib/utils/math.js");function s(t,e,i){return(0,n.max)(t,(0,n.min)(e,i))}function o(t,e,i){var n=s(t,e,i);return n>i?i:n}},"./node_modules/bootstrap/dist/js/bootstrap.esm.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Alert:()=>J,Button:()=>tt,Carousel:()=>Pt,Collapse:()=>Yt,Dropdown:()=>be,Modal:()=>Je,Offcanvas:()=>mi,Popover:()=>Hi,ScrollSpy:()=>Qi,Tab:()=>bn,Toast:()=>Pn,Tooltip:()=>Ii});var n=i("./node_modules/@popperjs/core/lib/index.js"),s=i("./node_modules/@popperjs/core/lib/popper.js");const o="transitionend",r=t=>(t&&window.CSS&&window.CSS.escape&&(t=t.replace(/#([^\s"#']+)/g,((t,e)=>`#${CSS.escape(e)}`))),t),a=t=>{t.dispatchEvent(new Event(o))},l=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),c=t=>l(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(r(t)):null,h=t=>{if(!l(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),i=t.closest("details:not([open])");if(!i)return e;if(i!==t){const e=t.closest("summary");if(e&&e.parentNode!==i)return!1;if(null===e)return!1}return e},d=t=>!t||t.nodeType!==Node.ELEMENT_NODE||(!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled"))),u=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?u(t.parentNode):null},p=()=>{},f=t=>{t.offsetHeight},g=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,m=[],b=()=>"rtl"===document.documentElement.dir,_=t=>{var e;e=()=>{const e=g();if(e){const i=t.NAME,n=e.fn[i];e.fn[i]=t.jQueryInterface,e.fn[i].Constructor=t,e.fn[i].noConflict=()=>(e.fn[i]=n,t.jQueryInterface)}},"loading"===document.readyState?(m.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of m)t()})),m.push(e)):e()},v=(t,e=[],i=t)=>"function"==typeof t?t(...e):i,y=(t,e,i=!0)=>{if(!i)return void v(t);const n=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:i}=window.getComputedStyle(t);const n=Number.parseFloat(e),s=Number.parseFloat(i);return n||s?(e=e.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(i))):0})(e)+5;let s=!1;const r=({target:i})=>{i===e&&(s=!0,e.removeEventListener(o,r),v(t))};e.addEventListener(o,r),setTimeout((()=>{s||a(e)}),n)},x=(t,e,i,n)=>{const s=t.length;let o=t.indexOf(e);return-1===o?!i&&n?t[s-1]:t[0]:(o+=i?1:-1,n&&(o=(o+s)%s),t[Math.max(0,Math.min(o,s-1))])},w=/[^.]*(?=\..*)\.|.*/,k=/\..*/,j=/::\d+$/,S={};let T=1;const C={mouseenter:"mouseover",mouseleave:"mouseout"},M=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function A(t,e){return e&&`${e}::${T++}`||t.uidEvent||T++}function E(t){const e=A(t);return t.uidEvent=e,S[e]=S[e]||{},S[e]}function O(t,e,i=null){return Object.values(t).find((t=>t.callable===e&&t.delegationSelector===i))}function P(t,e,i){const n="string"==typeof e,s=n?i:e||i;let o=I(t);return M.has(o)||(o=t),[n,s,o]}function D(t,e,i,n,s){if("string"!=typeof e||!t)return;let[o,r,a]=P(e,i,n);if(e in C){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};r=t(r)}const l=E(t),c=l[a]||(l[a]={}),h=O(c,r,o?i:null);if(h)return void(h.oneOff=h.oneOff&&s);const d=A(r,e.replace(w,"")),u=o?function(t,e,i){return function n(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return F(s,{delegateTarget:r}),n.oneOff&&R.off(t,s.type,e,i),i.apply(r,[s])}}(t,i,r):function(t,e){return function i(n){return F(n,{delegateTarget:t}),i.oneOff&&R.off(t,n.type,e),e.apply(t,[n])}}(t,r);u.delegationSelector=o?i:null,u.callable=r,u.oneOff=s,u.uidEvent=d,c[d]=u,t.addEventListener(a,u,o)}function L(t,e,i,n,s){const o=O(e[i],n,s);o&&(t.removeEventListener(i,o,Boolean(s)),delete e[i][o.uidEvent])}function N(t,e,i,n){const s=e[i]||{};for(const[o,r]of Object.entries(s))o.includes(n)&&L(t,e,i,r.callable,r.delegationSelector)}function I(t){return t=t.replace(k,""),C[t]||t}const R={on(t,e,i,n){D(t,e,i,n,!1)},one(t,e,i,n){D(t,e,i,n,!0)},off(t,e,i,n){if("string"!=typeof e||!t)return;const[s,o,r]=P(e,i,n),a=r!==e,l=E(t),c=l[r]||{},h=e.startsWith(".");if(void 0===o){if(h)for(const i of Object.keys(l))N(t,l,i,e.slice(1));for(const[i,n]of Object.entries(c)){const s=i.replace(j,"");a&&!e.includes(s)||L(t,l,r,n.callable,n.delegationSelector)}}else{if(!Object.keys(c).length)return;L(t,l,r,o,s?i:null)}},trigger(t,e,i){if("string"!=typeof e||!t)return null;const n=g();let s=null,o=!0,r=!0,a=!1;e!==I(e)&&n&&(s=n.Event(e,i),n(t).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());let l=new Event(e,{bubbles:o,cancelable:!0});return l=F(l,i),a&&l.preventDefault(),r&&t.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function F(t,e={}){for(const[i,n]of Object.entries(e))try{t[i]=n}catch(e){Object.defineProperty(t,i,{configurable:!0,get:()=>n})}return t}const H=new Map,B={set(t,e,i){H.has(t)||H.set(t,new Map);const n=H.get(t);n.has(e)||0===n.size?n.set(e,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(t,e)=>H.has(t)&&H.get(t).get(e)||null,remove(t,e){if(!H.has(t))return;const i=H.get(t);i.delete(e),0===i.size&&H.delete(t)}};function z(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function W(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}const $={setDataAttribute(t,e,i){t.setAttribute(`data-bs-${W(e)}`,i)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${W(e)}`)},getDataAttributes(t){if(!t)return{};const e={},i=Object.keys(t.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=z(t.dataset[n])}return e},getDataAttribute:(t,e)=>z(t.getAttribute(`data-bs-${W(e)}`))};class V{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const i=l(e)?$.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...l(e)?$.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const[n,s]of Object.entries(e)){const e=t[n],o=l(e)?"element":null==(i=e)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${o}" but expected type "${s}".`)}var i}}class q extends V{constructor(t,e){super(),(t=c(t))&&(this._element=t,this._config=this._getConfig(e),B.set(this._element,this.constructor.DATA_KEY,this))}dispose(){B.remove(this._element,this.constructor.DATA_KEY),R.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,i=!0){y(t,e,i)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(t){return B.get(c(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.3.0-alpha2"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}const Y=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let i=t.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),e=i&&"#"!==i?i.trim():null}return r(e)},X={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const i=[];let n=t.parentNode.closest(e);for(;n;)i.push(n),n=n.parentNode.closest(e);return i},prev(t,e){let i=t.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(t,e){let i=t.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(e,t).filter((t=>!d(t)&&h(t)))},getSelectorFromElement(t){const e=Y(t);return e&&X.findOne(e)?e:null},getElementFromSelector(t){const e=Y(t);return e?X.findOne(e):null},getMultipleElementsFromSelector(t){const e=Y(t);return e?X.find(e):[]}},U=(t,e="hide")=>{const i=`click.dismiss${t.EVENT_KEY}`,n=t.NAME;R.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),d(this))return;const s=X.getElementFromSelector(this)||this.closest(`.${n}`);t.getOrCreateInstance(s)[e]()}))},K=".bs.alert",Q=`close${K}`,G=`closed${K}`;class J extends q{static get NAME(){return"alert"}close(){if(R.trigger(this._element,Q).defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),R.trigger(this._element,G),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=J.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}U(J,"close"),_(J);const Z='[data-bs-toggle="button"]';class tt extends q{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=tt.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}R.on(document,"click.bs.button.data-api",Z,(t=>{t.preventDefault();const e=t.target.closest(Z);tt.getOrCreateInstance(e).toggle()})),_(tt);const et=".bs.swipe",it=`touchstart${et}`,nt=`touchmove${et}`,st=`touchend${et}`,ot=`pointerdown${et}`,rt=`pointerup${et}`,at={endCallback:null,leftCallback:null,rightCallback:null},lt={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ct extends V{constructor(t,e){super(),this._element=t,t&&ct.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return at}static get DefaultType(){return lt}static get NAME(){return"swipe"}dispose(){R.off(this._element,et)}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),v(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&v(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(R.on(this._element,ot,(t=>this._start(t))),R.on(this._element,rt,(t=>this._end(t))),this._element.classList.add("pointer-event")):(R.on(this._element,it,(t=>this._start(t))),R.on(this._element,nt,(t=>this._move(t))),R.on(this._element,st,(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ht=".bs.carousel",dt=".data-api",ut="next",pt="prev",ft="left",gt="right",mt=`slide${ht}`,bt=`slid${ht}`,_t=`keydown${ht}`,vt=`mouseenter${ht}`,yt=`mouseleave${ht}`,xt=`dragstart${ht}`,wt=`load${ht}${dt}`,kt=`click${ht}${dt}`,jt="carousel",St="active",Tt=".active",Ct=".carousel-item",Mt=Tt+Ct,At={ArrowLeft:gt,ArrowRight:ft},Et={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ot={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Pt extends q{constructor(t,e){super(t,e),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=X.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===jt&&this.cycle()}static get Default(){return Et}static get DefaultType(){return Ot}static get NAME(){return"carousel"}next(){this._slide(ut)}nextWhenVisible(){!document.hidden&&h(this._element)&&this.next()}prev(){this._slide(pt)}pause(){this._isSliding&&a(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?R.one(this._element,bt,(()=>this.cycle())):this.cycle())}to(t){const e=this._getItems();if(t>e.length-1||t<0)return;if(this._isSliding)return void R.one(this._element,bt,(()=>this.to(t)));const i=this._getItemIndex(this._getActive());if(i===t)return;const n=t>i?ut:pt;this._slide(n,e[t])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(t){return t.defaultInterval=t.interval,t}_addEventListeners(){this._config.keyboard&&R.on(this._element,_t,(t=>this._keydown(t))),"hover"===this._config.pause&&(R.on(this._element,vt,(()=>this.pause())),R.on(this._element,yt,(()=>this._maybeEnableCycle()))),this._config.touch&&ct.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const t of X.find(".carousel-item img",this._element))R.on(t,xt,(t=>t.preventDefault()));const t={leftCallback:()=>this._slide(this._directionToOrder(ft)),rightCallback:()=>this._slide(this._directionToOrder(gt)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new ct(this._element,t)}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=At[t.key];e&&(t.preventDefault(),this._slide(this._directionToOrder(e)))}_getItemIndex(t){return this._getItems().indexOf(t)}_setActiveIndicatorElement(t){if(!this._indicatorsElement)return;const e=X.findOne(Tt,this._indicatorsElement);e.classList.remove(St),e.removeAttribute("aria-current");const i=X.findOne(`[data-bs-slide-to="${t}"]`,this._indicatorsElement);i&&(i.classList.add(St),i.setAttribute("aria-current","true"))}_updateInterval(){const t=this._activeElement||this._getActive();if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);this._config.interval=e||this._config.defaultInterval}_slide(t,e=null){if(this._isSliding)return;const i=this._getActive(),n=t===ut,s=e||x(this._getItems(),i,n,this._config.wrap);if(s===i)return;const o=this._getItemIndex(s),r=e=>R.trigger(this._element,e,{relatedTarget:s,direction:this._orderToDirection(t),from:this._getItemIndex(i),to:o});if(r(mt).defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",c=n?"carousel-item-next":"carousel-item-prev";s.classList.add(c),f(s),i.classList.add(l),s.classList.add(l);this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(St),i.classList.remove(St,c,l),this._isSliding=!1,r(bt)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return X.findOne(Mt,this._element)}_getItems(){return X.find(Ct,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(t){return b()?t===ft?pt:ut:t===ft?ut:pt}_orderToDirection(t){return b()?t===pt?ft:gt:t===pt?gt:ft}static jQueryInterface(t){return this.each((function(){const e=Pt.getOrCreateInstance(this,t);if("number"!=typeof t){if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}else e.to(t)}))}}R.on(document,kt,"[data-bs-slide], [data-bs-slide-to]",(function(t){const e=X.getElementFromSelector(this);if(!e||!e.classList.contains(jt))return;t.preventDefault();const i=Pt.getOrCreateInstance(e),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===$.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),R.on(window,wt,(()=>{const t=X.find('[data-bs-ride="carousel"]');for(const e of t)Pt.getOrCreateInstance(e)})),_(Pt);const Dt=".bs.collapse",Lt=`show${Dt}`,Nt=`shown${Dt}`,It=`hide${Dt}`,Rt=`hidden${Dt}`,Ft=`click${Dt}.data-api`,Ht="show",Bt="collapse",zt="collapsing",Wt=`:scope .${Bt} .${Bt}`,$t='[data-bs-toggle="collapse"]',Vt={parent:null,toggle:!0},qt={parent:"(null|element)",toggle:"boolean"};class Yt extends q{constructor(t,e){super(t,e),this._isTransitioning=!1,this._triggerArray=[];const i=X.find($t);for(const t of i){const e=X.getSelectorFromElement(t),i=X.find(e).filter((t=>t===this._element));null!==e&&i.length&&this._triggerArray.push(t)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Vt}static get DefaultType(){return qt}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t=>t!==this._element)).map((t=>Yt.getOrCreateInstance(t,{toggle:!1})))),t.length&&t[0]._isTransitioning)return;if(R.trigger(this._element,Lt).defaultPrevented)return;for(const e of t)e.hide();const e=this._getDimension();this._element.classList.remove(Bt),this._element.classList.add(zt),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${e[0].toUpperCase()+e.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(zt),this._element.classList.add(Bt,Ht),this._element.style[e]="",R.trigger(this._element,Nt)}),this._element,!0),this._element.style[e]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(R.trigger(this._element,It).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,f(this._element),this._element.classList.add(zt),this._element.classList.remove(Bt,Ht);for(const t of this._triggerArray){const e=X.getElementFromSelector(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(zt),this._element.classList.add(Bt),R.trigger(this._element,Rt)}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(Ht)}_configAfterMerge(t){return t.toggle=Boolean(t.toggle),t.parent=c(t.parent),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=this._getFirstLevelChildren($t);for(const e of t){const t=X.getElementFromSelector(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(t){const e=X.find(Wt,this._config.parent);return X.find(t,this._config.parent).filter((t=>!e.includes(t)))}_addAriaAndCollapsedClass(t,e){if(t.length)for(const i of t)i.classList.toggle("collapsed",!e),i.setAttribute("aria-expanded",e)}static jQueryInterface(t){const e={};return"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1),this.each((function(){const i=Yt.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}R.on(document,Ft,$t,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();for(const t of X.getMultipleElementsFromSelector(this))Yt.getOrCreateInstance(t,{toggle:!1}).toggle()})),_(Yt);const Xt="dropdown",Ut=".bs.dropdown",Kt=".data-api",Qt="ArrowUp",Gt="ArrowDown",Jt=`hide${Ut}`,Zt=`hidden${Ut}`,te=`show${Ut}`,ee=`shown${Ut}`,ie=`click${Ut}${Kt}`,ne=`keydown${Ut}${Kt}`,se=`keyup${Ut}${Kt}`,oe="show",re='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ae=`${re}.${oe}`,le=".dropdown-menu",ce=b()?"top-end":"top-start",he=b()?"top-start":"top-end",de=b()?"bottom-end":"bottom-start",ue=b()?"bottom-start":"bottom-end",pe=b()?"left-start":"right-start",fe=b()?"right-start":"left-start",ge={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},me={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class be extends q{constructor(t,e){super(t,e),this._popper=null,this._parent=this._element.parentNode,this._menu=X.next(this._element,le)[0]||X.prev(this._element,le)[0]||X.findOne(le,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return ge}static get DefaultType(){return me}static get NAME(){return Xt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(d(this._element)||this._isShown())return;const t={relatedTarget:this._element};if(!R.trigger(this._element,te,t).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const t of[].concat(...document.body.children))R.on(t,"mouseover",p);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(oe),this._element.classList.add(oe),R.trigger(this._element,ee,t)}}hide(){if(d(this._element)||!this._isShown())return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){if(!R.trigger(this._element,Jt,t).defaultPrevented){if("ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))R.off(t,"mouseover",p);this._popper&&this._popper.destroy(),this._menu.classList.remove(oe),this._element.classList.remove(oe),this._element.setAttribute("aria-expanded","false"),$.removeDataAttribute(this._menu,"popper"),R.trigger(this._element,Zt,t)}}_getConfig(t){if("object"==typeof(t=super._getConfig(t)).reference&&!l(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Xt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:l(this._config.reference)?t=c(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const e=this._getPopperConfig();this._popper=s.createPopper(t,this._menu,e)}_isShown(){return this._menu.classList.contains(oe)}_getPlacement(){const t=this._parent;if(t.classList.contains("dropend"))return pe;if(t.classList.contains("dropstart"))return fe;if(t.classList.contains("dropup-center"))return"top";if(t.classList.contains("dropdown-center"))return"bottom";const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?he:ce:e?ue:de}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&($.setDataAttribute(this._menu,"popper","static"),t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,...v(this._config.popperConfig,[t])}}_selectMenuItem({key:t,target:e}){const i=X.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((t=>h(t)));i.length&&x(i,e,t===Gt,!i.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=be.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(2===t.button||"keyup"===t.type&&"Tab"!==t.key)return;const e=X.find(ae);for(const i of e){const e=be.getInstance(i);if(!e||!1===e._config.autoClose)continue;const n=t.composedPath(),s=n.includes(e._menu);if(n.includes(e._element)||"inside"===e._config.autoClose&&!s||"outside"===e._config.autoClose&&s)continue;if(e._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;const o={relatedTarget:e._element};"click"===t.type&&(o.clickEvent=t),e._completeHide(o)}}static dataApiKeydownHandler(t){const e=/input|textarea/i.test(t.target.tagName),i="Escape"===t.key,n=[Qt,Gt].includes(t.key);if(!n&&!i)return;if(e&&!i)return;t.preventDefault();const s=this.matches(re)?this:X.prev(this,re)[0]||X.next(this,re)[0]||X.findOne(re,t.delegateTarget.parentNode),o=be.getOrCreateInstance(s);if(n)return t.stopPropagation(),o.show(),void o._selectMenuItem(t);o._isShown()&&(t.stopPropagation(),o.hide(),s.focus())}}R.on(document,ne,re,be.dataApiKeydownHandler),R.on(document,ne,le,be.dataApiKeydownHandler),R.on(document,ie,be.clearMenus),R.on(document,se,be.clearMenus),R.on(document,ie,re,(function(t){t.preventDefault(),be.getOrCreateInstance(this).toggle()})),_(be);const _e=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",ve=".sticky-top",ye="padding-right",xe="margin-right";class we{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,ye,(e=>e+t)),this._setElementAttributes(_e,ye,(e=>e+t)),this._setElementAttributes(ve,xe,(e=>e-t))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,ye),this._resetElementAttributes(_e,ye),this._resetElementAttributes(ve,xe)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,i){const n=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+n)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t).getPropertyValue(e);t.style.setProperty(e,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(t,e){const i=t.style.getPropertyValue(e);i&&$.setDataAttribute(t,e,i)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const i=$.getDataAttribute(t,e);null!==i?($.removeDataAttribute(t,e),t.style.setProperty(e,i)):t.style.removeProperty(e)}))}_applyManipulationCallback(t,e){if(l(t))e(t);else for(const i of X.find(t,this._element))e(i)}}const ke="backdrop",je="show",Se=`mousedown.bs.${ke}`,Te={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Ce={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Me extends V{constructor(t){super(),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}static get Default(){return Te}static get DefaultType(){return Ce}static get NAME(){return ke}show(t){if(!this._config.isVisible)return void v(t);this._append();const e=this._getElement();this._config.isAnimated&&f(e),e.classList.add(je),this._emulateAnimation((()=>{v(t)}))}hide(t){this._config.isVisible?(this._getElement().classList.remove(je),this._emulateAnimation((()=>{this.dispose(),v(t)}))):v(t)}dispose(){this._isAppended&&(R.off(this._element,Se),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_configAfterMerge(t){return t.rootElement=c(t.rootElement),t}_append(){if(this._isAppended)return;const t=this._getElement();this._config.rootElement.append(t),R.on(t,Se,(()=>{v(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(t){y(t,this._getElement(),this._config.isAnimated)}}const Ae=".bs.focustrap",Ee=`focusin${Ae}`,Oe=`keydown.tab${Ae}`,Pe="backward",De={autofocus:!0,trapElement:null},Le={autofocus:"boolean",trapElement:"element"};class Ne extends V{constructor(t){super(),this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return De}static get DefaultType(){return Le}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),R.off(document,Ae),R.on(document,Ee,(t=>this._handleFocusin(t))),R.on(document,Oe,(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,R.off(document,Ae))}_handleFocusin(t){const{trapElement:e}=this._config;if(t.target===document||t.target===e||e.contains(t.target))return;const i=X.focusableChildren(e);0===i.length?e.focus():this._lastTabNavDirection===Pe?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Pe:"forward")}}const Ie=".bs.modal",Re=`hide${Ie}`,Fe=`hidePrevented${Ie}`,He=`hidden${Ie}`,Be=`show${Ie}`,ze=`shown${Ie}`,We=`resize${Ie}`,$e=`click.dismiss${Ie}`,Ve=`mousedown.dismiss${Ie}`,qe=`keydown.dismiss${Ie}`,Ye=`click${Ie}.data-api`,Xe="modal-open",Ue="show",Ke="modal-static",Qe={backdrop:!0,focus:!0,keyboard:!0},Ge={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Je extends q{constructor(t,e){super(t,e),this._dialog=X.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new we,this._addEventListeners()}static get Default(){return Qe}static get DefaultType(){return Ge}static get NAME(){return"modal"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown||this._isTransitioning)return;R.trigger(this._element,Be,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Xe),this._adjustDialog(),this._backdrop.show((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;R.trigger(this._element,Re).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Ue),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){for(const t of[window,this._dialog])R.off(t,Ie);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Me({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ne({trapElement:this._element})}_showElement(t){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const e=X.findOne(".modal-body",this._dialog);e&&(e.scrollTop=0),f(this._element),this._element.classList.add(Ue);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,R.trigger(this._element,ze,{relatedTarget:t})}),this._dialog,this._isAnimated())}_addEventListeners(){R.on(this._element,qe,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),R.on(window,We,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),R.on(this._element,Ve,(t=>{R.one(this._element,$e,(e=>{this._element===t.target&&this._element===e.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Xe),this._resetAdjustments(),this._scrollBar.reset(),R.trigger(this._element,He)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(R.trigger(this._element,Fe).defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains(Ke)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(Ke),this._queueCallback((()=>{this._element.classList.remove(Ke),this._queueCallback((()=>{this._element.style.overflowY=e}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),i=e>0;if(i&&!t){const t=b()?"paddingLeft":"paddingRight";this._element.style[t]=`${e}px`}if(!i&&t){const t=b()?"paddingRight":"paddingLeft";this._element.style[t]=`${e}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const i=Je.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](e)}}))}}R.on(document,Ye,'[data-bs-toggle="modal"]',(function(t){const e=X.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),R.one(e,Be,(t=>{t.defaultPrevented||R.one(e,He,(()=>{h(this)&&this.focus()}))}));const i=X.findOne(".modal.show");i&&Je.getInstance(i).hide();Je.getOrCreateInstance(e).toggle(this)})),U(Je),_(Je);const Ze=".bs.offcanvas",ti=".data-api",ei=`load${Ze}${ti}`,ii="show",ni="showing",si="hiding",oi=".offcanvas.show",ri=`show${Ze}`,ai=`shown${Ze}`,li=`hide${Ze}`,ci=`hidePrevented${Ze}`,hi=`hidden${Ze}`,di=`resize${Ze}`,ui=`click${Ze}${ti}`,pi=`keydown.dismiss${Ze}`,fi={backdrop:!0,keyboard:!0,scroll:!1},gi={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class mi extends q{constructor(t,e){super(t,e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return fi}static get DefaultType(){return gi}static get NAME(){return"offcanvas"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown)return;if(R.trigger(this._element,ri,{relatedTarget:t}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new we).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(ni);this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(ii),this._element.classList.remove(ni),R.trigger(this._element,ai,{relatedTarget:t})}),this._element,!0)}hide(){if(!this._isShown)return;if(R.trigger(this._element,li).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(si),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(ii,si),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new we).reset(),R.trigger(this._element,hi)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const t=Boolean(this._config.backdrop);return new Me({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?()=>{"static"!==this._config.backdrop?this.hide():R.trigger(this._element,ci)}:null})}_initializeFocusTrap(){return new Ne({trapElement:this._element})}_addEventListeners(){R.on(this._element,pi,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():R.trigger(this._element,ci))}))}static jQueryInterface(t){return this.each((function(){const e=mi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}R.on(document,ui,'[data-bs-toggle="offcanvas"]',(function(t){const e=X.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),d(this))return;R.one(e,hi,(()=>{h(this)&&this.focus()}));const i=X.findOne(oi);i&&i!==e&&mi.getInstance(i).hide();mi.getOrCreateInstance(e).toggle(this)})),R.on(window,ei,(()=>{for(const t of X.find(oi))mi.getOrCreateInstance(t).show()})),R.on(window,di,(()=>{for(const t of X.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(t).position&&mi.getOrCreateInstance(t).hide()})),U(mi),_(mi);const bi=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),_i=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,vi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,yi=(t,e)=>{const i=t.nodeName.toLowerCase();return e.includes(i)?!bi.has(i)||Boolean(_i.test(t.nodeValue)||vi.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(i)))},xi={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};const wi={allowList:xi,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},ki={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},ji={entry:"(string|element|function|null)",selector:"(string|element)"};class Si extends V{constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return wi}static get DefaultType(){return ki}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,i]of Object.entries(this._config.content))this._setContent(t,i,e);const e=t.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&e.classList.add(...i.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,i]of Object.entries(t))super._typeCheckConfig({selector:e,entry:i},ji)}_setContent(t,e,i){const n=X.findOne(i,t);n&&((e=this._resolvePossibleFunction(e))?l(e)?this._putElementInTemplate(c(e),n):this._config.html?n.innerHTML=this._maybeSanitize(e):n.textContent=e:n.remove())}_maybeSanitize(t){return this._config.sanitize?function(t,e,i){if(!t.length)return t;if(i&&"function"==typeof i)return i(t);const n=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const t of s){const i=t.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){t.remove();continue}const n=[].concat(...t.attributes),s=[].concat(e["*"]||[],e[i]||[]);for(const e of n)yi(e,s)||t.removeAttribute(e.nodeName)}return n.body.innerHTML}(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return v(t,[this])}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}const Ti=new Set(["sanitize","allowList","sanitizeFn"]),Ci="fade",Mi="show",Ai=".modal",Ei="hide.bs.modal",Oi="hover",Pi="focus",Di={AUTO:"auto",TOP:"top",RIGHT:b()?"left":"right",BOTTOM:"bottom",LEFT:b()?"right":"left"},Li={allowList:xi,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Ni={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class Ii extends q{constructor(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,e),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Li}static get DefaultType(){return Ni}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),R.off(this._element.closest(Ai),Ei,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=R.trigger(this._element,this.constructor.eventName("show")),e=(u(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),R.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(i),i.classList.add(Mi),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))R.on(t,"mouseover",p);this._queueCallback((()=>{R.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(R.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;if(this._getTipElement().classList.remove(Mi),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))R.off(t,"mouseover",p);this._activeTrigger.click=!1,this._activeTrigger[Pi]=!1,this._activeTrigger[Oi]=!1,this._isHovered=null;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),R.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(Ci,Mi),e.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME).toString();return e.setAttribute("id",i),this._isAnimated()&&e.classList.add(Ci),e}setContent(t){this._newContent=t,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new Si({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Ci)}_isShown(){return this.tip&&this.tip.classList.contains(Mi)}_createPopper(t){const e=v(this._config.placement,[this,t,this._element]),i=Di[e.toUpperCase()];return s.createPopper(this._element,t,this._getPopperConfig(i))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return v(t,[this._element])}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,...v(this._config.popperConfig,[e])}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)R.on(this._element,this.constructor.eventName("click"),this._config.selector,(t=>{this._initializeOnDelegatedTarget(t).toggle()}));else if("manual"!==e){const t=e===Oi?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=e===Oi?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");R.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?Pi:Oi]=!0,e._enter()})),R.on(this._element,i,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?Pi:Oi]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},R.on(this._element.closest(Ai),Ei,this._hideModalHandler)}_fixTitle(){const t=this._element.getAttribute("title");t&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",t),this._element.setAttribute("data-bs-original-title",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=$.getDataAttributes(this._element);for(const t of Object.keys(e))Ti.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:c(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const[e,i]of Object.entries(this._config))this.constructor.Default[e]!==i&&(t[e]=i);return t.selector=!1,t.trigger="manual",t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each((function(){const e=Ii.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}_(Ii);const Ri={...Ii.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},Fi={...Ii.DefaultType,content:"(null|string|element|function)"};class Hi extends Ii{static get Default(){return Ri}static get DefaultType(){return Fi}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=Hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}_(Hi);const Bi=".bs.scrollspy",zi=`activate${Bi}`,Wi=`click${Bi}`,$i=`load${Bi}.data-api`,Vi="active",qi="[href]",Yi=".nav-link",Xi=`${Yi}, .nav-item > ${Yi}, .list-group-item`,Ui={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Ki={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Qi extends q{constructor(t,e){super(t,e),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Ui}static get DefaultType(){return Ki}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const t of this._observableSections.values())this._observer.observe(t)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(t){return t.target=c(t.target)||document.body,t.rootMargin=t.offset?`${t.offset}px 0px -30%`:t.rootMargin,"string"==typeof t.threshold&&(t.threshold=t.threshold.split(",").map((t=>Number.parseFloat(t)))),t}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(R.off(this._config.target,Wi),R.on(this._config.target,Wi,qi,(t=>{const e=this._observableSections.get(t.target.hash);if(e){t.preventDefault();const i=this._rootElement||window,n=e.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n,behavior:"smooth"});i.scrollTop=n}})))}_getNewObserver(){const t={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((t=>this._observerCallback(t)),t)}_observerCallback(t){const e=t=>this._targetLinks.get(`#${t.target.id}`),i=t=>{this._previousScrollData.visibleEntryTop=t.target.offsetTop,this._process(e(t))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const o of t){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(e(o));continue}const t=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&t){if(i(o),!n)return}else s||t||i(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const t=X.find(qi,this._config.target);for(const e of t){if(!e.hash||d(e))continue;const t=X.findOne(e.hash,this._element);h(t)&&(this._targetLinks.set(e.hash,e),this._observableSections.set(e.hash,t))}}_process(t){this._activeTarget!==t&&(this._clearActiveClass(this._config.target),this._activeTarget=t,t.classList.add(Vi),this._activateParents(t),R.trigger(this._element,zi,{relatedTarget:t}))}_activateParents(t){if(t.classList.contains("dropdown-item"))X.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(Vi);else for(const e of X.parents(t,".nav, .list-group"))for(const t of X.prev(e,Xi))t.classList.add(Vi)}_clearActiveClass(t){t.classList.remove(Vi);const e=X.find(`${qi}.${Vi}`,t);for(const t of e)t.classList.remove(Vi)}static jQueryInterface(t){return this.each((function(){const e=Qi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}R.on(window,$i,(()=>{for(const t of X.find('[data-bs-spy="scroll"]'))Qi.getOrCreateInstance(t)})),_(Qi);const Gi=".bs.tab",Ji=`hide${Gi}`,Zi=`hidden${Gi}`,tn=`show${Gi}`,en=`shown${Gi}`,nn=`click${Gi}`,sn=`keydown${Gi}`,on=`load${Gi}`,rn="ArrowLeft",an="ArrowRight",ln="ArrowUp",cn="ArrowDown",hn="active",dn="fade",un="show",pn=":not(.dropdown-toggle)",fn='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',gn=`${`.nav-link${pn}, .list-group-item${pn}, [role="tab"]${pn}`}, ${fn}`,mn=`.${hn}[data-bs-toggle="tab"], .${hn}[data-bs-toggle="pill"], .${hn}[data-bs-toggle="list"]`;class bn extends q{constructor(t){super(t),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),R.on(this._element,sn,(t=>this._keydown(t))))}static get NAME(){return"tab"}show(){const t=this._element;if(this._elemIsActive(t))return;const e=this._getActiveElem(),i=e?R.trigger(e,Ji,{relatedTarget:t}):null;R.trigger(t,tn,{relatedTarget:e}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(e,t),this._activate(t,e))}_activate(t,e){if(!t)return;t.classList.add(hn),this._activate(X.getElementFromSelector(t));this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.removeAttribute("tabindex"),t.setAttribute("aria-selected",!0),this._toggleDropDown(t,!0),R.trigger(t,en,{relatedTarget:e})):t.classList.add(un)}),t,t.classList.contains(dn))}_deactivate(t,e){if(!t)return;t.classList.remove(hn),t.blur(),this._deactivate(X.getElementFromSelector(t));this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex","-1"),this._toggleDropDown(t,!1),R.trigger(t,Zi,{relatedTarget:e})):t.classList.remove(un)}),t,t.classList.contains(dn))}_keydown(t){if(![rn,an,ln,cn].includes(t.key))return;t.stopPropagation(),t.preventDefault();const e=[an,cn].includes(t.key),i=x(this._getChildren().filter((t=>!d(t))),t.target,e,!0);i&&(i.focus({preventScroll:!0}),bn.getOrCreateInstance(i).show())}_getChildren(){return X.find(gn,this._parent)}_getActiveElem(){return this._getChildren().find((t=>this._elemIsActive(t)))||null}_setInitialAttributes(t,e){this._setAttributeIfNotExists(t,"role","tablist");for(const t of e)this._setInitialAttributesOnChild(t)}_setInitialAttributesOnChild(t){t=this._getInnerElement(t);const e=this._elemIsActive(t),i=this._getOuterElement(t);t.setAttribute("aria-selected",e),i!==t&&this._setAttributeIfNotExists(i,"role","presentation"),e||t.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(t,"role","tab"),this._setInitialAttributesOnTargetPanel(t)}_setInitialAttributesOnTargetPanel(t){const e=X.getElementFromSelector(t);e&&(this._setAttributeIfNotExists(e,"role","tabpanel"),t.id&&this._setAttributeIfNotExists(e,"aria-labelledby",`${t.id}`))}_toggleDropDown(t,e){const i=this._getOuterElement(t);if(!i.classList.contains("dropdown"))return;const n=(t,n)=>{const s=X.findOne(t,i);s&&s.classList.toggle(n,e)};n(".dropdown-toggle",hn),n(".dropdown-menu",un),i.setAttribute("aria-expanded",e)}_setAttributeIfNotExists(t,e,i){t.hasAttribute(e)||t.setAttribute(e,i)}_elemIsActive(t){return t.classList.contains(hn)}_getInnerElement(t){return t.matches(gn)?t:X.findOne(gn,t)}_getOuterElement(t){return t.closest(".nav-item, .list-group-item")||t}static jQueryInterface(t){return this.each((function(){const e=bn.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}R.on(document,nn,fn,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),d(this)||bn.getOrCreateInstance(this).show()})),R.on(window,on,(()=>{for(const t of X.find(mn))bn.getOrCreateInstance(t)})),_(bn);const _n=".bs.toast",vn=`mouseover${_n}`,yn=`mouseout${_n}`,xn=`focusin${_n}`,wn=`focusout${_n}`,kn=`hide${_n}`,jn=`hidden${_n}`,Sn=`show${_n}`,Tn=`shown${_n}`,Cn="hide",Mn="show",An="showing",En={animation:"boolean",autohide:"boolean",delay:"number"},On={animation:!0,autohide:!0,delay:5e3};class Pn extends q{constructor(t,e){super(t,e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return On}static get DefaultType(){return En}static get NAME(){return"toast"}show(){if(R.trigger(this._element,Sn).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(Cn),f(this._element),this._element.classList.add(Mn,An),this._queueCallback((()=>{this._element.classList.remove(An),R.trigger(this._element,Tn),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(R.trigger(this._element,kn).defaultPrevented)return;this._element.classList.add(An),this._queueCallback((()=>{this._element.classList.add(Cn),this._element.classList.remove(An,Mn),R.trigger(this._element,jn)}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Mn),super.dispose()}isShown(){return this._element.classList.contains(Mn)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const i=t.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){R.on(this._element,vn,(t=>this._onInteraction(t,!0))),R.on(this._element,yn,(t=>this._onInteraction(t,!1))),R.on(this._element,xn,(t=>this._onInteraction(t,!0))),R.on(this._element,wn,(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Pn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}U(Pn),_(Pn)},"./node_modules/jquery-parallax.js/parallax.js":(t,e,i)=>{!function(t,e,i,n){function s(e,i){var o=this;"object"==typeof i&&(delete i.refresh,delete i.render,t.extend(this,i)),this.$element=t(e),!this.imageSrc&&this.$element.is("img")&&(this.imageSrc=this.$element.attr("src"));var r=(this.position+"").toLowerCase().match(/\S+/g)||[];if(r.length<1&&r.push("center"),1==r.length&&r.push(r[0]),"top"!=r[0]&&"bottom"!=r[0]&&"left"!=r[1]&&"right"!=r[1]||(r=[r[1],r[0]]),this.positionX!==n&&(r[0]=this.positionX.toLowerCase()),this.positionY!==n&&(r[1]=this.positionY.toLowerCase()),o.positionX=r[0],o.positionY=r[1],"left"!=this.positionX&&"right"!=this.positionX&&(isNaN(parseInt(this.positionX))?this.positionX="center":this.positionX=parseInt(this.positionX)),"top"!=this.positionY&&"bottom"!=this.positionY&&(isNaN(parseInt(this.positionY))?this.positionY="center":this.positionY=parseInt(this.positionY)),this.position=this.positionX+(isNaN(this.positionX)?"":"px")+" "+this.positionY+(isNaN(this.positionY)?"":"px"),navigator.userAgent.match(/(iPod|iPhone|iPad)/))return this.imageSrc&&this.iosFix&&!this.$element.is("img")&&this.$element.css({backgroundImage:'url("'+this.imageSrc+'")',backgroundSize:"cover",backgroundPosition:this.position}),this;if(navigator.userAgent.match(/(Android)/))return this.imageSrc&&this.androidFix&&!this.$element.is("img")&&this.$element.css({backgroundImage:'url("'+this.imageSrc+'")',backgroundSize:"cover",backgroundPosition:this.position}),this;this.$mirror=t("<div />").prependTo(this.mirrorContainer);var a=this.$element.find(">.parallax-slider"),l=!1;0==a.length?this.$slider=t("<img />").prependTo(this.$mirror):(this.$slider=a.prependTo(this.$mirror),l=!0),this.$mirror.addClass("parallax-mirror").css({visibility:"hidden",zIndex:this.zIndex,position:"fixed",top:0,left:0,overflow:"hidden"}),this.$slider.addClass("parallax-slider").one("load",(function(){o.naturalHeight&&o.naturalWidth||(o.naturalHeight=this.naturalHeight||this.height||1,o.naturalWidth=this.naturalWidth||this.width||1),o.aspectRatio=o.naturalWidth/o.naturalHeight,s.isSetup||s.setup(),s.sliders.push(o),s.isFresh=!1,s.requestRender()})),l||(this.$slider[0].src=this.imageSrc),(this.naturalHeight&&this.naturalWidth||this.$slider[0].complete||a.length>0)&&this.$slider.trigger("load")}!function(){for(var t=0,i=["ms","moz","webkit","o"],n=0;n<i.length&&!e.requestAnimationFrame;++n)e.requestAnimationFrame=e[i[n]+"RequestAnimationFrame"],e.cancelAnimationFrame=e[i[n]+"CancelAnimationFrame"]||e[i[n]+"CancelRequestAnimationFrame"];e.requestAnimationFrame||(e.requestAnimationFrame=function(i){var n=(new Date).getTime(),s=Math.max(0,16-(n-t)),o=e.setTimeout((function(){i(n+s)}),s);return t=n+s,o}),e.cancelAnimationFrame||(e.cancelAnimationFrame=function(t){clearTimeout(t)})}(),t.extend(s.prototype,{speed:.2,bleed:0,zIndex:-100,iosFix:!0,androidFix:!0,position:"center",overScrollFix:!1,mirrorContainer:"body",refresh:function(){this.boxWidth=this.$element.outerWidth(),this.boxHeight=this.$element.outerHeight()+2*this.bleed,this.boxOffsetTop=this.$element.offset().top-this.bleed,this.boxOffsetLeft=this.$element.offset().left,this.boxOffsetBottom=this.boxOffsetTop+this.boxHeight;var t,e=s.winHeight,i=s.docHeight,n=Math.min(this.boxOffsetTop,i-e),o=Math.max(this.boxOffsetTop+this.boxHeight-e,0),r=this.boxHeight+(n-o)*(1-this.speed)|0,a=(this.boxOffsetTop-n)*(1-this.speed)|0;r*this.aspectRatio>=this.boxWidth?(this.imageWidth=r*this.aspectRatio|0,this.imageHeight=r,this.offsetBaseTop=a,t=this.imageWidth-this.boxWidth,"left"==this.positionX?this.offsetLeft=0:"right"==this.positionX?this.offsetLeft=-t:isNaN(this.positionX)?this.offsetLeft=-t/2|0:this.offsetLeft=Math.max(this.positionX,-t)):(this.imageWidth=this.boxWidth,this.imageHeight=this.boxWidth/this.aspectRatio|0,this.offsetLeft=0,t=this.imageHeight-r,"top"==this.positionY?this.offsetBaseTop=a:"bottom"==this.positionY?this.offsetBaseTop=a-t:isNaN(this.positionY)?this.offsetBaseTop=a-t/2|0:this.offsetBaseTop=a+Math.max(this.positionY,-t))},render:function(){var t=s.scrollTop,e=s.scrollLeft,i=this.overScrollFix?s.overScroll:0,n=t+s.winHeight;this.boxOffsetBottom>t&&this.boxOffsetTop<=n?(this.visibility="visible",this.mirrorTop=this.boxOffsetTop-t,this.mirrorLeft=this.boxOffsetLeft-e,this.offsetTop=this.offsetBaseTop-this.mirrorTop*(1-this.speed)):this.visibility="hidden",this.$mirror.css({transform:"translate3d("+this.mirrorLeft+"px, "+(this.mirrorTop-i)+"px, 0px)",visibility:this.visibility,height:this.boxHeight,width:this.boxWidth}),this.$slider.css({transform:"translate3d("+this.offsetLeft+"px, "+this.offsetTop+"px, 0px)",position:"absolute",height:this.imageHeight,width:this.imageWidth,maxWidth:"none"})}}),t.extend(s,{scrollTop:0,scrollLeft:0,winHeight:0,winWidth:0,docHeight:1<<30,docWidth:1<<30,sliders:[],isReady:!1,isFresh:!1,isBusy:!1,setup:function(){if(!this.isReady){var n=this,o=t(i),r=t(e),a=function(){s.winHeight=r.height(),s.winWidth=r.width(),s.docHeight=o.height(),s.docWidth=o.width()},l=function(){var t=r.scrollTop(),e=s.docHeight-s.winHeight,i=s.docWidth-s.winWidth;s.scrollTop=Math.max(0,Math.min(e,t)),s.scrollLeft=Math.max(0,Math.min(i,r.scrollLeft())),s.overScroll=Math.max(t-e,Math.min(t,0))};r.on("resize.px.parallax load.px.parallax",(function(){a(),n.refresh(),s.isFresh=!1,s.requestRender()})).on("scroll.px.parallax load.px.parallax",(function(){l(),s.requestRender()})),a(),l(),this.isReady=!0;var c=-1;!function t(){if(c==e.pageYOffset)return e.requestAnimationFrame(t),!1;c=e.pageYOffset,n.render(),e.requestAnimationFrame(t)}()}},configure:function(e){"object"==typeof e&&(delete e.refresh,delete e.render,t.extend(this.prototype,e))},refresh:function(){t.each(this.sliders,(function(){this.refresh()})),this.isFresh=!0},render:function(){this.isFresh||this.refresh(),t.each(this.sliders,(function(){this.render()}))},requestRender:function(){this.render(),this.isBusy=!1},destroy:function(i){var n,o=t(i).data("px.parallax");for(o.$mirror.remove(),n=0;n<this.sliders.length;n+=1)this.sliders[n]==o&&this.sliders.splice(n,1);t(i).data("px.parallax",!1),0===this.sliders.length&&(t(e).off("scroll.px.parallax resize.px.parallax load.px.parallax"),this.isReady=!1,s.isSetup=!1)}});var o=t.fn.parallax;t.fn.parallax=function(n){return this.each((function(){var o=t(this),r="object"==typeof n&&n;this==e||this==i||o.is("body")?s.configure(r):o.data("px.parallax")?"object"==typeof n&&t.extend(o.data("px.parallax"),r):(r=t.extend({},o.data(),r),o.data("px.parallax",new s(this,r))),"string"==typeof n&&("destroy"==n?s.destroy(this):s[n]())}))},t.fn.parallax.Constructor=s,t.fn.parallax.noConflict=function(){return t.fn.parallax=o,this},t((function(){t('[data-parallax="scroll"]').parallax()}))}(i("./node_modules/jquery/dist/jquery.js"),window,document)},"./node_modules/jquery/dist/jquery.js":function(t,e){var i;!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(n,s){"use strict";var o=[],r=Object.getPrototypeOf,a=o.slice,l=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},c=o.push,h=o.indexOf,d={},u=d.toString,p=d.hasOwnProperty,f=p.toString,g=f.call(Object),m={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},_=function(t){return null!=t&&t===t.window},v=n.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,i){var n,s,o=(i=i||v).createElement("script");if(o.text=t,e)for(n in y)(s=e[n]||e.getAttribute&&e.getAttribute(n))&&o.setAttribute(n,s);i.head.appendChild(o).parentNode.removeChild(o)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?d[u.call(t)]||"object":typeof t}var k="3.6.4",j=function(t,e){return new j.fn.init(t,e)};function S(t){var e=!!t&&"length"in t&&t.length,i=w(t);return!b(t)&&!_(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}j.fn=j.prototype={jquery:k,constructor:j,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=j.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return j.each(this,t)},map:function(t){return this.pushStack(j.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(j.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(j.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},j.extend=j.fn.extend=function(){var t,e,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||b(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(c&&n&&(j.isPlainObject(n)||(s=Array.isArray(n)))?(i=r[e],o=s&&!Array.isArray(i)?[]:s||j.isPlainObject(i)?i:{},s=!1,r[e]=j.extend(c,o,n)):void 0!==n&&(r[e]=n));return r},j.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==u.call(t))&&(!(e=r(t))||"function"==typeof(i=p.call(e,"constructor")&&e.constructor)&&f.call(i)===g)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){x(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(S(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},makeArray:function(t,e){var i=e||[];return null!=t&&(S(Object(t))?j.merge(i,"string"==typeof t?[t]:t):c.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:h.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,o=t.length,r=!i;s<o;s++)!e(t[s],s)!==r&&n.push(t[s]);return n},map:function(t,e,i){var n,s,o=0,r=[];if(S(t))for(n=t.length;o<n;o++)null!=(s=e(t[o],o,i))&&r.push(s);else for(o in t)null!=(s=e(t[o],o,i))&&r.push(s);return l(r)},guid:1,support:m}),"function"==typeof Symbol&&(j.fn[Symbol.iterator]=o[Symbol.iterator]),j.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){d["[object "+e+"]"]=e.toLowerCase()}));var T=function(t){var e,i,n,s,o,r,a,l,c,h,d,u,p,f,g,m,b,_,v,y="sizzle"+1*new Date,x=t.document,w=0,k=0,j=lt(),S=lt(),T=lt(),C=lt(),M=function(t,e){return t===e&&(d=!0),0},A={}.hasOwnProperty,E=[],O=E.pop,P=E.push,D=E.push,L=E.slice,N=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+R+"*("+F+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+R+"*\\]",B=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",z=new RegExp(R+"+","g"),W=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),$=new RegExp("^"+R+"*,"+R+"*"),V=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),q=new RegExp(R+"|>"),Y=new RegExp(B),X=new RegExp("^"+F+"$"),U={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+R+"?|\\\\([^\\r\\n\\f])","g"),it=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){u()},rt=yt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{D.apply(E=L.call(x.childNodes),x.childNodes),E[x.childNodes.length].nodeType}catch(t){D={apply:E.length?function(t,e){P.apply(t,L.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function at(t,e,n,s){var o,a,c,h,d,f,b,_=e&&e.ownerDocument,x=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return n;if(!s&&(u(e),e=e||p,g)){if(11!==x&&(d=Z.exec(t)))if(o=d[1]){if(9===x){if(!(c=e.getElementById(o)))return n;if(c.id===o)return n.push(c),n}else if(_&&(c=_.getElementById(o))&&v(e,c)&&c.id===o)return n.push(c),n}else{if(d[2])return D.apply(n,e.getElementsByTagName(t)),n;if((o=d[3])&&i.getElementsByClassName&&e.getElementsByClassName)return D.apply(n,e.getElementsByClassName(o)),n}if(i.qsa&&!C[t+" "]&&(!m||!m.test(t))&&(1!==x||"object"!==e.nodeName.toLowerCase())){if(b=t,_=e,1===x&&(q.test(t)||V.test(t))){for((_=tt.test(t)&&bt(e.parentNode)||e)===e&&i.scope||((h=e.getAttribute("id"))?h=h.replace(nt,st):e.setAttribute("id",h=y)),a=(f=r(t)).length;a--;)f[a]=(h?"#"+h:":scope")+" "+vt(f[a]);b=f.join(",")}try{return D.apply(n,_.querySelectorAll(b)),n}catch(e){C(t,!0)}finally{h===y&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,n,s)}function lt(){var t=[];return function e(i,s){return t.push(i+" ")>n.cacheLength&&delete e[t.shift()],e[i+" "]=s}}function ct(t){return t[y]=!0,t}function ht(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function dt(t,e){for(var i=t.split("|"),s=i.length;s--;)n.attrHandle[i[s]]=e}function ut(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ft(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ct((function(e){return e=+e,ct((function(i,n){for(var s,o=t([],i.length,e),r=o.length;r--;)i[s=o[r]]&&(i[s]=!(n[s]=i[s]))}))}))}function bt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in i=at.support={},o=at.isXML=function(t){var e=t&&t.namespaceURI,i=t&&(t.ownerDocument||t).documentElement;return!K.test(e||i&&i.nodeName||"HTML")},u=at.setDocument=function(t){var e,s,r=t?t.ownerDocument||t:x;return r!=p&&9===r.nodeType&&r.documentElement?(f=(p=r).documentElement,g=!o(p),x!=p&&(s=p.defaultView)&&s.top!==s&&(s.addEventListener?s.addEventListener("unload",ot,!1):s.attachEvent&&s.attachEvent("onunload",ot)),i.scope=ht((function(t){return f.appendChild(t).appendChild(p.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),i.cssHas=ht((function(){try{return p.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),i.attributes=ht((function(t){return t.className="i",!t.getAttribute("className")})),i.getElementsByTagName=ht((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),i.getElementsByClassName=J.test(p.getElementsByClassName),i.getById=ht((function(t){return f.appendChild(t).id=y,!p.getElementsByName||!p.getElementsByName(y).length})),i.getById?(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){return t.getAttribute("id")===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i=e.getElementById(t);return i?[i]:[]}}):(n.filter.ID=function(t){var e=t.replace(et,it);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},n.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var i,n,s,o=e.getElementById(t);if(o){if((i=o.getAttributeNode("id"))&&i.value===t)return[o];for(s=e.getElementsByName(t),n=0;o=s[n++];)if((i=o.getAttributeNode("id"))&&i.value===t)return[o]}return[]}}),n.find.TAG=i.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):i.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],s=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[s++];)1===i.nodeType&&n.push(i);return n}return o},n.find.CLASS=i.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},b=[],m=[],(i.qsa=J.test(p.querySelectorAll))&&(ht((function(t){var e;f.appendChild(t).innerHTML="<a id='"+y+"'></a><select id='"+y+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+I+")"),t.querySelectorAll("[id~="+y+"-]").length||m.push("~="),(e=p.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\["+R+"*name"+R+"*="+R+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+y+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ht((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(i.matchesSelector=J.test(_=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ht((function(t){i.disconnectedMatch=_.call(t,"*"),_.call(t,"[s!='']:x"),b.push("!=",B)})),i.cssHas||m.push(":has"),m=m.length&&new RegExp(m.join("|")),b=b.length&&new RegExp(b.join("|")),e=J.test(f.compareDocumentPosition),v=e||J.test(f.contains)?function(t,e){var i=9===t.nodeType&&t.documentElement||t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},M=e?function(t,e){if(t===e)return d=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!i.sortDetached&&e.compareDocumentPosition(t)===n?t==p||t.ownerDocument==x&&v(x,t)?-1:e==p||e.ownerDocument==x&&v(x,e)?1:h?N(h,t)-N(h,e):0:4&n?-1:1)}:function(t,e){if(t===e)return d=!0,0;var i,n=0,s=t.parentNode,o=e.parentNode,r=[t],a=[e];if(!s||!o)return t==p?-1:e==p?1:s?-1:o?1:h?N(h,t)-N(h,e):0;if(s===o)return ut(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?ut(r[n],a[n]):r[n]==x?-1:a[n]==x?1:0},p):p},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(u(t),i.matchesSelector&&g&&!C[e+" "]&&(!b||!b.test(e))&&(!m||!m.test(e)))try{var n=_.call(t,e);if(n||i.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){C(e,!0)}return at(e,p,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=p&&u(t),v(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=p&&u(t);var s=n.attrHandle[e.toLowerCase()],o=s&&A.call(n.attrHandle,e.toLowerCase())?s(t,e,!g):void 0;return void 0!==o?o:i.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(nt,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,n=[],s=0,o=0;if(d=!i.detectDuplicates,h=!i.sortStable&&t.slice(0),t.sort(M),d){for(;e=t[o++];)e===t[o]&&(s=n.push(o));for(;s--;)t.splice(n[s],1)}return h=null,t},s=at.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},n=at.selectors={cacheLength:50,createPseudo:ct,match:U,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,it),t[3]=(t[3]||t[4]||t[5]||"").replace(et,it),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return U.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&Y.test(i)&&(e=r(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,it).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=j[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&j(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var s=at.attr(n,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&s.indexOf(i)>-1:"$="===e?i&&s.slice(-i.length)===i:"~="===e?(" "+s.replace(z," ")+" ").indexOf(i)>-1:"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var c,h,d,u,p,f,g=o!==r?"nextSibling":"previousSibling",m=e.parentNode,b=a&&e.nodeName.toLowerCase(),_=!l&&!a,v=!1;if(m){if(o){for(;g;){for(u=e;u=u[g];)if(a?u.nodeName.toLowerCase()===b:1===u.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?m.firstChild:m.lastChild],r&&_){for(v=(p=(c=(h=(d=(u=m)[y]||(u[y]={}))[u.uniqueID]||(d[u.uniqueID]={}))[t]||[])[0]===w&&c[1])&&c[2],u=p&&m.childNodes[p];u=++p&&u&&u[g]||(v=p=0)||f.pop();)if(1===u.nodeType&&++v&&u===e){h[t]=[w,p,v];break}}else if(_&&(v=p=(c=(h=(d=(u=e)[y]||(u[y]={}))[u.uniqueID]||(d[u.uniqueID]={}))[t]||[])[0]===w&&c[1]),!1===v)for(;(u=++p&&u&&u[g]||(v=p=0)||f.pop())&&((a?u.nodeName.toLowerCase()!==b:1!==u.nodeType)||!++v||(_&&((h=(d=u[y]||(u[y]={}))[u.uniqueID]||(d[u.uniqueID]={}))[t]=[w,v]),u!==e)););return(v-=s)===n||v%n==0&&v/n>=0}}},PSEUDO:function(t,e){var i,s=n.pseudos[t]||n.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return s[y]?s(e):s.length>1?(i=[t,t,"",e],n.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,i){for(var n,o=s(t,e),r=o.length;r--;)t[n=N(t,o[r])]=!(i[n]=o[r])})):function(t){return s(t,0,i)}):s}},pseudos:{not:ct((function(t){var e=[],i=[],n=a(t.replace(W,"$1"));return n[y]?ct((function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))})):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}})),has:ct((function(t){return function(e){return at(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,it),function(e){return(e.textContent||s(e)).indexOf(t)>-1}})),lang:ct((function(t){return X.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,it).toLowerCase(),function(e){var i;do{if(i=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===f},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!n.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,i){return[i<0?i+e:i]})),even:mt((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:mt((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:mt((function(t,e,i){for(var n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:mt((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}},n.pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})n.pseudos[e]=ft(e);function _t(){}function vt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function yt(t,e,i){var n=e.dir,s=e.next,o=s||n,r=i&&"parentNode"===o,a=k++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,s);return!1}:function(e,i,l){var c,h,d,u=[w,a];if(l){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||r)if(h=(d=e[y]||(e[y]={}))[e.uniqueID]||(d[e.uniqueID]={}),s&&s===e.nodeName.toLowerCase())e=e[n]||e;else{if((c=h[o])&&c[0]===w&&c[1]===a)return u[2]=c[2];if(h[o]=u,u[2]=t(e,i,l))return!0}return!1}}function xt(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function wt(t,e,i,n,s){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,n,s)||(r.push(o),c&&e.push(a)));return r}function kt(t,e,i,n,s,o){return n&&!n[y]&&(n=kt(n)),s&&!s[y]&&(s=kt(s,o)),ct((function(o,r,a,l){var c,h,d,u=[],p=[],f=r.length,g=o||function(t,e,i){for(var n=0,s=e.length;n<s;n++)at(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),m=!t||!o&&e?g:wt(g,u,t,a,l),b=i?s||(o?t:f||n)?[]:r:m;if(i&&i(m,b,a,l),n)for(c=wt(b,p),n(c,[],a,l),h=c.length;h--;)(d=c[h])&&(b[p[h]]=!(m[p[h]]=d));if(o){if(s||t){if(s){for(c=[],h=b.length;h--;)(d=b[h])&&c.push(m[h]=d);s(null,b=[],c,l)}for(h=b.length;h--;)(d=b[h])&&(c=s?N(o,d):u[h])>-1&&(o[c]=!(r[c]=d))}}else b=wt(b===r?b.splice(f,b.length):b),s?s(null,r,b,l):D.apply(r,b)}))}function jt(t){for(var e,i,s,o=t.length,r=n.relative[t[0].type],a=r||n.relative[" "],l=r?1:0,h=yt((function(t){return t===e}),a,!0),d=yt((function(t){return N(e,t)>-1}),a,!0),u=[function(t,i,n){var s=!r&&(n||i!==c)||((e=i).nodeType?h(t,i,n):d(t,i,n));return e=null,s}];l<o;l++)if(i=n.relative[t[l].type])u=[yt(xt(u),i)];else{if((i=n.filter[t[l].type].apply(null,t[l].matches))[y]){for(s=++l;s<o&&!n.relative[t[s].type];s++);return kt(l>1&&xt(u),l>1&&vt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),i,l<s&&jt(t.slice(l,s)),s<o&&jt(t=t.slice(s)),s<o&&vt(t))}u.push(i)}return xt(u)}return _t.prototype=n.filters=n.pseudos,n.setFilters=new _t,r=at.tokenize=function(t,e){var i,s,o,r,a,l,c,h=S[t+" "];if(h)return e?0:h.slice(0);for(a=t,l=[],c=n.preFilter;a;){for(r in i&&!(s=$.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),i=!1,(s=V.exec(a))&&(i=s.shift(),o.push({value:i,type:s[0].replace(W," ")}),a=a.slice(i.length)),n.filter)!(s=U[r].exec(a))||c[r]&&!(s=c[r](s))||(i=s.shift(),o.push({value:i,type:r,matches:s}),a=a.slice(i.length));if(!i)break}return e?a.length:a?at.error(t):S(t,l).slice(0)},a=at.compile=function(t,e){var i,s=[],o=[],a=T[t+" "];if(!a){for(e||(e=r(t)),i=e.length;i--;)(a=jt(e[i]))[y]?s.push(a):o.push(a);a=T(t,function(t,e){var i=e.length>0,s=t.length>0,o=function(o,r,a,l,h){var d,f,m,b=0,_="0",v=o&&[],y=[],x=c,k=o||s&&n.find.TAG("*",h),j=w+=null==x?1:Math.random()||.1,S=k.length;for(h&&(c=r==p||r||h);_!==S&&null!=(d=k[_]);_++){if(s&&d){for(f=0,r||d.ownerDocument==p||(u(d),a=!g);m=t[f++];)if(m(d,r||p,a)){l.push(d);break}h&&(w=j)}i&&((d=!m&&d)&&b--,o&&v.push(d))}if(b+=_,i&&_!==b){for(f=0;m=e[f++];)m(v,y,r,a);if(o){if(b>0)for(;_--;)v[_]||y[_]||(y[_]=O.call(l));y=wt(y)}D.apply(l,y),h&&!o&&y.length>0&&b+e.length>1&&at.uniqueSort(l)}return h&&(w=j,c=x),v};return i?ct(o):o}(o,s)),a.selector=t}return a},l=at.select=function(t,e,i,s){var o,l,c,h,d,u="function"==typeof t&&t,p=!s&&r(t=u.selector||t);if(i=i||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&n.relative[l[1].type]){if(!(e=(n.find.ID(c.matches[0].replace(et,it),e)||[])[0]))return i;u&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=U.needsContext.test(t)?0:l.length;o--&&(c=l[o],!n.relative[h=c.type]);)if((d=n.find[h])&&(s=d(c.matches[0].replace(et,it),tt.test(l[0].type)&&bt(e.parentNode)||e))){if(l.splice(o,1),!(t=s.length&&vt(l)))return D.apply(i,s),i;break}}return(u||a(t,p))(s,e,!g,i,!e||tt.test(t)&&bt(e.parentNode)||e),i},i.sortStable=y.split("").sort(M).join("")===y,i.detectDuplicates=!!d,u(),i.sortDetached=ht((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ht((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||dt("type|href|height|width",(function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),i.attributes&&ht((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||dt("value",(function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ht((function(t){return null==t.getAttribute("disabled")}))||dt(I,(function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null})),at}(n);j.find=T,j.expr=T.selectors,j.expr[":"]=j.expr.pseudos,j.uniqueSort=j.unique=T.uniqueSort,j.text=T.getText,j.isXMLDoc=T.isXML,j.contains=T.contains,j.escapeSelector=T.escape;var C=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&j(t).is(i))break;n.push(t)}return n},M=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},A=j.expr.match.needsContext;function E(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(t,e,i){return b(e)?j.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?j.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?j.grep(t,(function(t){return h.call(e,t)>-1!==i})):j.filter(e,t,i)}j.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?j.find.matchesSelector(n,t)?[n]:[]:j.find.matches(t,j.grep(e,(function(t){return 1===t.nodeType})))},j.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(j(t).filter((function(){for(e=0;e<n;e++)if(j.contains(s[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)j.find(t,s[e],i);return n>1?j.uniqueSort(i):i},filter:function(t){return this.pushStack(P(this,t||[],!1))},not:function(t){return this.pushStack(P(this,t||[],!0))},is:function(t){return!!P(this,"string"==typeof t&&A.test(t)?j(t):t||[],!1).length}});var D,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(j.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||D,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:L.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof j?e[0]:e,j.merge(this,j.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:v,!0)),O.test(n[1])&&j.isPlainObject(e))for(n in e)b(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=v.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==i.ready?i.ready(t):t(j):j.makeArray(t,this)}).prototype=j.fn,D=j(v);var N=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function R(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}j.fn.extend({has:function(t){var e=j(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(j.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,s=this.length,o=[],r="string"!=typeof t&&j(t);if(!A.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&j.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?j.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?h.call(j(t),this[0]):h.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(j.uniqueSort(j.merge(this.get(),j(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),j.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return C(t,"parentNode")},parentsUntil:function(t,e,i){return C(t,"parentNode",i)},next:function(t){return R(t,"nextSibling")},prev:function(t){return R(t,"previousSibling")},nextAll:function(t){return C(t,"nextSibling")},prevAll:function(t){return C(t,"previousSibling")},nextUntil:function(t,e,i){return C(t,"nextSibling",i)},prevUntil:function(t,e,i){return C(t,"previousSibling",i)},siblings:function(t){return M((t.parentNode||{}).firstChild,t)},children:function(t){return M(t.firstChild)},contents:function(t){return null!=t.contentDocument&&r(t.contentDocument)?t.contentDocument:(E(t,"template")&&(t=t.content||t),j.merge([],t.childNodes))}},(function(t,e){j.fn[t]=function(i,n){var s=j.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=j.filter(n,s)),this.length>1&&(I[t]||j.uniqueSort(s),N.test(t)&&s.reverse()),this.pushStack(s)}}));var F=/[^\x20\t\r\n\f]+/g;function H(t){return t}function B(t){throw t}function z(t,e,i,n){var s;try{t&&b(s=t.promise)?s.call(t).done(e).fail(i):t&&b(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}j.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return j.each(t.match(F)||[],(function(t,i){e[i]=!0})),e}(t):j.extend({},t);var e,i,n,s,o=[],r=[],a=-1,l=function(){for(s=s||t.once,n=e=!0;r.length;a=-1)for(i=r.shift();++a<o.length;)!1===o[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=o.length,i=!1);t.memory||(i=!1),e=!1,s&&(o=i?[]:"")},c={add:function(){return o&&(i&&!e&&(a=o.length-1,r.push(i)),function e(i){j.each(i,(function(i,n){b(n)?t.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==w(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return j.each(arguments,(function(t,e){for(var i;(i=j.inArray(e,o,i))>-1;)o.splice(i,1),i<=a&&a--})),this},has:function(t){return t?j.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return s=r=[],o=i="",this},disabled:function(){return!o},lock:function(){return s=r=[],i||e||(o=i=""),this},locked:function(){return!!s},fireWith:function(t,i){return s||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},j.extend({Deferred:function(t){var e=[["notify","progress",j.Callbacks("memory"),j.Callbacks("memory"),2],["resolve","done",j.Callbacks("once memory"),j.Callbacks("once memory"),0,"resolved"],["reject","fail",j.Callbacks("once memory"),j.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return j.Deferred((function(i){j.each(e,(function(e,n){var s=b(t[n[4]])&&t[n[4]];o[n[1]]((function(){var t=s&&s.apply(this,arguments);t&&b(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,s?[t]:arguments)}))})),t=null})).promise()},then:function(t,i,s){var o=0;function r(t,e,i,s){return function(){var a=this,l=arguments,c=function(){var n,c;if(!(t<o)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,b(c)?s?c.call(n,r(o,e,H,s),r(o,e,B,s)):(o++,c.call(n,r(o,e,H,s),r(o,e,B,s),r(o,e,H,e.notifyWith))):(i!==H&&(a=void 0,l=[n]),(s||e.resolveWith)(a,l))}},h=s?c:function(){try{c()}catch(n){j.Deferred.exceptionHook&&j.Deferred.exceptionHook(n,h.stackTrace),t+1>=o&&(i!==B&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?h():(j.Deferred.getStackHook&&(h.stackTrace=j.Deferred.getStackHook()),n.setTimeout(h))}}return j.Deferred((function(n){e[0][3].add(r(0,n,b(s)?s:H,n.notifyWith)),e[1][3].add(r(0,n,b(t)?t:H)),e[2][3].add(r(0,n,b(i)?i:B))})).promise()},promise:function(t){return null!=t?j.extend(t,s):s}},o={};return j.each(e,(function(t,n){var r=n[2],a=n[5];s[n[1]]=r.add,a&&r.add((function(){i=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),r.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=r.fireWith})),s.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,i=e,n=Array(i),s=a.call(arguments),o=j.Deferred(),r=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?a.call(arguments):i,--e||o.resolveWith(n,s)}};if(e<=1&&(z(t,o.done(r(i)).resolve,o.reject,!e),"pending"===o.state()||b(s[i]&&s[i].then)))return o.then();for(;i--;)z(s[i],r(i),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;j.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&W.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},j.readyException=function(t){n.setTimeout((function(){throw t}))};var $=j.Deferred();function V(){v.removeEventListener("DOMContentLoaded",V),n.removeEventListener("load",V),j.ready()}j.fn.ready=function(t){return $.then(t).catch((function(t){j.readyException(t)})),this},j.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--j.readyWait:j.isReady)||(j.isReady=!0,!0!==t&&--j.readyWait>0||$.resolveWith(v,[j]))}}),j.ready.then=$.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?n.setTimeout(j.ready):(v.addEventListener("DOMContentLoaded",V),n.addEventListener("load",V));var q=function(t,e,i,n,s,o,r){var a=0,l=t.length,c=null==i;if("object"===w(i))for(a in s=!0,i)q(t,e,a,i[a],!0,o,r);else if(void 0!==n&&(s=!0,b(n)||(r=!0),c&&(r?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(j(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return s?t:c?e.call(t):l?e(t[0],i):o},Y=/^-ms-/,X=/-([a-z])/g;function U(t,e){return e.toUpperCase()}function K(t){return t.replace(Y,"ms-").replace(X,U)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function G(){this.expando=j.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[K(e)]=i;else for(n in e)s[K(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(K):(e=K(e))in n?[e]:e.match(F)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||j.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!j.isEmptyObject(e)}};var J=new G,Z=new G,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function it(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(i)}catch(t){}Z.set(t,e,i)}else i=void 0;return i}j.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,e,i){return Z.access(t,e,i)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,i){return J.access(t,e,i)},_removeData:function(t,e){J.remove(t,e)}}),j.fn.extend({data:function(t,e){var i,n,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=K(n.slice(5)),it(o,n,s[n]));J.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each((function(){Z.set(this,t)})):q(this,(function(e){var i;if(o&&void 0===e)return void 0!==(i=Z.get(o,t))||void 0!==(i=it(o,t))?i:void 0;this.each((function(){Z.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){Z.remove(this,t)}))}}),j.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=J.get(t,e),i&&(!n||Array.isArray(i)?n=J.access(t,e,j.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=j.queue(t,e),n=i.length,s=i.shift(),o=j._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete o.stop,s.call(t,(function(){j.dequeue(t,e)}),o)),!n&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return J.get(t,i)||J.access(t,i,{empty:j.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",i])}))})}}),j.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?j.queue(this[0],t):void 0===e?this:this.each((function(){var i=j.queue(this,t,e);j._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&j.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){j.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=j.Deferred(),o=this,r=this.length,a=function(){--n||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=J.get(o[r],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var nt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,st=new RegExp("^(?:([+-])=|)("+nt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],rt=v.documentElement,at=function(t){return j.contains(t.ownerDocument,t)},lt={composed:!0};rt.getRootNode&&(at=function(t){return j.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===j.css(t,"display")};function ht(t,e,i,n){var s,o,r=20,a=n?function(){return n.cur()}:function(){return j.css(t,e,"")},l=a(),c=i&&i[3]||(j.cssNumber[e]?"":"px"),h=t.nodeType&&(j.cssNumber[e]||"px"!==c&&+l)&&st.exec(j.css(t,e));if(h&&h[3]!==c){for(l/=2,c=c||h[3],h=+l||1;r--;)j.style(t,e,h+c),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),h/=o;h*=2,j.style(t,e,h+c),i=i||[]}return i&&(h=+h||+l||0,s=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=h,n.end=s)),s}var dt={};function ut(t){var e,i=t.ownerDocument,n=t.nodeName,s=dt[n];return s||(e=i.body.appendChild(i.createElement(n)),s=j.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),dt[n]=s,s)}function pt(t,e){for(var i,n,s=[],o=0,r=t.length;o<r;o++)(n=t[o]).style&&(i=n.style.display,e?("none"===i&&(s[o]=J.get(n,"display")||null,s[o]||(n.style.display="")),""===n.style.display&&ct(n)&&(s[o]=ut(n))):"none"!==i&&(s[o]="none",J.set(n,"display",i)));for(o=0;o<r;o++)null!=s[o]&&(t[o].style.display=s[o]);return t}j.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ct(this)?j(this).show():j(this).hide()}))}});var ft,gt,mt=/^(?:checkbox|radio)$/i,bt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,_t=/^$|^module$|\/(?:java|ecma)script/i;ft=v.createDocumentFragment().appendChild(v.createElement("div")),(gt=v.createElement("input")).setAttribute("type","radio"),gt.setAttribute("checked","checked"),gt.setAttribute("name","t"),ft.appendChild(gt),m.checkClone=ft.cloneNode(!0).cloneNode(!0).lastChild.checked,ft.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!ft.cloneNode(!0).lastChild.defaultValue,ft.innerHTML="<option></option>",m.option=!!ft.lastChild;var vt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function yt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&E(t,e)?j.merge([t],i):i}function xt(t,e){for(var i=0,n=t.length;i<n;i++)J.set(t[i],"globalEval",!e||J.get(e[i],"globalEval"))}vt.tbody=vt.tfoot=vt.colgroup=vt.caption=vt.thead,vt.th=vt.td,m.option||(vt.optgroup=vt.option=[1,"<select multiple='multiple'>","</select>"]);var wt=/<|&#?\w+;/;function kt(t,e,i,n,s){for(var o,r,a,l,c,h,d=e.createDocumentFragment(),u=[],p=0,f=t.length;p<f;p++)if((o=t[p])||0===o)if("object"===w(o))j.merge(u,o.nodeType?[o]:o);else if(wt.test(o)){for(r=r||d.appendChild(e.createElement("div")),a=(bt.exec(o)||["",""])[1].toLowerCase(),l=vt[a]||vt._default,r.innerHTML=l[1]+j.htmlPrefilter(o)+l[2],h=l[0];h--;)r=r.lastChild;j.merge(u,r.childNodes),(r=d.firstChild).textContent=""}else u.push(e.createTextNode(o));for(d.textContent="",p=0;o=u[p++];)if(n&&j.inArray(o,n)>-1)s&&s.push(o);else if(c=at(o),r=yt(d.appendChild(o),"script"),c&&xt(r),i)for(h=0;o=r[h++];)_t.test(o.type||"")&&i.push(o);return d}var jt=/^([^.]*)(?:\.(.+)|)/;function St(){return!0}function Tt(){return!1}function Ct(t,e){return t===function(){try{return v.activeElement}catch(t){}}()==("focus"===e)}function Mt(t,e,i,n,s,o){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)Mt(t,a,i,n,e[a],o);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=Tt;else if(!s)return t;return 1===o&&(r=s,s=function(t){return j().off(t),r.apply(this,arguments)},s.guid=r.guid||(r.guid=j.guid++)),t.each((function(){j.event.add(this,e,s,n,i)}))}function At(t,e,i){i?(J.set(t,e,!1),j.event.add(t,e,{namespace:!1,handler:function(t){var n,s,o=J.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(j.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=a.call(arguments),J.set(this,e,o),n=i(this,e),this[e](),o!==(s=J.get(this,e))||n?J.set(this,e,!1):s={},o!==s)return t.stopImmediatePropagation(),t.preventDefault(),s&&s.value}else o.length&&(J.set(this,e,{value:j.event.trigger(j.extend(o[0],j.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&j.event.add(t,e,St)}j.event={global:{},add:function(t,e,i,n,s){var o,r,a,l,c,h,d,u,p,f,g,m=J.get(t);if(Q(t))for(i.handler&&(i=(o=i).handler,s=o.selector),s&&j.find.matchesSelector(rt,s),i.guid||(i.guid=j.guid++),(l=m.events)||(l=m.events=Object.create(null)),(r=m.handle)||(r=m.handle=function(e){return void 0!==j&&j.event.triggered!==e.type?j.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(F)||[""]).length;c--;)p=g=(a=jt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(d=j.event.special[p]||{},p=(s?d.delegateType:d.bindType)||p,d=j.event.special[p]||{},h=j.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&j.expr.match.needsContext.test(s),namespace:f.join(".")},o),(u=l[p])||((u=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(p,r)),d.add&&(d.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),s?u.splice(u.delegateCount++,0,h):u.push(h),j.event.global[p]=!0)},remove:function(t,e,i,n,s){var o,r,a,l,c,h,d,u,p,f,g,m=J.hasData(t)&&J.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(F)||[""]).length;c--;)if(p=g=(a=jt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(d=j.event.special[p]||{},u=l[p=(n?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=u.length;o--;)h=u[o],!s&&g!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(u.splice(o,1),h.selector&&u.delegateCount--,d.remove&&d.remove.call(t,h));r&&!u.length&&(d.teardown&&!1!==d.teardown.call(t,f,m.handle)||j.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)j.event.remove(t,p+e[c],i,n,!0);j.isEmptyObject(l)&&J.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,o,r,a=new Array(arguments.length),l=j.event.fix(t),c=(J.get(this,"events")||Object.create(null))[l.type]||[],h=j.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,l)){for(r=j.event.handlers.call(this,l,c),e=0;(s=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(n=((j.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,s,o,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[s=(n=e[i]).selector+" "]&&(r[s]=n.needsContext?j(s,this).index(c)>-1:j.find(s,this,null,[c]).length),r[s]&&o.push(n);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(j.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[j.expando]?t:new j.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return mt.test(e.type)&&e.click&&E(e,"input")&&At(e,"click",St),!1},trigger:function(t){var e=this||t;return mt.test(e.type)&&e.click&&E(e,"input")&&At(e,"click"),!0},_default:function(t){var e=t.target;return mt.test(e.type)&&e.click&&E(e,"input")&&J.get(e,"click")||E(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},j.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},j.Event=function(t,e){if(!(this instanceof j.Event))return new j.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?St:Tt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&j.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[j.expando]=!0},j.Event.prototype={constructor:j.Event,isDefaultPrevented:Tt,isPropagationStopped:Tt,isImmediatePropagationStopped:Tt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},j.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},j.event.addProp),j.each({focus:"focusin",blur:"focusout"},(function(t,e){j.event.special[t]={setup:function(){return At(this,t,Ct),!1},trigger:function(){return At(this,t),!0},_default:function(e){return J.get(e.target,t)},delegateType:e}})),j.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){j.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,s=t.handleObj;return n&&(n===this||j.contains(this,n))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}})),j.fn.extend({on:function(t,e,i,n){return Mt(this,t,e,i,n)},one:function(t,e,i,n){return Mt(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,j(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Tt),this.each((function(){j.event.remove(this,t,i,e)}))}});var Et=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Dt(t,e){return E(t,"table")&&E(11!==e.nodeType?e:e.firstChild,"tr")&&j(t).children("tbody")[0]||t}function Lt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Nt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function It(t,e){var i,n,s,o,r,a;if(1===e.nodeType){if(J.hasData(t)&&(a=J.get(t).events))for(s in J.remove(e,"handle events"),a)for(i=0,n=a[s].length;i<n;i++)j.event.add(e,s,a[s][i]);Z.hasData(t)&&(o=Z.access(t),r=j.extend({},o),Z.set(e,r))}}function Rt(t,e){var i=e.nodeName.toLowerCase();"input"===i&&mt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function Ft(t,e,i,n){e=l(e);var s,o,r,a,c,h,d=0,u=t.length,p=u-1,f=e[0],g=b(f);if(g||u>1&&"string"==typeof f&&!m.checkClone&&Ot.test(f))return t.each((function(s){var o=t.eq(s);g&&(e[0]=f.call(this,s,o.html())),Ft(o,e,i,n)}));if(u&&(o=(s=kt(e,t[0].ownerDocument,!1,t,n)).firstChild,1===s.childNodes.length&&(s=o),o||n)){for(a=(r=j.map(yt(s,"script"),Lt)).length;d<u;d++)c=s,d!==p&&(c=j.clone(c,!0,!0),a&&j.merge(r,yt(c,"script"))),i.call(t[d],c,d);if(a)for(h=r[r.length-1].ownerDocument,j.map(r,Nt),d=0;d<a;d++)c=r[d],_t.test(c.type||"")&&!J.access(c,"globalEval")&&j.contains(h,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?j._evalUrl&&!c.noModule&&j._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},h):x(c.textContent.replace(Pt,""),c,h))}return t}function Ht(t,e,i){for(var n,s=e?j.filter(e,t):t,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||j.cleanData(yt(n)),n.parentNode&&(i&&at(n)&&xt(yt(n,"script")),n.parentNode.removeChild(n));return t}j.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,s,o,r,a=t.cloneNode(!0),l=at(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||j.isXMLDoc(t)))for(r=yt(a),n=0,s=(o=yt(t)).length;n<s;n++)Rt(o[n],r[n]);if(e)if(i)for(o=o||yt(t),r=r||yt(a),n=0,s=o.length;n<s;n++)It(o[n],r[n]);else It(t,a);return(r=yt(a,"script")).length>0&&xt(r,!l&&yt(t,"script")),a},cleanData:function(t){for(var e,i,n,s=j.event.special,o=0;void 0!==(i=t[o]);o++)if(Q(i)){if(e=i[J.expando]){if(e.events)for(n in e.events)s[n]?j.event.remove(i,n):j.removeEvent(i,n,e.handle);i[J.expando]=void 0}i[Z.expando]&&(i[Z.expando]=void 0)}}}),j.fn.extend({detach:function(t){return Ht(this,t,!0)},remove:function(t){return Ht(this,t)},text:function(t){return q(this,(function(t){return void 0===t?j.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Ft(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Dt(this,t).appendChild(t)}))},prepend:function(){return Ft(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Dt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Ft(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Ft(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(j.cleanData(yt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return j.clone(this,t,e)}))},html:function(t){return q(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Et.test(t)&&!vt[(bt.exec(t)||["",""])[1].toLowerCase()]){t=j.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(j.cleanData(yt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Ft(this,arguments,(function(e){var i=this.parentNode;j.inArray(this,t)<0&&(j.cleanData(yt(this)),i&&i.replaceChild(e,this))}),t)}}),j.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){j.fn[t]=function(t){for(var i,n=[],s=j(t),o=s.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),j(s[r])[e](i),c.apply(n,i.get());return this.pushStack(n)}}));var Bt=new RegExp("^("+nt+")(?!px)[a-z%]+$","i"),zt=/^--/,Wt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},$t=function(t,e,i){var n,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in n=i.call(t),e)t.style[s]=o[s];return n},Vt=new RegExp(ot.join("|"),"i"),qt="[\\x20\\t\\r\\n\\f]",Yt=new RegExp("^"+qt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+qt+"+$","g");function Xt(t,e,i){var n,s,o,r,a=zt.test(e),l=t.style;return(i=i||Wt(t))&&(r=i.getPropertyValue(e)||i[e],a&&r&&(r=r.replace(Yt,"$1")||void 0),""!==r||at(t)||(r=j.style(t,e)),!m.pixelBoxStyles()&&Bt.test(r)&&Vt.test(e)&&(n=l.width,s=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=r,r=i.width,l.width=n,l.minWidth=s,l.maxWidth=o)),void 0!==r?r+"":r}function Ut(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(h){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",h.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",rt.appendChild(c).appendChild(h);var t=n.getComputedStyle(h);i="1%"!==t.top,l=12===e(t.marginLeft),h.style.right="60%",r=36===e(t.right),s=36===e(t.width),h.style.position="absolute",o=12===e(h.offsetWidth/3),rt.removeChild(c),h=null}}function e(t){return Math.round(parseFloat(t))}var i,s,o,r,a,l,c=v.createElement("div"),h=v.createElement("div");h.style&&(h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===h.style.backgroundClip,j.extend(m,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),r},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,i,s;return null==a&&(t=v.createElement("table"),e=v.createElement("tr"),i=v.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",i.style.height="9px",i.style.display="block",rt.appendChild(t).appendChild(e).appendChild(i),s=n.getComputedStyle(e),a=parseInt(s.height,10)+parseInt(s.borderTopWidth,10)+parseInt(s.borderBottomWidth,10)===e.offsetHeight,rt.removeChild(t)),a}}))}();var Kt=["Webkit","Moz","ms"],Qt=v.createElement("div").style,Gt={};function Jt(t){var e=j.cssProps[t]||Gt[t];return e||(t in Qt?t:Gt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=Kt.length;i--;)if((t=Kt[i]+e)in Qt)return t}(t)||t)}var Zt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"};function ie(t,e,i){var n=st.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function ne(t,e,i,n,s,o){var r="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=j.css(t,i+ot[r],!0,s)),n?("content"===i&&(l-=j.css(t,"padding"+ot[r],!0,s)),"margin"!==i&&(l-=j.css(t,"border"+ot[r]+"Width",!0,s))):(l+=j.css(t,"padding"+ot[r],!0,s),"padding"!==i?l+=j.css(t,"border"+ot[r]+"Width",!0,s):a+=j.css(t,"border"+ot[r]+"Width",!0,s));return!n&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))||0),l}function se(t,e,i){var n=Wt(t),s=(!m.boxSizingReliable()||i)&&"border-box"===j.css(t,"boxSizing",!1,n),o=s,r=Xt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(Bt.test(r)){if(!i)return r;r="auto"}return(!m.boxSizingReliable()&&s||!m.reliableTrDimensions()&&E(t,"tr")||"auto"===r||!parseFloat(r)&&"inline"===j.css(t,"display",!1,n))&&t.getClientRects().length&&(s="border-box"===j.css(t,"boxSizing",!1,n),(o=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+ne(t,e,i||(s?"border":"content"),o,n,r)+"px"}function oe(t,e,i,n,s){return new oe.prototype.init(t,e,i,n,s)}j.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Xt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=K(e),l=zt.test(e),c=t.style;if(l||(e=Jt(a)),r=j.cssHooks[e]||j.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(t,!1,n))?s:c[e];"string"===(o=typeof i)&&(s=st.exec(i))&&s[1]&&(i=ht(t,e,s),o="number"),null!=i&&i==i&&("number"!==o||l||(i+=s&&s[3]||(j.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var s,o,r,a=K(e);return zt.test(e)||(e=Jt(a)),(r=j.cssHooks[e]||j.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,i)),void 0===s&&(s=Xt(t,e,n)),"normal"===s&&e in ee&&(s=ee[e]),""===i||i?(o=parseFloat(s),!0===i||isFinite(o)?o||0:s):s}}),j.each(["height","width"],(function(t,e){j.cssHooks[e]={get:function(t,i,n){if(i)return!Zt.test(j.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?se(t,e,n):$t(t,te,(function(){return se(t,e,n)}))},set:function(t,i,n){var s,o=Wt(t),r=!m.scrollboxSize()&&"absolute"===o.position,a=(r||n)&&"border-box"===j.css(t,"boxSizing",!1,o),l=n?ne(t,e,n,a,o):0;return a&&r&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ne(t,e,"border",!1,o)-.5)),l&&(s=st.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=j.css(t,e)),ie(0,i,l)}}})),j.cssHooks.marginLeft=Ut(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Xt(t,"marginLeft"))||t.getBoundingClientRect().left-$t(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),j.each({margin:"",padding:"",border:"Width"},(function(t,e){j.cssHooks[t+e]={expand:function(i){for(var n=0,s={},o="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+ot[n]+e]=o[n]||o[n-2]||o[0];return s}},"margin"!==t&&(j.cssHooks[t+e].set=ie)})),j.fn.extend({css:function(t,e){return q(this,(function(t,e,i){var n,s,o={},r=0;if(Array.isArray(e)){for(n=Wt(t),s=e.length;r<s;r++)o[e[r]]=j.css(t,e[r],!1,n);return o}return void 0!==i?j.style(t,e,i):j.css(t,e)}),t,e,arguments.length>1)}}),j.Tween=oe,oe.prototype={constructor:oe,init:function(t,e,i,n,s,o){this.elem=t,this.prop=i,this.easing=s||j.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=o||(j.cssNumber[i]?"":"px")},cur:function(){var t=oe.propHooks[this.prop];return t&&t.get?t.get(this):oe.propHooks._default.get(this)},run:function(t){var e,i=oe.propHooks[this.prop];return this.options.duration?this.pos=e=j.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):oe.propHooks._default.set(this),this}},oe.prototype.init.prototype=oe.prototype,oe.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=j.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){j.fx.step[t.prop]?j.fx.step[t.prop](t):1!==t.elem.nodeType||!j.cssHooks[t.prop]&&null==t.elem.style[Jt(t.prop)]?t.elem[t.prop]=t.now:j.style(t.elem,t.prop,t.now+t.unit)}}},oe.propHooks.scrollTop=oe.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},j.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},j.fx=oe.prototype.init,j.fx.step={};var re,ae,le=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;function he(){ae&&(!1===v.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(he):n.setTimeout(he,j.fx.interval),j.fx.tick())}function de(){return n.setTimeout((function(){re=void 0})),re=Date.now()}function ue(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=ot[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function pe(t,e,i){for(var n,s=(fe.tweeners[e]||[]).concat(fe.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,e,t))return n}function fe(t,e,i){var n,s,o=0,r=fe.prefilters.length,a=j.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var e=re||de(),i=Math.max(0,c.startTime+c.duration-e),n=1-(i/c.duration||0),o=0,r=c.tweens.length;o<r;o++)c.tweens[o].run(n);return a.notifyWith(t,[c,n,i]),n<1&&r?i:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:j.extend({},e),opts:j.extend(!0,{specialEasing:{},easing:j.easing._default},i),originalProperties:e,originalOptions:i,startTime:re||de(),duration:i.duration,tweens:[],createTween:function(e,i){var n=j.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),h=c.props;for(!function(t,e){var i,n,s,o,r;for(i in t)if(s=e[n=K(i)],o=t[i],Array.isArray(o)&&(s=o[1],o=t[i]=o[0]),i!==n&&(t[n]=o,delete t[i]),(r=j.cssHooks[n])&&"expand"in r)for(i in o=r.expand(o),delete t[n],o)i in t||(t[i]=o[i],e[i]=s);else e[n]=s}(h,c.opts.specialEasing);o<r;o++)if(n=fe.prefilters[o].call(c,t,h,c.opts))return b(n.stop)&&(j._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return j.map(h,pe,c),b(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),j.fx.timer(j.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}j.Animation=j.extend(fe,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ht(i.elem,t,st.exec(e),i),i}]},tweener:function(t,e){b(t)?(e=t,t=["*"]):t=t.match(F);for(var i,n=0,s=t.length;n<s;n++)i=t[n],fe.tweeners[i]=fe.tweeners[i]||[],fe.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,o,r,a,l,c,h,d="width"in e||"height"in e,u=this,p={},f=t.style,g=t.nodeType&&ct(t),m=J.get(t,"fxshow");for(n in i.queue||(null==(r=j._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,u.always((function(){u.always((function(){r.unqueued--,j.queue(t,"fx").length||r.empty.fire()}))}))),e)if(s=e[n],le.test(s)){if(delete e[n],o=o||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||j.style(t,n)}if((l=!j.isEmptyObject(e))||!j.isEmptyObject(p))for(n in d&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=J.get(t,"display")),"none"===(h=j.css(t,"display"))&&(c?h=c:(pt([t],!0),c=t.style.display||c,h=j.css(t,"display"),pt([t]))),("inline"===h||"inline-block"===h&&null!=c)&&"none"===j.css(t,"float")&&(l||(u.done((function(){f.display=c})),null==c&&(h=f.display,c="none"===h?"":h)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",u.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=J.access(t,"fxshow",{display:c}),o&&(m.hidden=!g),g&&pt([t],!0),u.done((function(){for(n in g||pt([t]),J.remove(t,"fxshow"),p)j.style(t,n,p[n])}))),l=pe(g?m[n]:0,n,u),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?fe.prefilters.unshift(t):fe.prefilters.push(t)}}),j.speed=function(t,e,i){var n=t&&"object"==typeof t?j.extend({},t):{complete:i||!i&&e||b(t)&&t,duration:t,easing:i&&e||e&&!b(e)&&e};return j.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in j.fx.speeds?n.duration=j.fx.speeds[n.duration]:n.duration=j.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&j.dequeue(this,n.queue)},n},j.fn.extend({fadeTo:function(t,e,i,n){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=j.isEmptyObject(t),o=j.speed(e,i,n),r=function(){var e=fe(this,j.extend({},t),o);(s||J.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,s=null!=t&&t+"queueHooks",o=j.timers,r=J.get(this);if(s)r[s]&&r[s].stop&&n(r[s]);else for(s in r)r[s]&&r[s].stop&&ce.test(s)&&n(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(i),e=!1,o.splice(s,1));!e&&i||j.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=J.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],o=j.timers,r=n?n.length:0;for(i.finish=!0,j.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),j.each(["toggle","show","hide"],(function(t,e){var i=j.fn[e];j.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(ue(e,!0),t,n,s)}})),j.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){j.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),j.timers=[],j.fx.tick=function(){var t,e=0,i=j.timers;for(re=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||j.fx.stop(),re=void 0},j.fx.timer=function(t){j.timers.push(t),j.fx.start()},j.fx.interval=13,j.fx.start=function(){ae||(ae=!0,he())},j.fx.stop=function(){ae=null},j.fx.speeds={slow:600,fast:200,_default:400},j.fn.delay=function(t,e){return t=j.fx&&j.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,i){var s=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(s)}}))},function(){var t=v.createElement("input"),e=v.createElement("select").appendChild(v.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=v.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var ge,me=j.expr.attrHandle;j.fn.extend({attr:function(t,e){return q(this,j.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){j.removeAttr(this,t)}))}}),j.extend({attr:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?j.prop(t,e,i):(1===o&&j.isXMLDoc(t)||(s=j.attrHooks[e.toLowerCase()]||(j.expr.match.bool.test(e)?ge:void 0)),void 0!==i?null===i?void j.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=j.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&E(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(F);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),ge={set:function(t,e,i){return!1===e?j.removeAttr(t,i):t.setAttribute(i,i),i}},j.each(j.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=me[e]||j.find.attr;me[e]=function(t,e,n){var s,o,r=e.toLowerCase();return n||(o=me[r],me[r]=s,s=null!=i(t,e,n)?r:null,me[r]=o),s}}));var be=/^(?:input|select|textarea|button)$/i,_e=/^(?:a|area)$/i;function ve(t){return(t.match(F)||[]).join(" ")}function ye(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(F)||[]}j.fn.extend({prop:function(t,e){return q(this,j.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[j.propFix[t]||t]}))}}),j.extend({prop:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&j.isXMLDoc(t)||(e=j.propFix[e]||e,s=j.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=j.find.attr(t,"tabindex");return e?parseInt(e,10):be.test(t.nodeName)||_e.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(j.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),j.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){j.propFix[this.toLowerCase()]=this})),j.fn.extend({addClass:function(t){var e,i,n,s,o,r;return b(t)?this.each((function(e){j(this).addClass(t.call(this,e,ye(this)))})):(e=xe(t)).length?this.each((function(){if(n=ye(this),i=1===this.nodeType&&" "+ve(n)+" "){for(o=0;o<e.length;o++)s=e[o],i.indexOf(" "+s+" ")<0&&(i+=s+" ");r=ve(i),n!==r&&this.setAttribute("class",r)}})):this},removeClass:function(t){var e,i,n,s,o,r;return b(t)?this.each((function(e){j(this).removeClass(t.call(this,e,ye(this)))})):arguments.length?(e=xe(t)).length?this.each((function(){if(n=ye(this),i=1===this.nodeType&&" "+ve(n)+" "){for(o=0;o<e.length;o++)for(s=e[o];i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r=ve(i),n!==r&&this.setAttribute("class",r)}})):this:this.attr("class","")},toggleClass:function(t,e){var i,n,s,o,r=typeof t,a="string"===r||Array.isArray(t);return b(t)?this.each((function(i){j(this).toggleClass(t.call(this,i,ye(this),e),e)})):"boolean"==typeof e&&a?e?this.addClass(t):this.removeClass(t):(i=xe(t),this.each((function(){if(a)for(o=j(this),s=0;s<i.length;s++)n=i[s],o.hasClass(n)?o.removeClass(n):o.addClass(n);else void 0!==t&&"boolean"!==r||((n=ye(this))&&J.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===t?"":J.get(this,"__className__")||""))})))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+ve(ye(i))+" ").indexOf(e)>-1)return!0;return!1}});var we=/\r/g;j.fn.extend({val:function(t){var e,i,n,s=this[0];return arguments.length?(n=b(t),this.each((function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,j(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=j.map(s,(function(t){return null==t?"":t+""}))),(e=j.valHooks[this.type]||j.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))}))):s?(e=j.valHooks[s.type]||j.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(we,""):null==i?"":i:void 0}}),j.extend({valHooks:{option:{get:function(t){var e=j.find.attr(t,"value");return null!=e?e:ve(j.text(t))}},select:{get:function(t){var e,i,n,s=t.options,o=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?o+1:s.length;for(n=o<0?l:r?o:0;n<l;n++)if(((i=s[n]).selected||n===o)&&!i.disabled&&(!i.parentNode.disabled||!E(i.parentNode,"optgroup"))){if(e=j(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,n,s=t.options,o=j.makeArray(e),r=s.length;r--;)((n=s[r]).selected=j.inArray(j.valHooks.option.get(n),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),j.each(["radio","checkbox"],(function(){j.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=j.inArray(j(t).val(),e)>-1}},m.checkOn||(j.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),m.focusin="onfocusin"in n;var ke=/^(?:focusinfocus|focusoutblur)$/,je=function(t){t.stopPropagation()};j.extend(j.event,{trigger:function(t,e,i,s){var o,r,a,l,c,h,d,u,f=[i||v],g=p.call(t,"type")?t.type:t,m=p.call(t,"namespace")?t.namespace.split("."):[];if(r=u=a=i=i||v,3!==i.nodeType&&8!==i.nodeType&&!ke.test(g+j.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(t=t[j.expando]?t:new j.Event(g,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:j.makeArray(e,[t]),d=j.event.special[g]||{},s||!d.trigger||!1!==d.trigger.apply(i,e))){if(!s&&!d.noBubble&&!_(i)){for(l=d.delegateType||g,ke.test(l+g)||(r=r.parentNode);r;r=r.parentNode)f.push(r),a=r;a===(i.ownerDocument||v)&&f.push(a.defaultView||a.parentWindow||n)}for(o=0;(r=f[o++])&&!t.isPropagationStopped();)u=r,t.type=o>1?l:d.bindType||g,(h=(J.get(r,"events")||Object.create(null))[t.type]&&J.get(r,"handle"))&&h.apply(r,e),(h=c&&r[c])&&h.apply&&Q(r)&&(t.result=h.apply(r,e),!1===t.result&&t.preventDefault());return t.type=g,s||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),e)||!Q(i)||c&&b(i[g])&&!_(i)&&((a=i[c])&&(i[c]=null),j.event.triggered=g,t.isPropagationStopped()&&u.addEventListener(g,je),i[g](),t.isPropagationStopped()&&u.removeEventListener(g,je),j.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(t,e,i){var n=j.extend(new j.Event,i,{type:t,isSimulated:!0});j.event.trigger(n,null,e)}}),j.fn.extend({trigger:function(t,e){return this.each((function(){j.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return j.event.trigger(t,e,i,!0)}}),m.focusin||j.each({focus:"focusin",blur:"focusout"},(function(t,e){var i=function(t){j.event.simulate(e,t.target,j.event.fix(t))};j.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,s=J.access(n,e);s||n.addEventListener(t,i,!0),J.access(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,s=J.access(n,e)-1;s?J.access(n,e,s):(n.removeEventListener(t,i,!0),J.remove(n,e))}}}));var Se=n.location,Te={guid:Date.now()},Ce=/\?/;j.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){}return i=e&&e.getElementsByTagName("parsererror")[0],e&&!i||j.error("Invalid XML: "+(i?j.map(i.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Me=/\[\]$/,Ae=/\r?\n/g,Ee=/^(?:submit|button|image|reset|file)$/i,Oe=/^(?:input|select|textarea|keygen)/i;function Pe(t,e,i,n){var s;if(Array.isArray(e))j.each(e,(function(e,s){i||Me.test(t)?n(t,s):Pe(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)}));else if(i||"object"!==w(e))n(t,e);else for(s in e)Pe(t+"["+s+"]",e[s],i,n)}j.param=function(t,e){var i,n=[],s=function(t,e){var i=b(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!j.isPlainObject(t))j.each(t,(function(){s(this.name,this.value)}));else for(i in t)Pe(i,t[i],e,s);return n.join("&")},j.fn.extend({serialize:function(){return j.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=j.prop(this,"elements");return t?j.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!j(this).is(":disabled")&&Oe.test(this.nodeName)&&!Ee.test(t)&&(this.checked||!mt.test(t))})).map((function(t,e){var i=j(this).val();return null==i?null:Array.isArray(i)?j.map(i,(function(t){return{name:e.name,value:t.replace(Ae,"\r\n")}})):{name:e.name,value:i.replace(Ae,"\r\n")}})).get()}});var De=/%20/g,Le=/#.*$/,Ne=/([?&])_=[^&]*/,Ie=/^(.*?):[ \t]*([^\r\n]*)$/gm,Re=/^(?:GET|HEAD)$/,Fe=/^\/\//,He={},Be={},ze="*/".concat("*"),We=v.createElement("a");function $e(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,o=e.toLowerCase().match(F)||[];if(b(i))for(;n=o[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Ve(t,e,i,n){var s={},o=t===Be;function r(a){var l;return s[a]=!0,j.each(t[a]||[],(function(t,a){var c=a(e,i,n);return"string"!=typeof c||o||s[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),r(c),!1)})),l}return r(e.dataTypes[0])||!s["*"]&&r("*")}function qe(t,e){var i,n,s=j.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&j.extend(!0,t,n),t}We.href=Se.href,j.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Se.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Se.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ze,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":j.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?qe(qe(t,j.ajaxSettings),e):qe(j.ajaxSettings,t)},ajaxPrefilter:$e(He),ajaxTransport:$e(Be),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,s,o,r,a,l,c,h,d,u,p=j.ajaxSetup({},e),f=p.context||p,g=p.context&&(f.nodeType||f.jquery)?j(f):j.event,m=j.Deferred(),b=j.Callbacks("once memory"),_=p.statusCode||{},y={},x={},w="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(c){if(!r)for(r={};e=Ie.exec(o);)r[e[1].toLowerCase()+" "]=(r[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=r[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,y[t]=e),this},overrideMimeType:function(t){return null==c&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)k.always(t[k.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||w;return i&&i.abort(e),S(0,e),this}};if(m.promise(k),p.url=((t||p.url||Se.href)+"").replace(Fe,Se.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(F)||[""],null==p.crossDomain){l=v.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=We.protocol+"//"+We.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=j.param(p.data,p.traditional)),Ve(He,p,e,k),c)return k;for(d in(h=j.event&&p.global)&&0==j.active++&&j.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Re.test(p.type),s=p.url.replace(Le,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(De,"+")):(u=p.url.slice(s.length),p.data&&(p.processData||"string"==typeof p.data)&&(s+=(Ce.test(s)?"&":"?")+p.data,delete p.data),!1===p.cache&&(s=s.replace(Ne,"$1"),u=(Ce.test(s)?"&":"?")+"_="+Te.guid+++u),p.url=s+u),p.ifModified&&(j.lastModified[s]&&k.setRequestHeader("If-Modified-Since",j.lastModified[s]),j.etag[s]&&k.setRequestHeader("If-None-Match",j.etag[s])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ze+"; q=0.01":""):p.accepts["*"]),p.headers)k.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(f,k,p)||c))return k.abort();if(w="abort",b.add(p.complete),k.done(p.success),k.fail(p.error),i=Ve(Be,p,e,k)){if(k.readyState=1,h&&g.trigger("ajaxSend",[k,p]),c)return k;p.async&&p.timeout>0&&(a=n.setTimeout((function(){k.abort("timeout")}),p.timeout));try{c=!1,i.send(y,S)}catch(t){if(c)throw t;S(-1,t)}}else S(-1,"No Transport");function S(t,e,r,l){var d,u,v,y,x,w=e;c||(c=!0,a&&n.clearTimeout(a),i=void 0,o=l||"",k.readyState=t>0?4:0,d=t>=200&&t<300||304===t,r&&(y=function(t,e,i){for(var n,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(p,k,r)),!d&&j.inArray("script",p.dataTypes)>-1&&j.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),y=function(t,e,i,n){var s,o,r,a,l,c={},h=t.dataTypes.slice();if(h[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=h.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=h.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=c[l+" "+o]||c["* "+o]))for(s in c)if((a=s.split(" "))[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[s]:!0!==c[s]&&(o=a[0],h.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(p,y,k,d),d?(p.ifModified&&((x=k.getResponseHeader("Last-Modified"))&&(j.lastModified[s]=x),(x=k.getResponseHeader("etag"))&&(j.etag[s]=x)),204===t||"HEAD"===p.type?w="nocontent":304===t?w="notmodified":(w=y.state,u=y.data,d=!(v=y.error))):(v=w,!t&&w||(w="error",t<0&&(t=0))),k.status=t,k.statusText=(e||w)+"",d?m.resolveWith(f,[u,w,k]):m.rejectWith(f,[k,w,v]),k.statusCode(_),_=void 0,h&&g.trigger(d?"ajaxSuccess":"ajaxError",[k,p,d?u:v]),b.fireWith(f,[k,w]),h&&(g.trigger("ajaxComplete",[k,p]),--j.active||j.event.trigger("ajaxStop")))}return k},getJSON:function(t,e,i){return j.get(t,e,i,"json")},getScript:function(t,e){return j.get(t,void 0,e,"script")}}),j.each(["get","post"],(function(t,e){j[e]=function(t,i,n,s){return b(i)&&(s=s||n,n=i,i=void 0),j.ajax(j.extend({url:t,type:e,dataType:s,data:i,success:n},j.isPlainObject(t)&&t))}})),j.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),j._evalUrl=function(t,e,i){return j.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){j.globalEval(t,e,i)}})},j.fn.extend({wrapAll:function(t){var e;return this[0]&&(b(t)&&(t=t.call(this[0])),e=j(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return b(t)?this.each((function(e){j(this).wrapInner(t.call(this,e))})):this.each((function(){var e=j(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=b(t);return this.each((function(i){j(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){j(this).replaceWith(this.childNodes)})),this}}),j.expr.pseudos.hidden=function(t){return!j.expr.pseudos.visible(t)},j.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},j.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ye={0:200,1223:204},Xe=j.ajaxSettings.xhr();m.cors=!!Xe&&"withCredentials"in Xe,m.ajax=Xe=!!Xe,j.ajaxTransport((function(t){var e,i;if(m.cors||Xe&&!t.crossDomain)return{send:function(s,o){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];for(r in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(r,s[r]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ye[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){e&&i()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),j.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),j.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return j.globalEval(t),t}}}),j.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),j.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,s){e=j("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),v.head.appendChild(e[0])},abort:function(){i&&i()}}}));var Ue,Ke=[],Qe=/(=)\?(?=&|$)|\?\?/;j.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ke.pop()||j.expando+"_"+Te.guid++;return this[t]=!0,t}}),j.ajaxPrefilter("json jsonp",(function(t,e,i){var s,o,r,a=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Qe,"$1"+s):!1!==t.jsonp&&(t.url+=(Ce.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||j.error(s+" was not called"),r[0]},t.dataTypes[0]="json",o=n[s],n[s]=function(){r=arguments},i.always((function(){void 0===o?j(n).removeProp(s):n[s]=o,t[s]&&(t.jsonpCallback=e.jsonpCallback,Ke.push(s)),r&&b(o)&&o(r[0]),r=o=void 0})),"script"})),m.createHTMLDocument=((Ue=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ue.childNodes.length),j.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(m.createHTMLDocument?((n=(e=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,e.head.appendChild(n)):e=v),o=!i&&[],(s=O.exec(t))?[e.createElement(s[1])]:(s=kt([t],e,o),o&&o.length&&j(o).remove(),j.merge([],s.childNodes)));var n,s,o},j.fn.load=function(t,e,i){var n,s,o,r=this,a=t.indexOf(" ");return a>-1&&(n=ve(t.slice(a)),t=t.slice(0,a)),b(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),r.length>0&&j.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done((function(t){o=arguments,r.html(n?j("<div>").append(j.parseHTML(t)).find(n):t)})).always(i&&function(t,e){r.each((function(){i.apply(this,o||[t.responseText,e,t])}))}),this},j.expr.pseudos.animated=function(t){return j.grep(j.timers,(function(e){return t===e.elem})).length},j.offset={setOffset:function(t,e,i){var n,s,o,r,a,l,c=j.css(t,"position"),h=j(t),d={};"static"===c&&(t.style.position="relative"),a=h.offset(),o=j.css(t,"top"),l=j.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(r=(n=h.position()).top,s=n.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),b(e)&&(e=e.call(t,i,j.extend({},a))),null!=e.top&&(d.top=e.top-a.top+r),null!=e.left&&(d.left=e.left-a.left+s),"using"in e?e.using.call(t,d):h.css(d)}},j.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){j.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],s={top:0,left:0};if("fixed"===j.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===j.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((s=j(t).offset()).top+=j.css(t,"borderTopWidth",!0),s.left+=j.css(t,"borderLeftWidth",!0))}return{top:e.top-s.top-j.css(n,"marginTop",!0),left:e.left-s.left-j.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===j.css(t,"position");)t=t.offsetParent;return t||rt}))}}),j.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;j.fn[t]=function(n){return q(this,(function(t,n,s){var o;if(_(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===s)return o?o[e]:t[n];o?o.scrollTo(i?o.pageXOffset:s,i?s:o.pageYOffset):t[n]=s}),t,n,arguments.length)}})),j.each(["top","left"],(function(t,e){j.cssHooks[e]=Ut(m.pixelPosition,(function(t,i){if(i)return i=Xt(t,e),Bt.test(i)?j(t).position()[e]+"px":i}))})),j.each({Height:"height",Width:"width"},(function(t,e){j.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){j.fn[n]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(!0===s||!0===o?"margin":"border");return q(this,(function(e,i,s){var o;return _(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===s?j.css(e,i,a):j.style(e,i,s,a)}),e,r?s:void 0,r)}}))})),j.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){j.fn[e]=function(t){return this.on(e,t)}})),j.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),j.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){j.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var Ge=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;j.proxy=function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),b(t))return n=a.call(arguments,2),s=function(){return t.apply(e||this,n.concat(a.call(arguments)))},s.guid=t.guid=t.guid||j.guid++,s},j.holdReady=function(t){t?j.readyWait++:j.ready(!0)},j.isArray=Array.isArray,j.parseJSON=JSON.parse,j.nodeName=E,j.isFunction=b,j.isWindow=_,j.camelCase=K,j.type=w,j.now=Date.now,j.isNumeric=function(t){var e=j.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},j.trim=function(t){return null==t?"":(t+"").replace(Ge,"$1")},void 0===(i=function(){return j}.apply(e,[]))||(t.exports=i);var Je=n.jQuery,Ze=n.$;return j.noConflict=function(t){return n.$===j&&(n.$=Ze),t&&n.jQuery===j&&(n.jQuery=Je),j},void 0===s&&(n.jQuery=n.$=j),j}))},"./node_modules/@fortawesome/fontawesome-free/css/all.min.css":(t,e,i)=>{"use strict";i.r(e)},"./node_modules/animate.css/animate.min.css":(t,e,i)=>{"use strict";i.r(e)},"./node_modules/chart.js/auto/auto.mjs":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./node_modules/chart.js/dist/chart.mjs");n.Chart.register(...n.registerables);const s=n.Chart},"./node_modules/chart.js/dist/chart.mjs":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Animation:()=>a,Animations:()=>c,ArcElement:()=>be,BarController:()=>E,BarElement:()=>Ne,BasePlatform:()=>wt,BasicPlatform:()=>kt,BubbleController:()=>O,CategoryScale:()=>Si,Chart:()=>ce,DatasetController:()=>x,Decimation:()=>He,DomPlatform:()=>Ft,DoughnutController:()=>P,Element:()=>R,Filler:()=>ii,Interaction:()=>lt,Legend:()=>oi,LineController:()=>D,LineElement:()=>Te,LinearScale:()=>Mi,LogarithmicScale:()=>Ei,PieController:()=>N,PointElement:()=>Me,PolarAreaController:()=>L,RadarController:()=>I,RadialLinearScale:()=>Hi,Scale:()=>U,ScatterController:()=>G,SubTitle:()=>ci,Ticks:()=>H,TimeScale:()=>Xi,TimeSeriesScale:()=>Ki,Title:()=>ai,Tooltip:()=>wi,_adapters:()=>et,_detectPlatform:()=>Ht,animator:()=>s,controllers:()=>J,defaults:()=>n.d,elements:()=>Ie,layouts:()=>xt,plugins:()=>ki,registerables:()=>Gi,registry:()=>Q,scales:()=>Qi});var n=i("./node_modules/chart.js/dist/chunks/helpers.segment.mjs");var s=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=n.r.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,r=s.length-1,a=!1;for(;r>=0;--r)o=s[r],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(s[r]=s[s.length-1],s.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const o="transparent",r={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=(0,n.c)(t||o),r=s.valid&&(0,n.c)(e||o);return r&&r.valid?r.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class a{constructor(t,e,i,s){const o=e[i];s=(0,n.a)([t.to,s,o,t.from]);const a=(0,n.a)([t.from,o,s]);this._active=!0,this._fn=t.fn||r[t.type||typeof a],this._easing=n.e[t.easing]||n.e.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=a,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],o=i-this._start,r=this._duration-o;this._start=i,this._duration=Math.floor(Math.max(r,t.duration)),this._total+=o,this._loop=!!t.loop,this._to=(0,n.a)([t.to,e,s,t.from]),this._from=(0,n.a)([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,r=this._to;let a;if(this._active=s!==r&&(o||e<i),!this._active)return this._target[n]=r,void this._notify(!0);e<0?this._target[n]=s:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(s,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}n.d.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const l=Object.keys(n.d.animation);n.d.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),n.d.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),n.d.describe("animations",{_fallback:"animation"}),n.d.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class c{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!(0,n.i)(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const s=t[i];if(!(0,n.i)(s))return;const o={};for(const t of l)o[t]=s[t];((0,n.b)(s.properties)&&s.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),r=Date.now();let l;for(l=o.length-1;l>=0;--l){const c=o[l];if("$"===c.charAt(0))continue;if("options"===c){n.push(...this._animateOptions(t,e));continue}const h=e[c];let d=s[c];const u=i.get(c);if(d){if(u&&d.active()){d.update(u,h,r);continue}d.cancel()}u&&u.duration?(s[c]=d=new a(u,t,c,h),n.push(d)):t[c]=h}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(s.add(this._chart,i),!0):void 0}}function h(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function d(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function u(t,e,i,s={}){const o=t.keys,r="single"===s.mode;let a,l,c,h;if(null!==e){for(a=0,l=o.length;a<l;++a){if(c=+o[a],c===i){if(s.all)continue;break}h=t.values[c],(0,n.g)(h)&&(r||0===e||(0,n.s)(e)===(0,n.s)(h))&&(e+=h)}return e}}function p(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function f(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function g(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function m(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:r,index:a}=n,l=o.axis,c=r.axis,h=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,r,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[c]:d}=i;u=(i._stacks||(i._stacks={}))[c]=f(s,h,o),u[a]=d,u._top=g(u,r,!0,n.type),u._bottom=g(u,r,!1,n.type)}}function b(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function _(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i]}}}const v=t=>"reset"===t||"none"===t,y=(t,e)=>e?t:Object.assign({},t);class x{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=p(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&_(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,o=e.xAxisID=(0,n.v)(i.xAxisID,b(t,"x")),r=e.yAxisID=(0,n.v)(i.yAxisID,b(t,"y")),a=e.rAxisID=(0,n.v)(i.rAxisID,b(t,"r")),l=e.indexAxis,c=e.iAxisID=s(l,o,r,a),h=e.vAxisID=s(l,r,o,a);e.xScale=this.getScaleForId(o),e.yScale=this.getScaleForId(r),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(c),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&(0,n.u)(this._data,this),t._stacked&&_(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if((0,n.i)(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){(0,n.u)(i,this);const t=this._cachedMeta;_(t),t._parsed=[]}e&&Object.isExtensible(e)&&(0,n.l)(e,this),this._syncList=[],this._data=e}}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=p(e.vScale,e),e.stack!==i.stack&&(n=!0,_(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&m(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:o,_stacked:r}=i,a=o.axis;let l,c,h,d=0===t&&e===s.length||i._sorted,u=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,h=s;else{h=(0,n.b)(s[t])?this.parseArrayData(i,s,t,e):(0,n.i)(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const o=()=>null===c[a]||u&&c[a]<u[a];for(l=0;l<e;++l)i._parsed[l+t]=c=h[l],d&&(o()&&(d=!1),u=c);i._sorted=d}r&&m(this,h)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,r=s.axis,a=o.axis,l=s.getLabels(),c=s===o,h=new Array(n);let d,u,p;for(d=0,u=n;d<u;++d)p=d+i,h[d]={[r]:c||s.parse(l[p],p),[a]:o.parse(e[p],p)};return h}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,r=new Array(n);let a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=e[c],r[a]={x:s.parse(h[0],c),y:o.parse(h[1],c)};return r}parseObjectData(t,e,i,s){const{xScale:o,yScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c=new Array(s);let h,d,u,p;for(h=0,d=s;h<d;++h)u=h+i,p=e[u],c[h]={x:o.parse((0,n.f)(p,a),u),y:r.parse((0,n.f)(p,l),u)};return c}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return u({keys:d(n,!0),values:e._stacks[t.axis]},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,o=u(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,o=i._sorted&&t===i.iScale,r=s.length,a=this._getOtherScale(t),l=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:d(i,!0),values:null})(e,i,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:u}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(a);let p,f;function g(){f=s[p];const e=f[a.axis];return!(0,n.g)(f[t.axis])||h>e||u<e}for(p=0;p<r&&(g()||(this.updateRangeFromParsed(c,t,f,l),!o));++p);if(o)for(p=r-1;p>=0;--p)if(!g()){this.updateRangeFromParsed(c,t,f,l);break}return c}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,o,r;for(s=0,o=e.length;s<o;++s)r=e[s][t.axis],(0,n.g)(r)&&i.push(r);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,o;return(0,n.i)(t)?(e=t.top,i=t.right,s=t.bottom,o=t.left):e=i=s=o=t,{top:e,right:i,bottom:s,left:o,disabled:!1===t}}((0,n.v)(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=h(t,i),s=h(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],r=this._drawStart||0,a=this._drawCount||n.length-r,l=this.options.drawActiveElementsOnTop;let c;for(i.dataset&&i.dataset.draw(t,s,r,a),c=r;c<r+a;++c){const e=n[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(c=0;c<o.length;++c)o[c].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let o;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];o=e.$context||(e.$context=function(t,e,i){return(0,n.h)(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),o.parsed=this.getParsed(t),o.raw=s.data[t],o.index=o.dataIndex=t}else o=this.$context||(this.$context=function(t,e){return(0,n.h)(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),o.dataset=s,o.index=o.datasetIndex=this.index;return o.active=!!e,o.mode=i,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,o=this._cachedDataOpts,r=t+"-"+e,a=o[r],l=this.enableOptionSharing&&(0,n.j)(i);if(a)return y(a,l);const c=this.chart.config,h=c.datasetElementScopeKeys(this._type,t),d=s?[`${t}Hover`,"hover",t,""]:[t,""],u=c.getOptionScopes(this.getDataset(),h),p=Object.keys(n.d.elements[t]),f=c.resolveNamedOptions(u,p,(()=>this.getContext(i,s)),d);return f.$shared&&(f.$shared=l,o[r]=Object.freeze(y(f,l))),f}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,r=s[o];if(r)return r;let a;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);a=n.createResolver(o,this.getContext(t,i,e))}const l=new c(n,a&&a.animations);return a&&a._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||v(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,s=this.getSharedOptions(i),o=this.includeOptions(e,s)||s!==n;return this.updateSharedOptions(s,e,i),{sharedOptions:s,includeOptions:o}}updateElement(t,e,i,n){v(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!v(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=o;r--)t[r]=t[r-e]};for(a(s),r=t;r<o;++r)s[r]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&_(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function w(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=(0,n._)(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,o,r,a,l=e._length;const c=()=>{32767!==r&&-32768!==r&&((0,n.j)(a)&&(l=Math.min(l,Math.abs(r-a)||l)),a=r)};for(s=0,o=i.length;s<o;++s)r=e.getPixelForValue(i[s]),c();for(a=void 0,s=0,o=e.ticks.length;s<o;++s)r=e.getPixelForTick(s),c();return l}function k(t,e,i,s){return(0,n.b)(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),r=Math.min(s,o),a=Math.max(s,o);let l=r,c=a;Math.abs(r)>Math.abs(a)&&(l=a,c=r),e[i.axis]=c,e._custom={barStart:l,barEnd:c,start:s,end:o,min:r,max:a}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function j(t,e,i,n){const s=t.iScale,o=t.vScale,r=s.getLabels(),a=s===o,l=[];let c,h,d,u;for(c=i,h=i+n;c<h;++c)u=e[c],d={},d[s.axis]=a||s.parse(r[c],c),l.push(k(u,d,o,c));return l}function S(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function T(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);if(!0===s)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:c,bottom:h}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=c:(i._bottom||0)===n?s=h:(o[C(h,r,a,l)]=!0,s=c)),o[C(s,r,a,l)]=!0,t.borderSkipped=o}function C(t,e,i,n){var s,o,r;return n?(r=i,t=M(t=(s=t)===(o=e)?r:s===r?o:s,i,e)):t=M(t,e,i),t}function M(t,e,i){return"start"===t?e:"end"===t?i:t}function A(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}x.defaults={},x.prototype.datasetElementType=null,x.prototype.dataElementType=null;class E extends x{parsePrimitiveData(t,e,i,n){return j(t,e,i,n)}parseArrayData(t,e,i,n){return j(t,e,i,n)}parseObjectData(t,e,i,s){const{iScale:o,vScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c="x"===o.axis?a:l,h="x"===r.axis?a:l,d=[];let u,p,f,g;for(u=i,p=i+s;u<p;++u)g=e[u],f={},f[o.axis]=o.parse((0,n.f)(g,c),u),d.push(k((0,n.f)(g,h),f,r,u));return d}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,r=S(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const o="reset"===s,{index:r,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),c=a.isHorizontal(),h=this._getRuler(),{sharedOptions:d,includeOptions:u}=this._getSharedOptions(e,s);for(let p=e;p<e+i;p++){const e=this.getParsed(p),i=o||(0,n.k)(e[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(p),f=this._calculateBarIndexPixels(p,h),g=(e._stacks||{})[a.axis],m={horizontal:c,base:i.base,enableBorderRadius:!g||S(e._custom)||r===g._top||r===g._bottom,x:c?i.head:f.center,y:c?f.center:i.head,height:c?f.size:Math.abs(i.size),width:c?Math.abs(i.size):f.size};u&&(m.options=d||this.resolveDataElementOptions(p,t[p].active?"active":s));const b=m.options||t[p].options;T(m,b,g,r),A(m,b,h.ratio),this.updateElement(t[p],p,m,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),o=i.options.stacked,r=[],a=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if((0,n.k)(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!a(i))&&((!1===o||-1===r.indexOf(i.stack)||void 0===o&&void 0===i.stack)&&r.push(i.stack),i.index===t))break;return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const r=t.barThickness;return{min:r||w(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:s,minBarLength:o}}=this,r=s||0,a=this.getParsed(t),l=a._custom,c=S(l);let h,d,u=a[e.axis],p=0,f=i?this.applyStack(e,a,i):u;f!==u&&(p=f-u,f=u),c&&(u=l.barStart,f=l.barEnd-l.barStart,0!==u&&(0,n.s)(u)!==(0,n.s)(l.barEnd)&&(p=0),p+=u);const g=(0,n.k)(s)||c?p:s;let m=e.getPixelForValue(g);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(p+f):m,d=h-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?(0,n.s)(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,r)*o,u===r&&(m-=d/2);const t=e.getPixelForDecimal(0),i=e.getPixelForDecimal(1),s=Math.min(t,i),a=Math.max(t,i);m=Math.max(Math.min(m,a),s),h=m+d}if(m===e.getPixelForValue(r)){const t=(0,n.s)(d)*e.getLineWidthForValue(r)/2;m+=t,d-=t}return{size:d,base:m,head:h,center:h+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,o=s.skipNull,r=(0,n.v)(s.maxBarThickness,1/0);let a,l;if(e.grouped){const i=o?this._getStackCount(t):e.stackCount,c="flex"===s.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let r=t>0?s[t-1]:null,a=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===r&&(r=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-r);const c=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:c}}(t,e,s,i):function(t,e,i,s){const o=i.barThickness;let r,a;return(0,n.k)(o)?(r=e.min*i.categoryPercentage,a=i.barPercentage):(r=o*s,a=1),{chunk:r/s,ratio:a,start:e.pixels[t]-r/2}}(t,e,s,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,o?t:void 0);a=c.start+c.chunk*h+c.chunk/2,l=Math.min(r,c.chunk*c.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),l=Math.min(r,e.min*e.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null!==this.getParsed(s)[e.axis]&&i[s].draw(this._ctx)}}E.id="bar",E.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},E.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class O extends x{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,s){const o=super.parseArrayData(t,e,i,s);for(let t=0;t<o.length;t++){const s=e[i+t];o[t]._custom=(0,n.v)(s[2],this.resolveDataElementOptions(t+i).radius)}return o}parseObjectData(t,e,i,s){const o=super.parseObjectData(t,e,i,s);for(let t=0;t<o.length;t++){const s=e[i+t];o[t]._custom=(0,n.v)(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return o}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:n}=e,s=this.getParsed(t),o=i.getLabelForValue(s.x),r=n.getLabelForValue(s.y),a=s._custom;return{label:e.label,value:"("+o+", "+r+(a?", "+a:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),c=o.axis,h=r.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!s&&this.getParsed(d),u={},p=u[c]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[c]),f=u[h]=s?r.getBasePixel():r.getPixelForValue(i[h]);u.skip=isNaN(p)||isNaN(f),l&&(u.options=a||this.resolveDataElementOptions(d,e.active?"active":n),s&&(u.options.radius=0)),this.updateElement(e,d,u,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const o=s.radius;return"active"!==e&&(s.radius=0),s.radius+=(0,n.v)(i&&i._custom,o),s}}O.id="bubble",O.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},O.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class P extends x{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let o,r,a=t=>+i[t];if((0,n.i)(i[t])){const{key:t="value"}=this._parsing;a=e=>+(0,n.f)(i[e],t)}for(o=t,r=t+e;o<r;++o)s._parsed[o]=a(o)}}_getRotation(){return(0,n.t)(this.options.rotation-90)}_getCircumference(){return(0,n.t)(this.options.circumference)}_getRotationExtents(){let t=n.T,e=-n.T;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,o=s.data,r=this.getMaxBorderWidth()+this.getMaxOffset(o)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-r)/2,0),l=Math.min((0,n.m)(this.options.cutout,a),1),c=this._getRingWeight(this.index),{circumference:h,rotation:d}=this._getRotationExtents(),{ratioX:u,ratioY:p,offsetX:f,offsetY:g}=function(t,e,i){let s=1,o=1,r=0,a=0;if(e<n.T){const l=t,c=l+e,h=Math.cos(l),d=Math.sin(l),u=Math.cos(c),p=Math.sin(c),f=(t,e,s)=>(0,n.p)(t,l,c,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>(0,n.p)(t,l,c,!0)?-1:Math.min(e,e*i,s,s*i),m=f(0,h,u),b=f(n.H,d,p),_=g(n.P,h,u),v=g(n.P+n.H,d,p);s=(m-_)/2,o=(b-v)/2,r=-(m+_)/2,a=-(b+v)/2}return{ratioX:s,ratioY:o,offsetX:r,offsetY:a}}(d,h,l),m=(i.width-r)/u,b=(i.height-r)/p,_=Math.max(Math.min(m,b)/2,0),v=(0,n.n)(this.options.radius,_),y=(v-Math.max(v*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*v,this.offsetY=g*v,s.total=this.calculateTotal(),this.outerRadius=v-y*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-y*c,0),this.updateElements(o,0,o.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,o=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*o/n.T)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.chartArea,a=o.options.animation,l=(r.left+r.right)/2,c=(r.top+r.bottom)/2,h=s&&a.animateScale,d=h?0:this.innerRadius,u=h?0:this.outerRadius,{sharedOptions:p,includeOptions:f}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,s);for(g=e;g<e+i;++g){const e=this._circumference(g,s),i=t[g],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};f&&(o.options=p||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?n.T*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],o=(0,n.o)(e._parsed[t],i.options.locale);return{label:s[t]||"",value:o}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,r,a;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,r=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)a=r.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max((0,n.v)(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}P.id="doughnut",P.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},P.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},P.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const s=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return(0,n.b)(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class D extends x{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:o}=e,r=this.chart._animationsDisabled;let{start:a,count:l}=(0,n.q)(e,s,r);this._drawStart=a,this._drawCount=l,(0,n.w)(e)&&(a=0,l=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!o._decimated,i.points=s;const c=this.resolveDatasetElementOptions(t);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(i,void 0,{animated:!r,options:c},t),this.updateElements(s,a,l,t)}updateElements(t,e,i,s){const o="reset"===s,{iScale:r,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:h,includeOptions:d}=this._getSharedOptions(e,s),u=r.axis,p=a.axis,{spanGaps:f,segment:g}=this.options,m=(0,n.x)(f)?f:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||o||"none"===s;let _=e>0&&this.getParsed(e-1);for(let f=e;f<e+i;++f){const e=t[f],i=this.getParsed(f),v=b?e:{},y=(0,n.k)(i[p]),x=v[u]=r.getPixelForValue(i[u],f),w=v[p]=o||y?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,i,l):i[p],f);v.skip=isNaN(x)||isNaN(w)||y,v.stop=f>0&&Math.abs(i[u]-_[u])>m,g&&(v.parsed=i,v.raw=c.data[f]),d&&(v.options=h||this.resolveDataElementOptions(f,e.active?"active":s)),b||this.updateElement(e,f,v,s),_=i}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}D.id="line",D.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},D.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class L extends x{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],o=(0,n.o)(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:o}}parseObjectData(t,e,i,s){return n.y.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const o="reset"===s,r=this.chart,a=r.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,h=l.yCenter,d=l.getIndexAngle(0)-.5*n.P;let u,p=d;const f=360/this.countVisibleElements();for(u=0;u<e;++u)p+=this._computeAngle(u,s,f);for(u=e;u<e+i;u++){const e=t[u];let i=p,n=p+this._computeAngle(u,s,f),g=r.getDataVisibility(u)?l.getDistanceFromCenterForValue(this.getParsed(u).r):0;p=n,o&&(a.animateScale&&(g=0),a.animateRotate&&(i=n=d));const m={x:c,y:h,innerRadius:0,outerRadius:g,startAngle:i,endAngle:n,options:this.resolveDataElementOptions(u,e.active?"active":s)};this.updateElement(e,u,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?(0,n.t)(this.resolveDataElementOptions(t,e).angle||i):0}}L.id="polarArea",L.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},L.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,n)=>{const s=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,lineWidth:s.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class N extends P{}N.id="pie",N.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class I extends x{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return n.y.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this._cachedMeta.rScale,o="reset"===n;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":n),a=s.getPointPositionForValue(r,this.getParsed(r).r),l=o?s.xCenter:a.x,c=o?s.yCenter:a.y,h={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:i};this.updateElement(e,r,h,n)}}}I.id="radar",I.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},I.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class R{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return(0,n.x)(this.x)&&(0,n.x)(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}R.defaults={},R.defaultRoutes=void 0;const F={values:t=>(0,n.b)(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let o,r=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(o="scientific"),r=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const a=(0,n.z)(Math.abs(r)),l=Math.max(Math.min(-1*Math.floor(a),20),0),c={notation:o,minimumFractionDigits:l,maximumFractionDigits:l};return Object.assign(c,this.options.ticks.format),(0,n.o)(t,s,c)},logarithmic(t,e,i){if(0===t)return"0";const s=t/Math.pow(10,Math.floor((0,n.z)(t)));return 1===s||2===s||5===s?F.numeric.call(this,t,e,i):""}};var H={formatters:F};function B(t,e){const i=t.options.ticks,s=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],r=o.length,a=o[0],l=o[r-1],c=[];if(r>s)return function(t,e,i,n){let s,o=0,r=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===r&&(e.push(t[s]),o++,r=i[o*n])}(e,c,o,r/s),c;const h=function(t,e,i){const s=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),o=e.length/i;if(!s)return Math.max(o,1);const r=(0,n.A)(s);for(let t=0,e=r.length-1;t<e;t++){const e=r[t];if(e>o)return e}return Math.max(o,1)}(o,e,s);if(r>0){let t,i;const s=r>1?Math.round((l-a)/(r-1)):null;for(z(e,c,h,(0,n.k)(s)?0:a-s,a),t=0,i=r-1;t<i;t++)z(e,c,h,o[t],o[t+1]);return z(e,c,h,l,(0,n.k)(s)?e.length:l+s),c}return z(e,c,h),c}function z(t,e,i,s,o){const r=(0,n.v)(s,0),a=Math.min((0,n.v)(o,t.length),t.length);let l,c,h,d=0;for(i=Math.ceil(i),o&&(l=o-s,i=l/Math.floor(l/i)),h=r;h<0;)d++,h=Math.round(r+d*i);for(c=Math.max(r,0);c<a;c++)c===h&&(e.push(t[c]),d++,h=Math.round(r+d*i))}n.d.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:H.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),n.d.route("scale.ticks","color","","color"),n.d.route("scale.grid","color","","borderColor"),n.d.route("scale.grid","borderColor","","borderColor"),n.d.route("scale.title","color","","color"),n.d.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),n.d.describe("scales",{_fallback:"scale"}),n.d.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const W=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function $(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function V(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,r=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(c-o,r-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(s-1))/2,c+=s<e?l:-l,c<o-a||c>r+a)))return c}function q(t){return t.drawTicks?t.tickLength:0}function Y(t,e){if(!t.display)return 0;const i=(0,n.O)(t.font,e),s=(0,n.K)(t.padding);return((0,n.b)(t.text)?t.text.length:1)*i.lineHeight+s.height}function X(t,e,i){let s=(0,n.R)(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class U extends R{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=(0,n.B)(t,Number.POSITIVE_INFINITY),e=(0,n.B)(e,Number.NEGATIVE_INFINITY),i=(0,n.B)(i,Number.POSITIVE_INFINITY),s=(0,n.B)(s,Number.NEGATIVE_INFINITY),{min:(0,n.B)(t,i),max:(0,n.B)(e,s),minDefined:(0,n.g)(t),maxDefined:(0,n.g)(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:o,maxDefined:r}=this.getUserBounds();if(o&&r)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let n=0,l=a.length;n<l;++n)e=a[n].controller.getMinMax(this,t),o||(i=Math.min(i,e.min)),r||(s=Math.max(s,e.max));return i=r&&i>s?s:i,s=o&&i>s?i:s,{min:(0,n.B)(i,(0,n.B)(s,i)),max:(0,n.B)(s,(0,n.B)(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){(0,n.C)(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:o,ticks:r}=this.options,a=r.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=(0,n.D)(this,o,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=a<this.ticks.length;this._convertTicksToLabels(l?$(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),r.display&&(r.autoSkip||"auto"===r.source)&&(this.ticks=B(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){(0,n.C)(this.options.afterUpdate,[this])}beforeSetDimensions(){(0,n.C)(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){(0,n.C)(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),(0,n.C)(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){(0,n.C)(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,o;for(i=0,s=t.length;i<s;i++)o=t[i],o.label=(0,n.C)(e.callback,[o.value,i,t],this)}afterTickToLabelConversion(){(0,n.C)(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){(0,n.C)(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,s=e.minRotation||0,o=e.maxRotation;let r,a,l,c=s;if(!this._isVisible()||!e.display||s>=o||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const h=this._getLabelSizes(),d=h.widest.width,u=h.highest.height,p=(0,n.E)(this.chart.width-d,0,this.maxWidth);r=t.offset?this.maxWidth/i:p/(i-1),d+6>r&&(r=p/(i-(t.offset?.5:1)),a=this.maxHeight-q(t.grid)-e.padding-Y(t.title,this.chart.options.font),l=Math.sqrt(d*d+u*u),c=(0,n.F)(Math.min(Math.asin((0,n.E)((h.highest.height+6)/r,-1,1)),Math.asin((0,n.E)(a/l,-1,1))-Math.asin((0,n.E)(u/l,-1,1)))),c=Math.max(s,Math.min(o,c))),this.labelRotation=c}afterCalculateLabelRotation(){(0,n.C)(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){(0,n.C)(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:o}}=this,r=this._isVisible(),a=this.isHorizontal();if(r){const r=Y(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=q(o)+r):(t.height=this.maxHeight,t.width=q(o)+r),i.display&&this.ticks.length){const{first:e,last:s,widest:o,highest:r}=this._getLabelSizes(),l=2*i.padding,c=(0,n.t)(this.labelRotation),h=Math.cos(c),d=Math.sin(c);if(a){const e=i.mirror?0:d*o.width+h*r.height;t.height=Math.min(this.maxHeight,t.height+e+l)}else{const e=i.mirror?0:h*o.width+d*r.height;t.width=Math.min(this.maxWidth,t.width+e+l)}this._calculatePadding(e,s,d,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,d=0;a?l?(h=n*t.width,d=i*e.height):(h=i*t.height,d=n*e.width):"start"===s?d=e.width:"end"===s?h=t.width:"inner"!==s&&(h=t.width/2,d=e.width/2),this.paddingLeft=Math.max((h-r+o)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-c+o)*this.width/(this.width-c),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){(0,n.C)(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)(0,n.k)(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=$(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:s}=this,o=[],r=[];let a,l,c,h,d,u,p,f,g,m,b,_=0,v=0;for(a=0;a<e;++a){if(h=t[a].label,d=this._resolveTickFontOptions(a),i.font=u=d.string,p=s[u]=s[u]||{data:{},gc:[]},f=d.lineHeight,g=m=0,(0,n.k)(h)||(0,n.b)(h)){if((0,n.b)(h))for(l=0,c=h.length;l<c;++l)b=h[l],(0,n.k)(b)||(0,n.b)(b)||(g=(0,n.G)(i,p.data,p.gc,g,b),m+=f)}else g=(0,n.G)(i,p.data,p.gc,g,h),m=f;o.push(g),r.push(m),_=Math.max(g,_),v=Math.max(m,v)}!function(t,e){(0,n.Q)(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(s,e);const y=o.indexOf(_),x=r.indexOf(v),w=t=>({width:o[t]||0,height:r[t]||0});return{first:w(0),last:w(e-1),widest:w(y),highest:w(x),widths:o,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return(0,n.I)(this._alignToPixels?(0,n.J)(this.chart,e,0):e)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return(0,n.h)(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=(i=this.chart.getContext(),s=this,(0,n.h)(i,{scale:s,type:"scale"})));var i,s}_tickSize(){const t=this.options.ticks,e=(0,n.t)(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),o=this._getLabelSizes(),r=t.autoSkipPadding||0,a=o?o.widest.width+r:0,l=o?o.highest.height+r:0;return this.isHorizontal()?l*i>a*s?a/i:l/s:l*s<a*i?l/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:o,position:r}=s,a=o.offset,l=this.isHorizontal(),c=this.ticks.length+(a?1:0),h=q(o),d=[],u=o.setContext(this.getContext()),p=u.drawBorder?u.borderWidth:0,f=p/2,g=function(t){return(0,n.J)(i,t,p)};let m,b,_,v,y,x,w,k,j,S,T,C;if("top"===r)m=g(this.bottom),x=this.bottom-h,k=m-f,S=g(t.top)+f,C=t.bottom;else if("bottom"===r)m=g(this.top),S=t.top,C=g(t.bottom)-f,x=m+f,k=this.top+h;else if("left"===r)m=g(this.right),y=this.right-h,w=m-f,j=g(t.left)+f,T=t.right;else if("right"===r)m=g(this.left),j=t.left,T=g(t.right)-f,y=m+f,w=this.left+h;else if("x"===e){if("center"===r)m=g((t.top+t.bottom)/2+.5);else if((0,n.i)(r)){const t=Object.keys(r)[0],e=r[t];m=g(this.chart.scales[t].getPixelForValue(e))}S=t.top,C=t.bottom,x=m+f,k=x+h}else if("y"===e){if("center"===r)m=g((t.left+t.right)/2);else if((0,n.i)(r)){const t=Object.keys(r)[0],e=r[t];m=g(this.chart.scales[t].getPixelForValue(e))}y=m-f,w=y-h,j=t.left,T=t.right}const M=(0,n.v)(s.ticks.maxTicksLimit,c),A=Math.max(1,Math.ceil(c/M));for(b=0;b<c;b+=A){const t=o.setContext(this.getContext(b)),e=t.lineWidth,s=t.color,r=t.borderDash||[],c=t.borderDashOffset,h=t.tickWidth,u=t.tickColor,p=t.tickBorderDash||[],f=t.tickBorderDashOffset;_=V(this,b,a),void 0!==_&&(v=(0,n.J)(i,_,e),l?y=w=j=T=v:x=k=S=C=v,d.push({tx1:y,ty1:x,tx2:w,ty2:k,x1:j,y1:S,x2:T,y2:C,width:e,color:s,borderDash:r,borderDashOffset:c,tickWidth:h,tickColor:u,tickBorderDash:p,tickBorderDashOffset:f}))}return this._ticksLength=c,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:o}=i,r=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:c,padding:h,mirror:d}=o,u=q(i.grid),p=u+h,f=d?-h:p,g=-(0,n.t)(this.labelRotation),m=[];let b,_,v,y,x,w,k,j,S,T,C,M,A="middle";if("top"===s)w=this.bottom-f,k=this._getXAxisLabelAlignment();else if("bottom"===s)w=this.top+f,k=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(u);k=t.textAlign,x=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(u);k=t.textAlign,x=t.x}else if("x"===e){if("center"===s)w=(t.top+t.bottom)/2+p;else if((0,n.i)(s)){const t=Object.keys(s)[0],e=s[t];w=this.chart.scales[t].getPixelForValue(e)+p}k=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)x=(t.left+t.right)/2-p;else if((0,n.i)(s)){const t=Object.keys(s)[0],e=s[t];x=this.chart.scales[t].getPixelForValue(e)}k=this._getYAxisLabelAlignment(u).textAlign}"y"===e&&("start"===l?A="top":"end"===l&&(A="bottom"));const E=this._getLabelSizes();for(b=0,_=a.length;b<_;++b){v=a[b],y=v.label;const t=o.setContext(this.getContext(b));j=this.getPixelForTick(b)+o.labelOffset,S=this._resolveTickFontOptions(b),T=S.lineHeight,C=(0,n.b)(y)?y.length:1;const e=C/2,i=t.color,l=t.textStrokeColor,h=t.textStrokeWidth;let u,p=k;if(r?(x=j,"inner"===k&&(p=b===_-1?this.options.reverse?"left":"right":0===b?this.options.reverse?"right":"left":"center"),M="top"===s?"near"===c||0!==g?-C*T+T/2:"center"===c?-E.highest.height/2-e*T+T:-E.highest.height+T/2:"near"===c||0!==g?T/2:"center"===c?E.highest.height/2-e*T:E.highest.height-C*T,d&&(M*=-1)):(w=j,M=(1-C)*T/2),t.showLabelBackdrop){const e=(0,n.K)(t.backdropPadding),i=E.heights[b],s=E.widths[b];let o=w+M-e.top,r=x-e.left;switch(A){case"middle":o-=i/2;break;case"bottom":o-=i}switch(k){case"center":r-=s/2;break;case"right":r-=s}u={left:r,top:o,width:s+e.width,height:i+e.height,color:t.backdropColor}}m.push({rotation:g,label:y,font:S,color:i,strokeColor:l,strokeWidth:h,textOffset:M,textAlign:p,textBaseline:A,translation:[x,w],backdrop:u})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-(0,n.t)(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+s,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));if(i>=0){return e.setContext(this.getContext(i)).lineWidth}return 0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const r=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,s=i.setContext(this.getContext()),o=i.drawBorder?s.borderWidth:0;if(!o)return;const r=i.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,c,h,d;this.isHorizontal()?(l=(0,n.J)(t,this.left,o)-o/2,c=(0,n.J)(t,this.right,r)+r/2,h=d=a):(h=(0,n.J)(t,this.top,o)-o/2,d=(0,n.J)(t,this.bottom,r)+r/2,l=c=a),e.save(),e.lineWidth=s.borderWidth,e.strokeStyle=s.borderColor,e.beginPath(),e.moveTo(l,h),e.lineTo(c,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&(0,n.L)(e,i);const s=this._labelItems||(this._labelItems=this._computeLabelItems(t));let o,r;for(o=0,r=s.length;o<r;++o){const t=s[o],i=t.font,r=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height));let a=t.textOffset;(0,n.M)(e,r,0,a,i,t)}i&&(0,n.N)(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const o=(0,n.O)(i.font),r=(0,n.K)(i.padding),a=i.align;let l=o.lineHeight/2;"bottom"===e||"center"===e||(0,n.i)(e)?(l+=r.bottom,(0,n.b)(i.text)&&(l+=o.lineHeight*(i.text.length-1))):l+=r.top;const{titleX:c,titleY:h,maxWidth:d,rotation:u}=function(t,e,i,s){const{top:o,left:r,bottom:a,right:l,chart:c}=t,{chartArea:h,scales:d}=c;let u,p,f,g=0;const m=a-o,b=l-r;if(t.isHorizontal()){if(p=(0,n.S)(s,r,l),(0,n.i)(i)){const t=Object.keys(i)[0],n=i[t];f=d[t].getPixelForValue(n)+m-e}else f="center"===i?(h.bottom+h.top)/2+m-e:W(t,i,e);u=l-r}else{if((0,n.i)(i)){const t=Object.keys(i)[0],n=i[t];p=d[t].getPixelForValue(n)-b+e}else p="center"===i?(h.left+h.right)/2-b+e:W(t,i,e);f=(0,n.S)(s,a,o),g="left"===i?-n.H:n.H}return{titleX:p,titleY:f,maxWidth:u,rotation:g}}(this,l,e,a);(0,n.M)(t,i.text,0,0,o,{color:i.color,maxWidth:d,rotation:u,textAlign:X(a,e,s),textBaseline:"middle",translation:[c,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=(0,n.v)(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===U.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){const e=this.options.ticks.setContext(this.getContext(t));return(0,n.O)(e.font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class K{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,o=t.id,r=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in s||(s[o]=t,function(t,e,i){const s=(0,n.V)(Object.create(null),[i?n.d.get(i):{},n.d.get(e),t.defaults]);n.d.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),o=s.pop(),r=[t].concat(s).join("."),a=e[i].split("."),l=a.pop(),c=a.join(".");n.d.route(r,o,c,l)}))}(e,t.defaultRoutes);t.descriptors&&n.d.describe(e,t.descriptors)}(t,r,i),this.override&&n.d.override(t.id,t.overrides)),r}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in n.d[s]&&(delete n.d[s][i],this.override&&delete n.U[i])}}var Q=new class{constructor(){this.controllers=new K(x,"datasets",!0),this.elements=new K(R,"elements"),this.plugins=new K(Object,"plugins"),this.scales=new K(U,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):(0,n.Q)(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const s=(0,n.W)(t);(0,n.C)(i["before"+s],[],i),e[t](i),(0,n.C)(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}};class G extends x{update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:o,count:r}=(0,n.q)(e,i,s);if(this._drawStart=o,this._drawCount=r,(0,n.w)(e)&&(o=0,r=i.length),this.options.showLine){const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:r},t)}this.updateElements(i,o,r,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=Q.getElement("line")),super.addElements()}updateElements(t,e,i,s){const o="reset"===s,{iScale:r,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,h=this.resolveDataElementOptions(e,s),d=this.getSharedOptions(h),u=this.includeOptions(s,d),p=r.axis,f=a.axis,{spanGaps:g,segment:m}=this.options,b=(0,n.x)(g)?g:Number.POSITIVE_INFINITY,_=this.chart._animationsDisabled||o||"none"===s;let v=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),g=_?e:{},y=(0,n.k)(i[f]),x=g[p]=r.getPixelForValue(i[p],h),w=g[f]=o||y?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,i,l):i[f],h);g.skip=isNaN(x)||isNaN(w)||y,g.stop=h>0&&Math.abs(i[p]-v[p])>b,m&&(g.parsed=i,g.raw=c.data[h]),u&&(g.options=d||this.resolveDataElementOptions(h,e.active?"active":s)),_||this.updateElement(e,h,g,s),v=i}this.updateSharedOptions(d,s,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const s=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,s,o)/2}}G.id="scatter",G.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},G.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var J=Object.freeze({__proto__:null,BarController:E,BubbleController:O,DoughnutController:P,LineController:D,PolarAreaController:L,PieController:N,RadarController:I,ScatterController:G});function Z(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class tt{constructor(t){this.options=t||{}}init(t){}formats(){return Z()}parse(t,e){return Z()}format(t,e){return Z()}add(t,e,i){return Z()}diff(t,e,i){return Z()}startOf(t,e,i){return Z()}endOf(t,e){return Z()}}tt.override=function(t){Object.assign(tt.prototype,t)};var et={_date:tt};function it(t,e,i,s){const{controller:o,data:r,_sorted:a}=t,l=o._cachedMeta.iScale;if(l&&e===l.axis&&"r"!==e&&a&&r.length){const t=l._reversePixels?n.Y:n.Z;if(!s)return t(r,e,i);if(o._sharedOptions){const n=r[0],s="function"==typeof n.getRange&&n.getRange(e);if(s){const n=t(r,e,i-s),o=t(r,e,i+s);return{lo:n.lo,hi:o.hi}}}}return{lo:0,hi:r.length-1}}function nt(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:c}=it(o[t],e,r,s);for(let t=l;t<=c;++t){const e=a[t];e.skip||n(e,i,t)}}}function st(t,e,i,s,o){const r=[];if(!o&&!t.isPointInArea(e))return r;return nt(t,i,e,(function(i,a,l){(o||(0,n.$)(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&r.push({element:i,datasetIndex:a,index:l})}),!0),r}function ot(t,e,i,n,s,o){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return nt(t,i,e,(function(i,c,h){const d=i.inRange(e.x,e.y,s);if(n&&!d)return;const u=i.getCenterPoint(s);if(!(!!o||t.isPointInArea(u))&&!d)return;const p=a(e,u);p<l?(r=[{element:i,datasetIndex:c,index:h}],l=p):p===l&&r.push({element:i,datasetIndex:c,index:h})})),r}function rt(t,e,i,s,o,r){return r||t.isPointInArea(e)?"r"!==i||s?ot(t,e,i,s,o,r):function(t,e,i,s){let o=[];return nt(t,i,e,(function(t,i,r){const{startAngle:a,endAngle:l}=t.getProps(["startAngle","endAngle"],s),{angle:c}=(0,n.a0)(t,{x:e.x,y:e.y});(0,n.p)(c,a,l)&&o.push({element:t,datasetIndex:i,index:r})})),o}(t,e,i,o):[]}function at(t,e,i,n,s){const o=[],r="x"===i?"inXRange":"inYRange";let a=!1;return nt(t,i,e,((t,n,l)=>{t[r](e[i],s)&&(o.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,s))})),n&&!a?[]:o}var lt={evaluateInteractionItems:nt,modes:{index(t,e,i,s){const o=(0,n.X)(e,t),r=i.axis||"x",a=i.includeInvisible||!1,l=i.intersect?st(t,o,r,s,a):rt(t,o,r,!1,s,a),c=[];return l.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=l[0].index,i=t.data[e];i&&!i.skip&&c.push({element:i,datasetIndex:t.index,index:e})})),c):[]},dataset(t,e,i,s){const o=(0,n.X)(e,t),r=i.axis||"xy",a=i.includeInvisible||!1;let l=i.intersect?st(t,o,r,s,a):rt(t,o,r,!1,s,a);if(l.length>0){const e=l[0].datasetIndex,i=t.getDatasetMeta(e).data;l=[];for(let t=0;t<i.length;++t)l.push({element:i[t],datasetIndex:e,index:t})}return l},point:(t,e,i,s)=>st(t,(0,n.X)(e,t),i.axis||"xy",s,i.includeInvisible||!1),nearest(t,e,i,s){const o=(0,n.X)(e,t),r=i.axis||"xy",a=i.includeInvisible||!1;return rt(t,o,r,i.intersect,s,a)},x:(t,e,i,s)=>at(t,(0,n.X)(e,t),"x",i.intersect,s),y:(t,e,i,s)=>at(t,(0,n.X)(e,t),"y",i.intersect,s)}};const ct=["left","top","right","bottom"];function ht(t,e){return t.filter((t=>t.pos===e))}function dt(t,e){return t.filter((t=>-1===ct.indexOf(t.pos)&&t.box.axis===e))}function ut(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function pt(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!ct.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,r,a;for(o=0,r=t.length;o<r;++o){a=t[o];const{fullSize:r}=a.box,l=i[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*n:r&&e.availableWidth,a.height=s):(a.width=n,a.height=c?c*s:r&&e.availableHeight)}return i}function ft(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function gt(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function mt(t,e,i,s){const{pos:o,box:r}=i,a=t.maxPadding;if(!(0,n.i)(o)){i.size&&(t[o]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?r.height:r.width),i.size=e.size/e.count,t[o]+=i.size}r.getPadding&&gt(a,r.getPadding());const l=Math.max(0,e.outerWidth-ft(a,t,"left","right")),c=Math.max(0,e.outerHeight-ft(a,t,"top","bottom")),h=l!==t.w,d=c!==t.h;return t.w=l,t.h=c,i.horizontal?{same:h,other:d}:{same:d,other:h}}function bt(t,e){const i=e.maxPadding;function n(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}return n(t?["left","right"]:["top","bottom"])}function _t(t,e,i,n){const s=[];let o,r,a,l,c,h;for(o=0,r=t.length,c=0;o<r;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,bt(a.horizontal,e));const{same:r,other:d}=mt(e,i,a,n);c|=r&&s.length,h=h||d,l.fullSize||s.push(a)}return c&&_t(s,e,i,n)||h}function vt(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function yt(t,e,i,s){const o=i.padding;let{x:r,y:a}=e;for(const l of t){const t=l.box,c=s[l.stack]||{count:1,placed:0,weight:1},h=l.stackWeight/c.weight||1;if(l.horizontal){const s=e.w*h,r=c.size||t.height;(0,n.j)(c.start)&&(a=c.start),t.fullSize?vt(t,o.left,a,i.outerWidth-o.right-o.left,r):vt(t,e.left+c.placed,a,s,r),c.start=a,c.placed+=s,a=t.bottom}else{const s=e.h*h,a=c.size||t.width;(0,n.j)(c.start)&&(r=c.start),t.fullSize?vt(t,r,o.top,a,i.outerHeight-o.bottom-o.top):vt(t,r,e.top+c.placed,a,s),c.start=r,c.placed+=s,r=t.right}}e.x=r,e.y=a}n.d.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var xt={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const o=(0,n.K)(t.options.layout.padding),r=Math.max(e-o.width,0),a=Math.max(i-o.height,0),l=function(t){const e=function(t){const e=[];let i,n,s,o,r,a;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:r,stackWeight:a=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&o+r,stackWeight:a});return e}(t),i=ut(e.filter((t=>t.box.fullSize)),!0),n=ut(ht(e,"left"),!0),s=ut(ht(e,"right")),o=ut(ht(e,"top"),!0),r=ut(ht(e,"bottom")),a=dt(e,"x"),l=dt(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:ht(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(r).concat(a)}}(t.boxes),c=l.vertical,h=l.horizontal;(0,n.Q)(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const d=c.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,u=Object.freeze({outerWidth:e,outerHeight:i,padding:o,availableWidth:r,availableHeight:a,vBoxMaxWidth:r/2/d,hBoxMaxHeight:a/2}),p=Object.assign({},o);gt(p,(0,n.K)(s));const f=Object.assign({maxPadding:p,w:r,h:a,x:o.left,y:o.top},o),g=pt(c.concat(h),u);_t(l.fullSize,f,u,g),_t(c,f,u,g),_t(h,f,u,g)&&_t(c,f,u,g),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),yt(l.leftAndTop,f,u,g),f.x+=f.w,f.y+=f.h,yt(l.rightAndBottom,f,u,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},(0,n.Q)(l.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class wt{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class kt extends wt{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const jt="$chartjs",St={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Tt=t=>null===t||""===t;const Ct=!!n.a5&&{passive:!0};function Mt(t,e,i){t.canvas.removeEventListener(e,i,Ct)}function At(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Et(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||At(i.addedNodes,n),e=e&&!At(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function Ot(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||At(i.removedNodes,n),e=e&&!At(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const Pt=new Map;let Dt=0;function Lt(){const t=window.devicePixelRatio;t!==Dt&&(Dt=t,Pt.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Nt(t,e,i){const s=t.canvas,o=s&&(0,n.a2)(s);if(!o)return;const r=(0,n.a4)(((t,e)=>{const n=o.clientWidth;i(t,e),n<o.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||r(i,n)}));return a.observe(o),function(t,e){Pt.size||window.addEventListener("resize",Lt),Pt.set(t,e)}(t,r),a}function It(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Pt.delete(t),Pt.size||window.removeEventListener("resize",Lt)}(t)}function Rt(t,e,i){const s=t.canvas,o=(0,n.a4)((e=>{null!==t.ctx&&i(function(t,e){const i=St[t.type]||t.type,{x:s,y:o}=(0,n.X)(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==o?o:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,Ct)}(s,e,o),o}class Ft extends wt{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),o=t.getAttribute("width");if(t[jt]={initial:{height:s,width:o,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",Tt(o)){const e=(0,n.a3)(t,"width");void 0!==e&&(t.width=e)}if(Tt(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=(0,n.a3)(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[jt])return!1;const i=e[jt].initial;["height","width"].forEach((t=>{const s=i[t];(0,n.k)(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e[jt],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:Et,detach:Ot,resize:Nt}[e]||Rt;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];if(!n)return;({attach:It,detach:It,resize:It}[e]||Mt)(t,e,n),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return(0,n.a1)(t,e,i,s)}isAttached(t){const e=(0,n.a2)(t);return!(!e||!e.isConnected)}}function Ht(t){return!(0,n.a6)()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?kt:Ft}class Bt{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const o of t){const t=o.plugin,r=t[i],a=[e,s,o.options];if(!1===(0,n.C)(r,a,t)&&s.cancelable)return!1}return!0}invalidate(){(0,n.k)(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=(0,n.v)(i.options&&i.options.plugins,{}),o=function(t){const e={},i=[],n=Object.keys(Q.plugins.items);for(let t=0;t<n.length;t++)i.push(Q.getPlugin(n[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const n=s[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},n,s){const o=[],r=t.getContext();for(const a of e){const e=a.id,l=zt(n[e],s);null!==l&&o.push({plugin:a,options:Wt(t.config,{plugin:a,local:i[e]},l,r)})}return o}(t,o,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function zt(t,e){return e||!1!==t?!0===t?{}:t:null}function Wt(t,{plugin:e,local:i},n,s){const o=t.pluginScopeKeys(e),r=t.getOptionScopes(n,o);return i&&e.defaults&&r.push(e.defaults),t.createResolver(r,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function $t(t,e){const i=n.d.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Vt(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function qt(t){const e=t.options||(t.options={});e.plugins=(0,n.v)(e.plugins,{}),e.scales=function(t,e){const i=n.U[t.type]||{scales:{}},s=e.scales||{},o=$t(t.type,e),r=Object.create(null),a=Object.create(null);return Object.keys(s).forEach((t=>{const e=s[t];if(!(0,n.i)(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const l=Vt(t,e),c=function(t,e){return t===e?"_index_":"_value_"}(l,o),h=i.scales||{};r[l]=r[l]||t,a[t]=(0,n.ac)(Object.create(null),[{axis:l},e,h[l],h[c]])})),t.data.datasets.forEach((i=>{const o=i.type||t.type,l=i.indexAxis||$t(o,e),c=(n.U[o]||{}).scales||{};Object.keys(c).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,l),o=i[e+"AxisID"]||r[e]||e;a[o]=a[o]||Object.create(null),(0,n.ac)(a[o],[{axis:e},s[o],c[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];(0,n.ac)(e,[n.d.scales[e.type],n.d.scale])})),a}(t,e)}function Yt(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Xt=new Map,Ut=new Set;function Kt(t,e){let i=Xt.get(t);return i||(i=e(),Xt.set(t,i),Ut.add(i)),i}const Qt=(t,e,i)=>{const s=(0,n.f)(e,i);void 0!==s&&t.add(s)};class Gt{constructor(t){this._config=function(t){return(t=t||{}).data=Yt(t.data),qt(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Yt(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),qt(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Kt(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Kt(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Kt(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Kt(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:s,type:o}=this,r=this._cachedScopes(t,i),a=r.get(e);if(a)return a;const l=new Set;e.forEach((e=>{t&&(l.add(t),e.forEach((e=>Qt(l,t,e)))),e.forEach((t=>Qt(l,s,t))),e.forEach((t=>Qt(l,n.U[o]||{},t))),e.forEach((t=>Qt(l,n.d,t))),e.forEach((t=>Qt(l,n.a7,t)))}));const c=Array.from(l);return 0===c.length&&c.push(Object.create(null)),Ut.has(e)&&r.set(e,c),c}chartOptionScopes(){const{options:t,type:e}=this;return[t,n.U[e]||{},n.d.datasets[e]||{},{type:e},n.d,n.a7]}resolveNamedOptions(t,e,i,s=[""]){const o={$shared:!0},{resolver:r,subPrefixes:a}=Jt(this._resolverCache,t,s);let l=r;if(function(t,e){const{isScriptable:i,isIndexable:s}=(0,n.ab)(t);for(const o of e){const e=i(o),r=s(o),a=(r||e)&&t[o];if(e&&((0,n.a8)(a)||Zt(a))||r&&(0,n.b)(a))return!0}return!1}(r,e)){o.$shared=!1,i=(0,n.a8)(i)?i():i;const e=this.createResolver(t,i,a);l=(0,n.a9)(r,i,e)}for(const t of e)o[t]=l[t];return o}createResolver(t,e,i=[""],s){const{resolver:o}=Jt(this._resolverCache,t,i);return(0,n.i)(e)?(0,n.a9)(o,e,void 0,s):o}}function Jt(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const o=i.join();let r=s.get(o);if(!r){r={resolver:(0,n.aa)(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(o,r)}return r}const Zt=t=>(0,n.i)(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||(0,n.a8)(t[i])),!1);const te=["top","bottom","left","right","chartArea"];function ee(t,e){return"top"===t||"bottom"===t||-1===te.indexOf(t)&&"x"===e}function ie(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function ne(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),(0,n.C)(i&&i.onComplete,[t],e)}function se(t){const e=t.chart,i=e.options.animation;(0,n.C)(i&&i.onProgress,[t],e)}function oe(t){return(0,n.a6)()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const re={},ae=t=>{const e=oe(t);return Object.values(re).filter((t=>t.canvas===e)).pop()};function le(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}class ce{constructor(t,e){const i=this.config=new Gt(e),o=oe(t),r=ae(o);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const a=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||Ht(o)),this.platform.updateConfig(i);const l=this.platform.acquireContext(o,a.aspectRatio),c=l&&l.canvas,h=c&&c.height,d=c&&c.width;this.id=(0,n.ad)(),this.ctx=l,this.canvas=c,this.width=d,this.height=h,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Bt,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=(0,n.ae)((t=>this.update(t)),a.resizeDelay||0),this._dataChanges=[],re[this.id]=this,l&&c?(s.listen(this,"complete",ne),s.listen(this,"progress",se),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:o}=this;return(0,n.k)(t)?e&&o?o:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():(0,n.af)(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return(0,n.ag)(this.canvas,this.ctx),this}stop(){return s.stop(this),this}resize(t,e){s.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,o=i.maintainAspectRatio&&this.aspectRatio,r=this.platform.getMaximumSize(s,t,e,o),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=r.width,this.height=r.height,this._aspectRatio=this.aspectRatio,(0,n.af)(this,a,!0)&&(this.notifyPlugins("resize",{size:r}),(0,n.C)(i.onResize,[this,r],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const t=this.options.scales||{};(0,n.Q)(t,((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let o=[];e&&(o=o.concat(Object.keys(e).map((t=>{const i=e[t],n=Vt(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),(0,n.Q)(o,(e=>{const o=e.options,r=o.id,a=Vt(r,o),l=(0,n.v)(o.type,e.dtype);void 0!==o.position&&ee(o.position,a)===ee(e.dposition)||(o.position=e.dposition),s[r]=!0;let c=null;if(r in i&&i[r].type===l)c=i[r];else{c=new(Q.getScale(l))({id:r,type:l,ctx:this.ctx,chart:this}),i[c.id]=c}c.init(o,t)})),(0,n.Q)(s,((t,e)=>{t||delete i[e]})),(0,n.Q)(i,(t=>{xt.configure(this,t,t.options),xt.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(ie("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let o=this.getDatasetMeta(i);const r=s.type||this.config.type;if(o.type&&o.type!==r&&(this._destroyDatasetMeta(i),o=this.getDatasetMeta(i)),o.type=r,o.indexAxis=s.indexAxis||$t(r,this.options),o.order=s.order||0,o.index=i,o.label=""+s.label,o.visible=this.isDatasetVisible(i),o.controller)o.controller.updateIndex(i),o.controller.linkScales();else{const e=Q.getController(r),{datasetElementType:s,dataElementType:a}=n.d.datasets[r];Object.assign(e.prototype,{dataElementType:Q.getElement(a),datasetElementType:s&&Q.getElement(s)}),o.controller=new e(this,i),t.push(o.controller)}}return this._updateMetasets(),t}_resetElements(){(0,n.Q)(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let r=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===o.indexOf(e);e.buildOrUpdateElements(i),r=Math.max(+e.getMaxOverflow(),r)}r=this._minPadding=i.layout.autoPadding?r:0,this._updateLayout(r),s||(0,n.Q)(o,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ie("z","_idx"));const{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){(0,n.Q)(this.scales,(t=>{xt.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);(0,n.ah)(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e){le(t,n,"_removeElements"===i?-s:s)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!(0,n.ah)(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;xt.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],(0,n.Q)(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,(0,n.a8)(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(s.has(this)?this.attached&&!s.running(this)&&s.start(this):(this.draw(),ne({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,o=this.chartArea,r={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",r)&&(s&&(0,n.L)(e,{left:!1===i.left?0:o.left-i.left,right:!1===i.right?this.width:o.right+i.right,top:!1===i.top?0:o.top-i.top,bottom:!1===i.bottom?this.height:o.bottom+i.bottom}),t.controller.draw(),s&&(0,n.N)(e),r.cancelable=!1,this.notifyPlugins("afterDatasetDraw",r))}isPointInArea(t){return(0,n.$)(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const s=lt.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=(0,n.h)(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",o=this.getDatasetMeta(t),r=o.controller._resolveAnimations(void 0,s);(0,n.j)(e)?(o.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),r.update(o,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),s.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),(0,n.ag)(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete re[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};(0,n.Q)(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const r=()=>{n("attach",r),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",r)},e.isAttached(this.canvas)?r():o()}unbindEvents(){(0,n.Q)(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},(0,n.Q)(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,r,a;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){o=t[r];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!(0,n.ai)(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),r=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),r.length&&n.mode&&this.updateHoverStyle(r,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:o}=this,r=e,a=this._getActiveElements(t,s,i,r),l=(0,n.aj)(t),c=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,l);i&&(this._lastEvent=null,(0,n.C)(o.onHover,[t,a,this],this),l&&(0,n.C)(o.onClick,[t,a,this],this));const h=!(0,n.ai)(a,s);return(h||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=c,h}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}const he=()=>(0,n.Q)(ce.instances,(t=>t._plugins.invalidate())),de=!0;function ue(t,e,i){const{startAngle:s,pixelMargin:o,x:r,y:a,outerRadius:l,innerRadius:c}=e;let h=o/l;t.beginPath(),t.arc(r,a,l,s-h,i+h),c>o?(h=o/c,t.arc(r,a,c,i+h,s-h,!0)):t.arc(r,a,o,i+n.H,s-n.H),t.closePath(),t.clip()}function pe(t,e,i,s){const o=(r=t.options.borderRadius,(0,n.al)(r,["outerStart","outerEnd","innerStart","innerEnd"]));var r;const a=(i-e)/2,l=Math.min(a,s*e/2),c=t=>{const e=(i-Math.min(a,t))*s/2;return(0,n.E)(t,0,Math.min(a,e))};return{outerStart:c(o.outerStart),outerEnd:c(o.outerEnd),innerStart:(0,n.E)(o.innerStart,0,l),innerEnd:(0,n.E)(o.innerEnd,0,l)}}function fe(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function ge(t,e,i,s,o,r){const{x:a,y:l,startAngle:c,pixelMargin:h,innerRadius:d}=e,u=Math.max(e.outerRadius+s+i-h,0),p=d>0?d+s+i+h:0;let f=0;const g=o-c;if(s){const t=((d>0?d-s:0)+(u>0?u-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const m=(g-Math.max(.001,g*u-i/n.P)/u)/2,b=c+m+f,_=o-m-f,{outerStart:v,outerEnd:y,innerStart:x,innerEnd:w}=pe(e,p,u,_-b),k=u-v,j=u-y,S=b+v/k,T=_-y/j,C=p+x,M=p+w,A=b+x/C,E=_-w/M;if(t.beginPath(),r){if(t.arc(a,l,u,S,T),y>0){const e=fe(j,T,a,l);t.arc(e.x,e.y,y,T,_+n.H)}const e=fe(M,_,a,l);if(t.lineTo(e.x,e.y),w>0){const e=fe(M,E,a,l);t.arc(e.x,e.y,w,_+n.H,E+Math.PI)}if(t.arc(a,l,p,_-w/p,b+x/p,!0),x>0){const e=fe(C,A,a,l);t.arc(e.x,e.y,x,A+Math.PI,b-n.H)}const i=fe(k,b,a,l);if(t.lineTo(i.x,i.y),v>0){const e=fe(k,S,a,l);t.arc(e.x,e.y,v,b-n.H,S)}}else{t.moveTo(a,l);const e=Math.cos(S)*u+a,i=Math.sin(S)*u+l;t.lineTo(e,i);const n=Math.cos(T)*u+a,s=Math.sin(T)*u+l;t.lineTo(n,s)}t.closePath()}function me(t,e,i,s,o,r){const{options:a}=e,{borderWidth:l,borderJoinStyle:c}=a,h="inner"===a.borderAlign;l&&(h?(t.lineWidth=2*l,t.lineJoin=c||"round"):(t.lineWidth=l,t.lineJoin=c||"bevel"),e.fullCircles&&function(t,e,i){const{x:s,y:o,startAngle:r,pixelMargin:a,fullCircles:l}=e,c=Math.max(e.outerRadius-a,0),h=e.innerRadius+a;let d;for(i&&ue(t,e,r+n.T),t.beginPath(),t.arc(s,o,h,r+n.T,r,!0),d=0;d<l;++d)t.stroke();for(t.beginPath(),t.arc(s,o,c,r,r+n.T),d=0;d<l;++d)t.stroke()}(t,e,h),h&&ue(t,e,o),ge(t,e,i,s,o,r),t.stroke())}Object.defineProperties(ce,{defaults:{enumerable:de,value:n.d},instances:{enumerable:de,value:re},overrides:{enumerable:de,value:n.U},registry:{enumerable:de,value:Q},version:{enumerable:de,value:"3.9.1"},getChart:{enumerable:de,value:ae},register:{enumerable:de,value:(...t)=>{Q.add(...t),he()}},unregister:{enumerable:de,value:(...t)=>{Q.remove(...t),he()}}});class be extends R{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:o,distance:r}=(0,n.a0)(s,{x:t,y:e}),{startAngle:a,endAngle:l,innerRadius:c,outerRadius:h,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=this.options.spacing/2,p=(0,n.v)(d,l-a)>=n.T||(0,n.p)(o,a,l),f=(0,n.ak)(r,c+u,h+u);return p&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:a,spacing:l}=this.options,c=(n+s)/2,h=(o+r+l+a)/2;return{x:e+Math.cos(c)*h,y:i+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/2,o=(e.spacing||0)/2,r=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>n.T?Math.floor(i/n.T):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let a=0;if(s){a=s/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*a,Math.sin(e)*a),this.circumference>=n.P&&(a=s)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const l=function(t,e,i,s,o){const{fullCircles:r,startAngle:a,circumference:l}=e;let c=e.endAngle;if(r){ge(t,e,i,s,a+n.T,o);for(let e=0;e<r;++e)t.fill();isNaN(l)||(c=a+l%n.T,l%n.T==0&&(c+=n.T))}return ge(t,e,i,s,c,o),t.fill(),c}(t,this,a,o,r);me(t,this,a,o,l,r),t.restore()}}function _e(t,e,i=e){t.lineCap=(0,n.v)(i.borderCapStyle,e.borderCapStyle),t.setLineDash((0,n.v)(i.borderDash,e.borderDash)),t.lineDashOffset=(0,n.v)(i.borderDashOffset,e.borderDashOffset),t.lineJoin=(0,n.v)(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=(0,n.v)(i.borderWidth,e.borderWidth),t.strokeStyle=(0,n.v)(i.borderColor,e.borderColor)}function ve(t,e,i){t.lineTo(i.x,i.y)}function ye(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:r,end:a}=e,l=Math.max(s,r),c=Math.min(o,a),h=s<r&&o<r||s>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:c<l&&!h?n+c-l:c-l}}function xe(t,e,i,s){const{points:o,options:r}=e,{count:a,start:l,loop:c,ilen:h}=ye(o,i,s),d=function(t){return t.stepped?n.as:t.tension||"monotone"===t.cubicInterpolationMode?n.at:ve}(r);let u,p,f,{move:g=!0,reverse:m}=s||{};for(u=0;u<=h;++u)p=o[(l+(m?h-u:u))%a],p.skip||(g?(t.moveTo(p.x,p.y),g=!1):d(t,f,p,m,r.stepped),f=p);return c&&(p=o[(l+(m?h:0))%a],d(t,f,p,m,r.stepped)),!!c}function we(t,e,i,n){const s=e.points,{count:o,start:r,ilen:a}=ye(s,i,n),{move:l=!0,reverse:c}=n||{};let h,d,u,p,f,g,m=0,b=0;const _=t=>(r+(c?a-t:t))%o,v=()=>{p!==f&&(t.lineTo(m,f),t.lineTo(m,p),t.lineTo(m,g))};for(l&&(d=s[_(0)],t.moveTo(d.x,d.y)),h=0;h<=a;++h){if(d=s[_(h)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<p?p=i:i>f&&(f=i),m=(b*m+e)/++b):(v(),t.lineTo(e,i),u=n,b=0,p=f=i),g=i}v()}function ke(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?we:xe}be.id="arc",be.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},be.defaultRoutes={backgroundColor:"backgroundColor"};const je="function"==typeof Path2D;function Se(t,e,i,n){je&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),_e(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,r=ke(e);for(const a of s)_e(t,o,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}class Te extends R{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;(0,n.am)(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=(0,n.an)(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],o=this.points,r=(0,n.ao)(this,{property:e,start:s,end:s});if(!r.length)return;const a=[],l=function(t){return t.stepped?n.ap:t.tension||"monotone"===t.cubicInterpolationMode?n.aq:n.ar}(i);let c,h;for(c=0,h=r.length;c<h;++c){const{start:n,end:h}=r[c],d=o[n],u=o[h];if(d===u){a.push(d);continue}const p=l(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);p[e]=t[e],a.push(p)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return ke(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=ke(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const r of n)o&=s(t,this,r,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),Se(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Ce(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}Te.id="line",Te.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Te.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Te.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Me extends R{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Ce(this,t,"x",e)}inYRange(t,e){return Ce(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!(0,n.$)(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,(0,n.au)(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ae(t,e){const{x:i,y:n,base:s,width:o,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,c,h,d;return t.horizontal?(d=r/2,a=Math.min(i,s),l=Math.max(i,s),c=n-d,h=n+d):(d=o/2,a=i-d,l=i+d,c=Math.min(n,s),h=Math.max(n,s)),{left:a,top:c,right:l,bottom:h}}function Ee(t,e,i,s){return t?0:(0,n.E)(e,i,s)}function Oe(t){const e=Ae(t),i=e.right-e.left,s=e.bottom-e.top,o=function(t,e,i){const s=t.options.borderWidth,o=t.borderSkipped,r=(0,n.aw)(s);return{t:Ee(o.top,r.top,0,i),r:Ee(o.right,r.right,0,e),b:Ee(o.bottom,r.bottom,0,i),l:Ee(o.left,r.left,0,e)}}(t,i/2,s/2),r=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),o=t.options.borderRadius,r=(0,n.ax)(o),a=Math.min(e,i),l=t.borderSkipped,c=s||(0,n.i)(o);return{topLeft:Ee(!c||l.top||l.left,r.topLeft,0,a),topRight:Ee(!c||l.top||l.right,r.topRight,0,a),bottomLeft:Ee(!c||l.bottom||l.left,r.bottomLeft,0,a),bottomRight:Ee(!c||l.bottom||l.right,r.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:r},inner:{x:e.left+o.l,y:e.top+o.t,w:i-o.l-o.r,h:s-o.t-o.b,radius:{topLeft:Math.max(0,r.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,r.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,r.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,r.bottomRight-Math.max(o.b,o.r))}}}}function Pe(t,e,i,s){const o=null===e,r=null===i,a=t&&!(o&&r)&&Ae(t,s);return a&&(o||(0,n.ak)(e,a.left,a.right))&&(r||(0,n.ak)(i,a.top,a.bottom))}function De(t,e){t.rect(e.x,e.y,e.w,e.h)}function Le(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,r=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+r,radius:t.radius}}Me.id="point",Me.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Me.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Ne extends R{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:o,outer:r}=Oe(this),a=(l=r.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?n.av:De;var l;t.save(),r.w===o.w&&r.h===o.h||(t.beginPath(),a(t,Le(r,e,o)),t.clip(),a(t,Le(o,-e,r)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Le(o,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Pe(this,t,e,i)}inXRange(t,e){return Pe(this,t,null,e)}inYRange(t,e){return Pe(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Ne.id="bar",Ne.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Ne.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Ie=Object.freeze({__proto__:null,ArcElement:be,LineElement:Te,PointElement:Me,BarElement:Ne});function Re(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Fe(t){t.data.datasets.forEach((t=>{Re(t)}))}var He={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Fe(t);const s=t.width;t.data.datasets.forEach(((e,o)=>{const{_data:r,indexAxis:a}=e,l=t.getDatasetMeta(o),c=r||e.data;if("y"===(0,n.a)([a,t.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const h=t.scales[l.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let{start:d,count:u}=function(t,e){const i=e.length;let s,o=0;const{iScale:r}=t,{min:a,max:l,minDefined:c,maxDefined:h}=r.getUserBounds();return c&&(o=(0,n.E)((0,n.Z)(e,r.axis,a).lo,0,i-1)),s=h?(0,n.E)((0,n.Z)(e,r.axis,l).hi+1,o,i)-o:i-o,{start:o,count:s}}(l,c);if(u<=(i.threshold||4*s))return void Re(e);let p;switch((0,n.k)(r)&&(e._data=c,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":p=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(o-2);let l=0;const c=e+i-1;let h,d,u,p,f,g=e;for(r[l++]=t[g],h=0;h<o-2;h++){let n,s=0,o=0;const c=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,i)+e,b=m-c;for(n=c;n<m;n++)s+=t[n].x,o+=t[n].y;s/=b,o/=b;const _=Math.floor(h*a)+1+e,v=Math.min(Math.floor((h+1)*a)+1,i)+e,{x:y,y:x}=t[g];for(u=p=-1,n=_;n<v;n++)p=.5*Math.abs((y-s)*(t[n].y-x)-(y-t[n].x)*(o-x)),p>u&&(u=p,d=t[n],f=n);r[l++]=d,g=f}return r[l++]=t[c],r}(c,d,u,s,i);break;case"min-max":p=function(t,e,i,s){let o,r,a,l,c,h,d,u,p,f,g=0,m=0;const b=[],_=e+i-1,v=t[e].x,y=t[_].x-v;for(o=e;o<e+i;++o){r=t[o],a=(r.x-v)/y*s,l=r.y;const e=0|a;if(e===c)l<p?(p=l,h=o):l>f&&(f=l,d=o),g=(m*g+r.x)/++m;else{const i=o-1;if(!(0,n.k)(h)&&!(0,n.k)(d)){const e=Math.min(h,d),n=Math.max(h,d);e!==u&&e!==i&&b.push({...t[e],x:g}),n!==u&&n!==i&&b.push({...t[n],x:g})}o>0&&i!==u&&b.push(t[i]),b.push(r),c=e,m=0,p=f=l,h=d=u=o}}return b}(c,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=p}))},destroy(t){Fe(t)}};function Be(t,e,i,s){if(s)return;let o=e[t],r=i[t];return"angle"===t&&(o=(0,n.az)(o),r=(0,n.az)(r)),{property:t,start:o,end:r}}function ze(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function We(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function $e(t,e){let i=[],s=!1;return(0,n.b)(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=ze(t,e,s);const r=s[t],a=s[e];null!==n?(o.push({x:r.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:r.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new Te({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function Ve(t){return t&&!1!==t.fill}function qe(t,e,i){let s=t[e].fill;const o=[e];let r;if(!i)return s;for(;!1!==s&&-1===o.indexOf(s);){if(!(0,n.g)(s))return s;if(r=t[s],!r)return!1;if(r.visible)return s;o.push(s),s=r.fill}return!1}function Ye(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=(0,n.v)(i&&i.target,i);void 0===s&&(s=!!e.backgroundColor);if(!1===s||null===s)return!1;if(!0===s)return"origin";return s}(t);if((0,n.i)(s))return!isNaN(s.value)&&s;let o=parseFloat(s);return(0,n.g)(o)&&Math.floor(o)===o?function(t,e,i,n){"-"!==t&&"+"!==t||(i=e+i);if(i===e||i<0||i>=n)return!1;return i}(s[0],e,o,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function Xe(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:r,last:a,point:l}=Ue(o,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function Ue(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const o=s[i],r=t.segments,a=t.points;let l=!1,c=!1;for(let t=0;t<r.length;t++){const e=r[t],s=a[e.start][i],h=a[e.end][i];if((0,n.ak)(o,s,h)){l=o===s,c=o===h;break}}return{first:l,last:c,point:s}}class Ke{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:o,radius:r}=this;return e=e||{start:0,end:n.T},t.arc(s,o,r,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function Qe(t){const{chart:e,fill:i,line:s}=t;if((0,n.g)(i))return function(t,e){const i=t.getDatasetMeta(e),n=i&&t.isDatasetVisible(e);return n?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,r=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);a.push($e({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Xe(s,r[t],a)}return new Te({points:s,options:{}})}(t);if("shape"===i)return!0;const o=function(t){const e=t.scale||{};if(e.getPointPositionForValue)return function(t){const{scale:e,fill:i}=t,s=e.options,o=e.getLabels().length,r=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:(0,n.i)(t)?t.value:e.getBaseValue(),s}(i,e,r),l=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,r);return new Ke({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<o;++t)l.push(e.getPointPositionForValue(t,a));return l}(t);return function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:(0,n.i)(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if((0,n.g)(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return o instanceof Ke?o:$e(o,s)}function Ge(t,e,i){const s=Qe(e),{line:o,scale:r,axis:a}=e,l=o.options,c=l.fill,h=l.backgroundColor,{above:d=h,below:u=h}=c||{};s&&o.points.length&&((0,n.L)(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==s&&(Je(t,n,r.top),Ze(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore(),t.save(),Je(t,n,r.bottom));Ze(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:o,target:s,above:d,below:u,area:i,scale:r,axis:a}),(0,n.N)(t))}function Je(t,e,i){const{segments:n,points:s}=e;let o=!0,r=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,c=s[n],h=s[ze(n,l,s)];o?(t.moveTo(c.x,c.y),o=!1):(t.lineTo(c.x,i),t.lineTo(c.x,c.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(h.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Ze(t,e){const{line:i,target:s,property:o,color:r,scale:a}=e,l=function(t,e,i){const s=t.segments,o=t.points,r=e.points,a=[];for(const t of s){let{start:s,end:l}=t;l=ze(s,l,o);const c=Be(i,o[s],o[l],t.loop);if(!e.segments){a.push({source:t,target:c,start:o[s],end:o[l]});continue}const h=(0,n.ao)(e,c);for(const e of h){const s=Be(i,r[e.start],r[e.end],e.loop),l=(0,n.ay)(t,o,s);for(const t of l)a.push({source:t,target:e,start:{[i]:We(c,s,"start",Math.max)},end:{[i]:We(c,s,"end",Math.min)}})}}return a}(i,s,o);for(const{source:e,target:n,start:c,end:h}of l){const{style:{backgroundColor:l=r}={}}=e,d=!0!==s;t.save(),t.fillStyle=l,ti(t,a,d&&Be(o,c,h)),t.beginPath();const u=!!i.pathSegment(t,e);let p;if(d){u?t.closePath():ei(t,s,h,o);const e=!!s.pathSegment(t,n,{move:u,reverse:!0});p=u&&e,p||ei(t,s,c,o)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function ti(t,e,i){const{top:n,bottom:s}=e.chart.chartArea,{property:o,start:r,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(r,n,a-r,s-n),t.clip())}function ei(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}var ii={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,r,a,l;for(r=0;r<n;++r)o=t.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof Te&&(l={visible:t.isDatasetVisible(r),index:r,fill:Ye(a,r,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,s.push(l);for(r=0;r<n;++r)l=s[r],l&&!1!==l.fill&&(l.fill=qe(s,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&Ge(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;Ve(i)&&Ge(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;Ve(n)&&"beforeDatasetDraw"===i.drawTime&&Ge(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const ni=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class si extends R{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=(0,n.C)(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=(0,n.O)(i.font),o=s.size,r=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=ni(i,o);let c,h;e.font=s.string,this.isHorizontal()?(c=this.maxWidth,h=this._fitRows(r,o,a,l)+10):(h=this.maxHeight,c=this._fitCols(r,o,a,l)+10),this.width=Math.min(c,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=n+r;let h=t;s.textAlign="left",s.textBaseline="middle";let d=-1,u=-c;return this.legendItems.forEach(((t,p)=>{const f=i+e/2+s.measureText(t.text).width;(0===p||l[l.length-1]+f+2*r>o)&&(h+=c,l[l.length-(p>0?0:1)]=0,u+=c,d++),a[p]={left:0,top:u,row:d,width:f,height:n},l[l.length-1]+=f+r})),h}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let h=r,d=0,u=0,p=0,f=0;return this.legendItems.forEach(((t,o)=>{const g=i+e/2+s.measureText(t.text).width;o>0&&u+n+2*r>c&&(h+=d+r,l.push({width:d,height:u}),p+=d+r,f++,d=u=0),a[o]={left:p,top:u,col:f,width:g,height:n},d=Math.max(d,g),u+=n+r})),h+=d,l.push({width:d,height:u}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:o}}=this,r=(0,n.aA)(o,this.left,this.width);if(this.isHorizontal()){let o=0,a=(0,n.S)(i,this.left+s,this.right-this.lineWidths[o]);for(const l of e)o!==l.row&&(o=l.row,a=(0,n.S)(i,this.left+s,this.right-this.lineWidths[o])),l.top+=this.top+t+s,l.left=r.leftForLtr(r.x(a),l.width),a+=l.width+s}else{let o=0,a=(0,n.S)(i,this.top+t+s,this.bottom-this.columnSizes[o].height);for(const l of e)l.col!==o&&(o=l.col,a=(0,n.S)(i,this.top+t+s,this.bottom-this.columnSizes[o].height)),l.top=a,l.left+=this.left+s,l.left=r.leftForLtr(r.x(l.left),l.width),a+=l.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;(0,n.L)(t,this),this._draw(),(0,n.N)(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:o,labels:r}=t,a=n.d.color,l=(0,n.aA)(t.rtl,this.left,this.width),c=(0,n.O)(r.font),{color:h,padding:d}=r,u=c.size,p=u/2;let f;this.drawTitle(),s.textAlign=l.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=c.string;const{boxWidth:g,boxHeight:m,itemHeight:b}=ni(r,u),_=this.isHorizontal(),v=this._computeTitleHeight();f=_?{x:(0,n.S)(o,this.left+d,this.right-i[0]),y:this.top+d+v,line:0}:{x:this.left+d,y:(0,n.S)(o,this.top+v+d,this.bottom-e[0].height),line:0},(0,n.aB)(this.ctx,t.textDirection);const y=b+d;this.legendItems.forEach(((x,w)=>{s.strokeStyle=x.fontColor||h,s.fillStyle=x.fontColor||h;const k=s.measureText(x.text).width,j=l.textAlign(x.textAlign||(x.textAlign=r.textAlign)),S=g+p+k;let T=f.x,C=f.y;l.setWidth(this.width),_?w>0&&T+S+d>this.right&&(C=f.y+=y,f.line++,T=f.x=(0,n.S)(o,this.left+d,this.right-i[f.line])):w>0&&C+y>this.bottom&&(T=f.x=T+e[f.line].width+d,f.line++,C=f.y=(0,n.S)(o,this.top+v+d,this.bottom-e[f.line].height));!function(t,e,i){if(isNaN(g)||g<=0||isNaN(m)||m<0)return;s.save();const o=(0,n.v)(i.lineWidth,1);if(s.fillStyle=(0,n.v)(i.fillStyle,a),s.lineCap=(0,n.v)(i.lineCap,"butt"),s.lineDashOffset=(0,n.v)(i.lineDashOffset,0),s.lineJoin=(0,n.v)(i.lineJoin,"miter"),s.lineWidth=o,s.strokeStyle=(0,n.v)(i.strokeStyle,a),s.setLineDash((0,n.v)(i.lineDash,[])),r.usePointStyle){const a={radius:m*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:o},c=l.xPlus(t,g/2),h=e+p;(0,n.aE)(s,a,c,h,r.pointStyleWidth&&g)}else{const r=e+Math.max((u-m)/2,0),a=l.leftForLtr(t,g),c=(0,n.ax)(i.borderRadius);s.beginPath(),Object.values(c).some((t=>0!==t))?(0,n.av)(s,{x:a,y:r,w:g,h:m,radius:c}):s.rect(a,r,g,m),s.fill(),0!==o&&s.stroke()}s.restore()}(l.x(T),C,x),T=(0,n.aC)(j,T+g+p,_?T+S:this.right,t.rtl),function(t,e,i){(0,n.M)(s,i.text,t,e+b/2,c,{strikethrough:i.hidden,textAlign:l.textAlign(i.textAlign)})}(l.x(T),C,x),_?f.x+=S+d:f.y+=y})),(0,n.aD)(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=(0,n.O)(e.font),s=(0,n.K)(e.padding);if(!e.display)return;const o=(0,n.aA)(t.rtl,this.left,this.width),r=this.ctx,a=e.position,l=i.size/2,c=s.top+l;let h,d=this.left,u=this.width;if(this.isHorizontal())u=Math.max(...this.lineWidths),h=this.top+c,d=(0,n.S)(t.align,d,this.right-u);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=c+(0,n.S)(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const p=(0,n.S)(a,d,d+u);r.textAlign=o.textAlign((0,n.R)(a)),r.textBaseline="middle",r.strokeStyle=e.color,r.fillStyle=e.color,r.font=i.string,(0,n.M)(r,e.text,p,h,i)}_computeTitleHeight(){const t=this.options.title,e=(0,n.O)(t.font),i=(0,n.K)(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,o;if((0,n.ak)(t,this.left,this.right)&&(0,n.ak)(e,this.top,this.bottom))for(o=this.legendHitBoxes,i=0;i<o.length;++i)if(s=o[i],(0,n.ak)(t,s.left,s.left+s.width)&&(0,n.ak)(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){if(("mousemove"===t||"mouseout"===t)&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const r=this._hoveredItem,a=(o=i,null!==(s=r)&&null!==o&&s.datasetIndex===o.datasetIndex&&s.index===o.index);r&&!a&&(0,n.C)(e.onLeave,[t,r,this],this),this._hoveredItem=i,i&&!a&&(0,n.C)(e.onHover,[t,i,this],this)}else i&&(0,n.C)(e.onClick,[t,i,this],this);var s,o}}var oi={id:"legend",_element:si,start(t,e,i){const n=t.legend=new si({ctx:t.ctx,options:i,chart:t});xt.configure(t,n,i),xt.addBox(t,n)},stop(t){xt.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;xt.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:o,color:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(i?0:void 0),l=(0,n.K)(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:r,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(l.width+l.height)/4,strokeStyle:a.borderColor,pointStyle:s||a.pointStyle,rotation:a.rotation,textAlign:o||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class ri extends R{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=(0,n.b)(i.text)?i.text.length:1;this._padding=(0,n.K)(i.padding);const o=s*(0,n.O)(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:o,options:r}=this,a=r.align;let l,c,h,d=0;return this.isHorizontal()?(c=(0,n.S)(a,i,o),h=e+t,l=o-i):("left"===r.position?(c=i+t,h=(0,n.S)(a,s,e),d=-.5*n.P):(c=o-t,h=(0,n.S)(a,e,s),d=.5*n.P),l=s-e),{titleX:c,titleY:h,maxWidth:l,rotation:d}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=(0,n.O)(e.font),s=i.lineHeight/2+this._padding.top,{titleX:o,titleY:r,maxWidth:a,rotation:l}=this._drawArgs(s);(0,n.M)(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:l,textAlign:(0,n.R)(e.align),textBaseline:"middle",translation:[o,r]})}}var ai={id:"title",_element:ri,start(t,e,i){!function(t,e){const i=new ri({ctx:t.ctx,options:e,chart:t});xt.configure(t,i,e),xt.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;xt.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;xt.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const li=new WeakMap;var ci={id:"subtitle",start(t,e,i){const n=new ri({ctx:t.ctx,options:i,chart:t});xt.configure(t,n,i),xt.addBox(t,n),li.set(t,n)},stop(t){xt.removeBox(t,li.get(t)),li.delete(t)},beforeUpdate(t,e,i){const n=li.get(t);xt.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const hi={average(t){if(!t.length)return!1;let e,i,n=0,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,s+=t.y,++o}}return{x:n/o,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,s,o,r=e.x,a=e.y,l=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=s.getCenterPoint(),i=(0,n.aG)(e,t);i<l&&(l=i,o=s)}}if(o){const t=o.tooltipPosition();r=t.x,a=t.y}return{x:r,y:a}}};function di(t,e){return e&&((0,n.b)(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function ui(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function pi(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:r,value:a}=o.getLabelAndValue(s);return{chart:t,label:r,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:a,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function fi(t,e){const i=t.chart.ctx,{body:s,footer:o,title:r}=t,{boxWidth:a,boxHeight:l}=e,c=(0,n.O)(e.bodyFont),h=(0,n.O)(e.titleFont),d=(0,n.O)(e.footerFont),u=r.length,p=o.length,f=s.length,g=(0,n.K)(e.padding);let m=g.height,b=0,_=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);if(_+=t.beforeBody.length+t.afterBody.length,u&&(m+=u*h.lineHeight+(u-1)*e.titleSpacing+e.titleMarginBottom),_){m+=f*(e.displayColors?Math.max(l,c.lineHeight):c.lineHeight)+(_-f)*c.lineHeight+(_-1)*e.bodySpacing}p&&(m+=e.footerMarginTop+p*d.lineHeight+(p-1)*e.footerSpacing);let v=0;const y=function(t){b=Math.max(b,i.measureText(t).width+v)};return i.save(),i.font=h.string,(0,n.Q)(t.title,y),i.font=c.string,(0,n.Q)(t.beforeBody.concat(t.afterBody),y),v=e.displayColors?a+2+e.boxPadding:0,(0,n.Q)(s,(t=>{(0,n.Q)(t.before,y),(0,n.Q)(t.lines,y),(0,n.Q)(t.after,y)})),v=0,i.font=d.string,(0,n.Q)(t.footer,y),i.restore(),b+=g.width,{width:b,height:m}}function gi(t,e,i,n){const{x:s,width:o}=i,{width:r,chartArea:{left:a,right:l}}=t;let c="center";return"center"===n?c=s<=(a+l)/2?"left":"right":s<=o/2?c="left":s>=r-o/2&&(c="right"),function(t,e,i,n){const{x:s,width:o}=n,r=i.caretSize+i.caretPadding;return"left"===t&&s+o+r>e.width||"right"===t&&s-o-r<0||void 0}(c,t,e,i)&&(c="center"),c}function mi(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||gi(t,e,i,n),yAlign:n}}function bi(t,e,i,s){const{caretSize:o,caretPadding:r,cornerRadius:a}=t,{xAlign:l,yAlign:c}=i,h=o+r,{topLeft:d,topRight:u,bottomLeft:p,bottomRight:f}=(0,n.ax)(a);let g=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,l);const m=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,c,h);return"center"===c?"left"===l?g+=h:"right"===l&&(g-=h):"left"===l?g-=Math.max(d,p)+o:"right"===l&&(g+=Math.max(u,f)+o),{x:(0,n.E)(g,0,s.width-e.width),y:(0,n.E)(m,0,s.height-e.height)}}function _i(t,e,i){const s=(0,n.K)(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function vi(t){return di([],ui(t))}function yi(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class xi extends R{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new c(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this,i=this._tooltipItems,(0,n.h)(t,{tooltip:e,tooltipItems:i,type:"tooltip"})));var t,e,i}getTitle(t,e){const{callbacks:i}=e,n=i.beforeTitle.apply(this,[t]),s=i.title.apply(this,[t]),o=i.afterTitle.apply(this,[t]);let r=[];return r=di(r,ui(n)),r=di(r,ui(s)),r=di(r,ui(o)),r}getBeforeBody(t,e){return vi(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,s=[];return(0,n.Q)(t,(t=>{const e={before:[],lines:[],after:[]},n=yi(i,t);di(e.before,ui(n.beforeLabel.call(this,t))),di(e.lines,n.label.call(this,t)),di(e.after,ui(n.afterLabel.call(this,t))),s.push(e)})),s}getAfterBody(t,e){return vi(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,n=i.beforeFooter.apply(this,[t]),s=i.footer.apply(this,[t]),o=i.afterFooter.apply(this,[t]);let r=[];return r=di(r,ui(n)),r=di(r,ui(s)),r=di(r,ui(o)),r}_createItems(t){const e=this._active,i=this.chart.data,s=[],o=[],r=[];let a,l,c=[];for(a=0,l=e.length;a<l;++a)c.push(pi(this.chart,e[a]));return t.filter&&(c=c.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(c=c.sort(((e,n)=>t.itemSort(e,n,i)))),(0,n.Q)(c,(e=>{const i=yi(t.callbacks,e);s.push(i.labelColor.call(this,e)),o.push(i.labelPointStyle.call(this,e)),r.push(i.labelTextColor.call(this,e))})),this.labelColors=s,this.labelPointStyles=o,this.labelTextColors=r,this.dataPoints=c,c}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=hi[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=fi(this,i),r=Object.assign({},t,e),a=mi(this.chart,i,r),l=bi(i,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:o}=this,{caretSize:r,cornerRadius:a}=i,{topLeft:l,topRight:c,bottomLeft:h,bottomRight:d}=(0,n.ax)(a),{x:u,y:p}=t,{width:f,height:g}=e;let m,b,_,v,y,x;return"center"===o?(y=p+g/2,"left"===s?(m=u,b=m-r,v=y+r,x=y-r):(m=u+f,b=m+r,v=y-r,x=y+r),_=m):(b="left"===s?u+Math.max(l,h)+r:"right"===s?u+f-Math.max(c,d)-r:this.caretX,"top"===o?(v=p,y=v-r,m=b-r,_=b+r):(v=p+g,y=v+r,m=b+r,_=b-r),x=v),{x1:m,x2:b,x3:_,y1:v,y2:y,y3:x}}drawTitle(t,e,i){const s=this.title,o=s.length;let r,a,l;if(o){const c=(0,n.aA)(i.rtl,this.x,this.width);for(t.x=_i(this,i.titleAlign,i),e.textAlign=c.textAlign(i.titleAlign),e.textBaseline="middle",r=(0,n.O)(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=r.string,l=0;l<o;++l)e.fillText(s[l],c.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+a,l+1===o&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,o){const r=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:l,boxWidth:c,boxPadding:h}=o,d=(0,n.O)(o.bodyFont),u=_i(this,"left",o),p=s.x(u),f=l<d.lineHeight?(d.lineHeight-l)/2:0,g=e.y+f;if(o.usePointStyle){const e={radius:Math.min(c,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(p,c)+c/2,h=g+l/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,(0,n.au)(t,e,i,h),t.strokeStyle=r.borderColor,t.fillStyle=r.backgroundColor,(0,n.au)(t,e,i,h)}else{t.lineWidth=(0,n.i)(r.borderWidth)?Math.max(...Object.values(r.borderWidth)):r.borderWidth||1,t.strokeStyle=r.borderColor,t.setLineDash(r.borderDash||[]),t.lineDashOffset=r.borderDashOffset||0;const e=s.leftForLtr(p,c-h),i=s.leftForLtr(s.xPlus(p,1),c-h-2),a=(0,n.ax)(r.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=o.multiKeyBackground,(0,n.av)(t,{x:e,y:g,w:c,h:l,radius:a}),t.fill(),t.stroke(),t.fillStyle=r.backgroundColor,t.beginPath(),(0,n.av)(t,{x:i,y:g+1,w:c-2,h:l-2,radius:a}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(e,g,c,l),t.strokeRect(e,g,c,l),t.fillStyle=r.backgroundColor,t.fillRect(i,g+1,c-2,l-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:o,bodyAlign:r,displayColors:a,boxHeight:l,boxWidth:c,boxPadding:h}=i,d=(0,n.O)(i.bodyFont);let u=d.lineHeight,p=0;const f=(0,n.aA)(i.rtl,this.x,this.width),g=function(i){e.fillText(i,f.x(t.x+p),t.y+u/2),t.y+=u+o},m=f.textAlign(r);let b,_,v,y,x,w,k;for(e.textAlign=r,e.textBaseline="middle",e.font=d.string,t.x=_i(this,m,i),e.fillStyle=i.bodyColor,(0,n.Q)(this.beforeBody,g),p=a&&"right"!==m?"center"===r?c/2+h:c+2+h:0,y=0,w=s.length;y<w;++y){for(b=s[y],_=this.labelTextColors[y],e.fillStyle=_,(0,n.Q)(b.before,g),v=b.lines,a&&v.length&&(this._drawColorBox(e,t,y,f,i),u=Math.max(d.lineHeight,l)),x=0,k=v.length;x<k;++x)g(v[x]),u=d.lineHeight;(0,n.Q)(b.after,g)}p=0,u=d.lineHeight,(0,n.Q)(this.afterBody,g),t.y-=o}drawFooter(t,e,i){const s=this.footer,o=s.length;let r,a;if(o){const l=(0,n.aA)(i.rtl,this.x,this.width);for(t.x=_i(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=l.textAlign(i.footerAlign),e.textBaseline="middle",r=(0,n.O)(i.footerFont),e.fillStyle=i.footerColor,e.font=r.string,a=0;a<o;++a)e.fillText(s[a],l.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:o,yAlign:r}=this,{x:a,y:l}=t,{width:c,height:h}=i,{topLeft:d,topRight:u,bottomLeft:p,bottomRight:f}=(0,n.ax)(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+d,l),"top"===r&&this.drawCaret(t,e,i,s),e.lineTo(a+c-u,l),e.quadraticCurveTo(a+c,l,a+c,l+u),"center"===r&&"right"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+c,l+h-f),e.quadraticCurveTo(a+c,l+h,a+c-f,l+h),"bottom"===r&&this.drawCaret(t,e,i,s),e.lineTo(a+p,l+h),e.quadraticCurveTo(a,l+h,a,l+h-p),"center"===r&&"left"===o&&this.drawCaret(t,e,i,s),e.lineTo(a,l+d),e.quadraticCurveTo(a,l,a+d,l),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=hi[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=fi(this,t),r=Object.assign({},i,this._size),a=mi(e,t,r),l=bi(t,r,a,e);n._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},o={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const r=(0,n.K)(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(o,t,s,e),(0,n.aB)(t,e.textDirection),o.y+=r.top,this.drawTitle(o,t,e),this.drawBody(o,t,e),this.drawFooter(o,t,e),(0,n.aD)(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),o=!(0,n.ai)(i,s),r=this._positionChanged(s,e);(o||r)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,o=this._active||[],r=this._getActiveElements(t,o,e,i),a=this._positionChanged(r,t),l=e||!(0,n.ai)(r,o)||a;return l&&(this._active=r,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),l}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=hi[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}xi.positioners=hi;var wi={id:"tooltip",_element:xi,positioners:hi,afterInit(t,e,i){i&&(t.tooltip=new xi({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",i))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:n.aF,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:n.aF,beforeBody:n.aF,beforeLabel:n.aF,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return(0,n.k)(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:n.aF,afterBody:n.aF,beforeFooter:n.aF,footer:n.aF,afterFooter:n.aF}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},ki=Object.freeze({__proto__:null,Decimation:He,Filler:ii,Legend:oi,SubTitle:ci,Title:ai,Tooltip:wi});function ji(t,e,i,n){const s=t.indexOf(e);if(-1===s)return((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n);return s!==t.lastIndexOf(e)?i:s}class Si extends U{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if((0,n.k)(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:(0,n.E)(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:ji(i,t,(0,n.v)(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Ti(t,e,{horizontal:i,minRotation:s}){const o=(0,n.t)(s),r=(i?Math.sin(o):Math.cos(o))||.001,a=.75*e*(""+t).length;return Math.min(e/r,a)}Si.id="category",Si.defaults={ticks:{callback:Si.prototype.getLabelForValue}};class Ci extends U{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return(0,n.k)(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:o}=this;const r=t=>s=e?s:t,a=t=>o=i?o:t;if(t){const t=(0,n.s)(s),e=(0,n.s)(o);t<0&&e<0?a(0):t>0&&e>0&&r(0)}if(s===o){let e=1;(o>=Number.MAX_SAFE_INTEGER||s<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*o)),a(o+e),t||r(s-e)}this.min=s,this.max=o}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:o,min:r,max:a,precision:l,count:c,maxTicks:h,maxDigits:d,includeBounds:u}=t,p=o||1,f=h-1,{min:g,max:m}=e,b=!(0,n.k)(r),_=!(0,n.k)(a),v=!(0,n.k)(c),y=(m-g)/(d+1);let x,w,k,j,S=(0,n.aI)((m-g)/f/p)*p;if(S<1e-14&&!b&&!_)return[{value:g},{value:m}];j=Math.ceil(m/S)-Math.floor(g/S),j>f&&(S=(0,n.aI)(j*S/f/p)*p),(0,n.k)(l)||(x=Math.pow(10,l),S=Math.ceil(S*x)/x),"ticks"===s?(w=Math.floor(g/S)*S,k=Math.ceil(m/S)*S):(w=g,k=m),b&&_&&o&&(0,n.aJ)((a-r)/o,S/1e3)?(j=Math.round(Math.min((a-r)/S,h)),S=(a-r)/j,w=r,k=a):v?(w=b?r:w,k=_?a:k,j=c-1,S=(k-w)/j):(j=(k-w)/S,j=(0,n.aK)(j,Math.round(j),S/1e3)?Math.round(j):Math.ceil(j));const T=Math.max((0,n.aL)(S),(0,n.aL)(w));x=Math.pow(10,(0,n.k)(l)?T:l),w=Math.round(w*x)/x,k=Math.round(k*x)/x;let C=0;for(b&&(u&&w!==r?(i.push({value:r}),w<r&&C++,(0,n.aK)(Math.round((w+C*S)*x)/x,r,Ti(r,y,t))&&C++):w<r&&C++);C<j;++C)i.push({value:Math.round((w+C*S)*x)/x});return _&&u&&k!==a?i.length&&(0,n.aK)(i[i.length-1].value,a,Ti(a,y,t))?i[i.length-1].value=a:i.push({value:a}):_&&k!==a||i.push({value:k}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&(0,n.aH)(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return(0,n.o)(t,this.chart.options.locale,this.options.ticks.format)}}class Mi extends Ci{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=(0,n.g)(t)?t:0,this.max=(0,n.g)(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=(0,n.t)(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,o=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,o.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function Ai(t){return 1===t/Math.pow(10,Math.floor((0,n.z)(t)))}Mi.id="linear",Mi.defaults={ticks:{callback:H.formatters.numeric}};class Ei extends U{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Ci.prototype.parse.apply(this,[t,e]);if(0!==i)return(0,n.g)(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=(0,n.g)(t)?Math.max(0,t):null,this.max=(0,n.g)(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const o=e=>i=t?i:e,r=t=>s=e?s:t,a=(t,e)=>Math.pow(10,Math.floor((0,n.z)(t))+e);i===s&&(i<=0?(o(1),r(10)):(o(a(i,-1)),r(a(s,1)))),i<=0&&o(a(s,-1)),s<=0&&r(a(i,1)),this._zero&&this.min!==this._suggestedMin&&i===a(this.min,0)&&o(a(i,-1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor((0,n.z)(e.max)),s=Math.ceil(e.max/Math.pow(10,i)),o=[];let r=(0,n.B)(t.min,Math.pow(10,Math.floor((0,n.z)(e.min)))),a=Math.floor((0,n.z)(r)),l=Math.floor(r/Math.pow(10,a)),c=a<0?Math.pow(10,Math.abs(a)):1;do{o.push({value:r,major:Ai(r)}),++l,10===l&&(l=1,++a,c=a>=0?1:c),r=Math.round(l*Math.pow(10,a)*c)/c}while(a<i||a===i&&l<s);const h=(0,n.B)(t.max,r);return o.push({value:h,major:Ai(r)}),o}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&(0,n.aH)(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":(0,n.o)(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=(0,n.z)(t),this._valueRange=(0,n.z)(this.max)-(0,n.z)(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:((0,n.z)(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Oi(t){const e=t.ticks;if(e.display&&t.display){const t=(0,n.K)(e.backdropPadding);return(0,n.v)(e.font&&e.font.size,n.d.font.size)+t.height}return 0}function Pi(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function Di(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],o=[],r=t._pointLabels.length,a=t.options.pointLabels,l=a.centerPointLabels?n.P/r:0;for(let u=0;u<r;u++){const r=a.setContext(t.getPointLabelContext(u));o[u]=r.padding;const p=t.getPointPosition(u,t.drawingArea+o[u],l),f=(0,n.O)(r.font),g=(c=t.ctx,h=f,d=t._pointLabels[u],d=(0,n.b)(d)?d:[d],{w:(0,n.aM)(c,h.string,d),h:d.length*h.lineHeight});s[u]=g;const m=(0,n.az)(t.getIndexAngle(u)+l),b=Math.round((0,n.F)(m));Li(i,e,m,Pi(b,p.x,g.w,0,180),Pi(b,p.y,g.h,90,270))}var c,h,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],o=t._pointLabels.length,r=t.options,a=Oi(r)/2,l=t.drawingArea,c=r.pointLabels.centerPointLabels?n.P/o:0;for(let r=0;r<o;r++){const o=t.getPointPosition(r,l+a+i[r],c),h=Math.round((0,n.F)((0,n.az)(o.angle+n.H))),d=e[r],u=Ri(o.y,d.h,h),p=Ni(h),f=Ii(o.x,d.w,p);s.push({x:o.x,y:u,textAlign:p,left:f,top:u,right:f+d.w,bottom:u+d.h})}return s}(t,s,o)}function Li(t,e,i,n,s){const o=Math.abs(Math.sin(i)),r=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),s.start<e.t?(l=(e.t-s.start)/r,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function Ni(t){return 0===t||180===t?"center":t<180?"left":"right"}function Ii(t,e,i){return"right"===i?t-=e:"center"===i&&(t-=e/2),t}function Ri(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Fi(t,e,i,s){const{ctx:o}=t;if(i)o.arc(t.xCenter,t.yCenter,e,0,n.T);else{let i=t.getPointPosition(0,e);o.moveTo(i.x,i.y);for(let n=1;n<s;n++)i=t.getPointPosition(n,e),o.lineTo(i.x,i.y)}}Ei.id="logarithmic",Ei.defaults={ticks:{callback:H.formatters.logarithmic,major:{enabled:!0}}};class Hi extends Ci{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=(0,n.K)(Oi(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=(0,n.g)(t)&&!isNaN(t)?t:0,this.max=(0,n.g)(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Oi(this.options))}generateTickLabels(t){Ci.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=(0,n.C)(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?Di(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){const e=n.T/(this._pointLabels.length||1),i=this.options.startAngle||0;return(0,n.az)(t*e+(0,n.t)(i))}getDistanceFromCenterForValue(t){if((0,n.k)(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if((0,n.k)(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return(0,n.h)(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-n.H+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Fi(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s}=e,o=this._pointLabels.length;let r,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let o=e-1;o>=0;o--){const e=s.setContext(t.getPointLabelContext(o)),r=(0,n.O)(e.font),{x:a,y:l,textAlign:c,left:h,top:d,right:u,bottom:p}=t._pointLabelItems[o],{backdropColor:f}=e;if(!(0,n.k)(f)){const t=(0,n.ax)(e.borderRadius),s=(0,n.K)(e.backdropPadding);i.fillStyle=f;const o=h-s.left,r=d-s.top,a=u-h+s.width,l=p-d+s.height;Object.values(t).some((t=>0!==t))?(i.beginPath(),(0,n.av)(i,{x:o,y:r,w:a,h:l,radius:t}),i.fill()):i.fillRect(o,r,a,l)}(0,n.M)(i,t._pointLabels[o],a,l+r.lineHeight/2,r,{color:e.color,textAlign:c,textBaseline:"middle"})}}(this,o),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value);!function(t,e,i,n){const s=t.ctx,o=e.circular,{color:r,lineWidth:a}=e;!o&&!n||!r||!a||i<0||(s.save(),s.strokeStyle=r,s.lineWidth=a,s.setLineDash(e.borderDash),s.lineDashOffset=e.borderDashOffset,s.beginPath(),Fi(t,i,o,n),s.closePath(),s.stroke(),s.restore())}(this,s.setContext(this.getContext(e-1)),a,o)}})),i.display){for(t.save(),r=o-1;r>=0;r--){const n=i.setContext(this.getPointLabelContext(r)),{color:s,lineWidth:o}=n;o&&s&&(t.lineWidth=o,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(r,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let o,r;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const l=i.setContext(this.getContext(a)),c=(0,n.O)(l.font);if(o=this.getDistanceFromCenterForValue(this.ticks[a].value),l.showLabelBackdrop){t.font=c.string,r=t.measureText(s.label).width,t.fillStyle=l.backdropColor;const e=(0,n.K)(l.backdropPadding);t.fillRect(-r/2-e.left,-o-c.size/2-e.top,r+e.width,c.size+e.height)}(0,n.M)(t,s.label,0,-o,c,{color:l.color})})),t.restore()}drawTitle(){}}Hi.id="radialLinear",Hi.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:H.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Hi.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Hi.descriptors={angleLines:{_fallback:"grid"}};const Bi={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},zi=Object.keys(Bi);function Wi(t,e){return t-e}function $i(t,e){if((0,n.k)(e))return null;const i=t._adapter,{parser:s,round:o,isoWeekday:r}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),(0,n.g)(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(o&&(a="week"!==o||!(0,n.x)(r)&&!0!==r?i.startOf(a,o):i.startOf(a,"isoWeek",r)),+a)}function Vi(t,e,i,n){const s=zi.length;for(let o=zi.indexOf(t);o<s-1;++o){const t=Bi[zi[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return zi[o]}return zi[s-1]}function qi(t,e,i){if(i){if(i.length){const{lo:s,hi:o}=(0,n.aO)(i,e);t[i[s]>=e?i[s]:i[o]]=!0}}else t[e]=!0}function Yi(t,e,i){const n=[],s={},o=e.length;let r,a;for(r=0;r<o;++r)a=e[r],s[a]=r,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=o;a<=r;a=+s.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class Xi extends U{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),s=this._adapter=new et._date(t.adapters.date);s.init(e),(0,n.ac)(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:$i(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:o,minDefined:r,maxDefined:a}=this.getUserBounds();function l(t){r||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(o=Math.max(o,t.max))}r&&a||(l(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(this.getMinMax(!1))),s=(0,n.g)(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),o=(0,n.g)(o)&&!isNaN(o)?o:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,o-1),this.max=Math.max(s+1,o)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const o=this.min,r=this.max,a=(0,n.aN)(s,o,r);return this._unit=e.unit||(i.autoSkip?Vi(e.minUnit,this.min,this.max,this._getLabelCapacity(o)):function(t,e,i,n,s){for(let o=zi.length-1;o>=zi.indexOf(i);o--){const i=zi[o];if(Bi[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return zi[i?zi.indexOf(i):0]}(this,a.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=zi.indexOf(t)+1,i=zi.length;e<i;++e)if(Bi[zi[e]].common)return zi[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&a.reverse(),Yi(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t){let e,i,s=0,o=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),o=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const r=t.length<3?.5:.25;s=(0,n.E)(s,0,r),o=(0,n.E)(o,0,r),this._offsets={start:s,end:o,factor:1/(s+1+o)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,o=s.time,r=o.unit||Vi(o.minUnit,e,i,this._getLabelCapacity(e)),a=(0,n.v)(o.stepSize,1),l="week"===r&&o.isoWeekday,c=(0,n.x)(l)||!0===l,h={};let d,u,p=e;if(c&&(p=+t.startOf(p,"isoWeek",l)),p=+t.startOf(p,c?"day":r),t.diff(i,e,r)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+r);const f="data"===s.ticks.source&&this.getDataTimestamps();for(d=p,u=0;d<i;d=+t.add(d,a,r),u++)qi(h,d,f);return d!==i&&"ticks"!==s.bounds&&1!==u||qi(h,d,f),Object.keys(h).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,s){const o=this.options,r=o.time.displayFormats,a=this._unit,l=this._majorUnit,c=a&&r[a],h=l&&r[l],d=i[e],u=l&&h&&d&&d.major,p=this._adapter.format(t,s||(u?h:c)),f=o.ticks.callback;return f?(0,n.C)(f,[p,e,i],this):p}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=(0,n.t)(this.isHorizontal()?e.maxRotation:e.minRotation),o=Math.cos(s),r=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*o+a*r,h:i*r+a*o}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,Yi(this,[t],this._majorUnit),n),o=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push($i(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return(0,n._)(t.sort(Wi))}}function Ui(t,e,i){let s,o,r,a,l=0,c=t.length-1;i?(e>=t[l].pos&&e<=t[c].pos&&({lo:l,hi:c}=(0,n.Z)(t,"pos",e)),({pos:s,time:r}=t[l]),({pos:o,time:a}=t[c])):(e>=t[l].time&&e<=t[c].time&&({lo:l,hi:c}=(0,n.Z)(t,"time",e)),({time:s,pos:r}=t[l]),({time:o,pos:a}=t[c]));const h=o-s;return h?r+(a-r)*(e-s)/h:r}Xi.id="time",Xi.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Ki extends Xi{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Ui(e,this.min),this._tableRange=Ui(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,r,a,l,c;for(o=0,r=t.length;o<r;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,r=n.length;o<r;++o)c=n[o+1],a=n[o-1],l=n[o],Math.round((c+a)/2)!==l&&s.push({time:l,pos:o/(r-1)});return s}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Ui(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Ui(this._table,i*this._tableRange+this._minPos,!0)}}Ki.id="timeseries",Ki.defaults=Xi.defaults;var Qi=Object.freeze({__proto__:null,CategoryScale:Si,LinearScale:Mi,LogarithmicScale:Ei,RadialLinearScale:Hi,TimeScale:Xi,TimeSeriesScale:Ki});const Gi=[J,Ie,ki,Qi]},"./node_modules/chart.js/dist/chunks/helpers.segment.mjs":(t,e,i)=>{"use strict";function n(){}i.r(e),i.d(e,{$:()=>ye,A:()=>W,B:()=>c,C:()=>p,D:()=>Fe,E:()=>et,F:()=>U,G:()=>fe,H:()=>I,I:()=>it,J:()=>me,K:()=>Ne,L:()=>xe,M:()=>Se,N:()=>we,O:()=>Ie,P:()=>O,Q:()=>f,R:()=>mt,S:()=>bt,T:()=>P,U:()=>le,V:()=>v,W:()=>T,X:()=>gi,Y:()=>rt,Z:()=>ot,_:()=>dt,a:()=>Re,a$:()=>Ee,a0:()=>Q,a1:()=>bi,a2:()=>li,a3:()=>yi,a4:()=>ft,a5:()=>vi,a6:()=>ai,a7:()=>ce,a8:()=>M,a9:()=>ze,aA:()=>Mi,aB:()=>Ai,aC:()=>_t,aD:()=>Ei,aE:()=>ve,aF:()=>n,aG:()=>G,aH:()=>Y,aI:()=>z,aJ:()=>q,aK:()=>V,aL:()=>K,aM:()=>ge,aN:()=>at,aO:()=>st,aP:()=>oe,aQ:()=>ae,aR:()=>m,aS:()=>_,aT:()=>x,aU:()=>w,aV:()=>S,aW:()=>pe,aX:()=>ni,aY:()=>si,aZ:()=>di,a_:()=>ut,aa:()=>Be,ab:()=>We,ac:()=>y,ad:()=>s,ae:()=>gt,af:()=>_i,ag:()=>be,ah:()=>A,ai:()=>g,aj:()=>E,ak:()=>nt,al:()=>Pe,am:()=>ri,an:()=>Ni,ao:()=>Li,ap:()=>wi,aq:()=>ki,ar:()=>xi,as:()=>ke,at:()=>je,au:()=>_e,av:()=>Ce,aw:()=>De,ax:()=>Le,ay:()=>Di,az:()=>Z,b:()=>r,b0:()=>D,b1:()=>L,b2:()=>N,b3:()=>R,b4:()=>F,b5:()=>J,c:()=>re,d:()=>ue,e:()=>jt,f:()=>j,g:()=>l,h:()=>He,i:()=>a,j:()=>C,k:()=>o,l:()=>ct,m:()=>d,n:()=>u,o:()=>Si,p:()=>tt,q:()=>vt,r:()=>pt,s:()=>B,t:()=>X,u:()=>ht,v:()=>h,w:()=>yt,x:()=>$,y:()=>Ze,z:()=>H});const s=function(){let t=0;return function(){return t++}}();function o(t){return null==t}function r(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function a(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const l=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function c(t,e){return l(t)?t:e}function h(t,e){return void 0===t?e:t}const d=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:t/e,u=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function p(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function f(t,e,i,n){let s,o,l;if(r(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(a(t))for(l=Object.keys(t),o=l.length,s=0;s<o;s++)e.call(i,t[l[s]],l[s])}function g(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function m(t){if(r(t))return t.map(m);if(a(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=m(t[i[s]]);return e}return t}function b(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function _(t,e,i,n){if(!b(t))return;const s=e[t],o=i[t];a(s)&&a(o)?v(s,o,n):e[t]=m(o)}function v(t,e,i){const n=r(e)?e:[e],s=n.length;if(!a(t))return t;const o=(i=i||{}).merger||_;for(let r=0;r<s;++r){if(!a(e=n[r]))continue;const s=Object.keys(e);for(let n=0,r=s.length;n<r;++n)o(s[n],t,e,i)}return t}function y(t,e){return v(t,e,{merger:x})}function x(t,e,i){if(!b(t))return;const n=e[t],s=i[t];a(n)&&a(s)?y(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=m(s))}function w(t,e,i,n){void 0!==e&&console.warn(t+': "'+i+'" is deprecated. Please use "'+n+'" instead')}const k={"":t=>t,x:t=>t.x,y:t=>t.y};function j(t,e){const i=k[e]||(k[e]=function(t){const e=S(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function S(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}function T(t){return t.charAt(0).toUpperCase()+t.slice(1)}const C=t=>void 0!==t,M=t=>"function"==typeof t,A=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};function E(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}const O=Math.PI,P=2*O,D=P+O,L=Number.POSITIVE_INFINITY,N=O/180,I=O/2,R=O/4,F=2*O/3,H=Math.log10,B=Math.sign;function z(t){const e=Math.round(t);t=V(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(H(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function W(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}function $(t){return!isNaN(parseFloat(t))&&isFinite(t)}function V(t,e,i){return Math.abs(t-e)<i}function q(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}function Y(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function X(t){return t*(O/180)}function U(t){return t*(180/O)}function K(t){if(!l(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Q(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*O&&(o+=P),{angle:o,distance:s}}function G(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function J(t,e){return(t-e+D)%P-O}function Z(t){return(t%P+P)%P}function tt(t,e,i,n){const s=Z(t),o=Z(e),r=Z(i),a=Z(o-s),l=Z(r-s),c=Z(s-o),h=Z(s-r);return s===o||s===r||n&&o===r||a>l&&c<h}function et(t,e,i){return Math.max(e,Math.min(i,t))}function it(t){return et(t,-32768,32767)}function nt(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function st(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const ot=(t,e,i,n)=>st(t,i,n?n=>t[n][e]<=i:n=>t[n][e]<i),rt=(t,e,i)=>st(t,i,(n=>t[n][e]>=i));function at(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}const lt=["push","pop","shift","splice","unshift"];function ct(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),lt.forEach((e=>{const i="_onData"+T(e),n=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const s=n.apply(this,e);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[i]&&t[i](...e)})),s}})})))}function ht(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(lt.forEach((e=>{delete t[e]})),delete t._chartjs)}function dt(t){const e=new Set;let i,n;for(i=0,n=t.length;i<n;++i)e.add(t[i]);return e.size===n?t:Array.from(e)}function ut(t,e,i){return e+" "+t+"px "+i}const pt="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ft(t,e,i){const n=i||(t=>Array.prototype.slice.call(t));let s=!1,o=[];return function(...i){o=n(i),s||(s=!0,pt.call(window,(()=>{s=!1,t.apply(e,o)})))}}function gt(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}const mt=t=>"start"===t?"left":"end"===t?"right":"center",bt=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,_t=(t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e;function vt(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:c,max:h,minDefined:d,maxDefined:u}=r.getUserBounds();d&&(s=et(Math.min(ot(a,r.axis,c).lo,i?n:ot(e,l,r.getPixelForValue(c)).lo),0,n-1)),o=u?et(Math.max(ot(a,r.axis,h,!0).hi+1,i?0:ot(e,l,r.getPixelForValue(h),!0).hi+1),s,n)-s:n-s}return{start:s,count:o}}function yt(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}const xt=t=>0===t||1===t,wt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*P/i),kt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*P/i)+1,jt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*I),easeOutSine:t=>Math.sin(t*I),easeInOutSine:t=>-.5*(Math.cos(O*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>xt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>xt(t)?t:wt(t,.075,.3),easeOutElastic:t=>xt(t)?t:kt(t,.075,.3),easeInOutElastic(t){const e=.1125;return xt(t)?t:t<.5?.5*wt(2*t,e,.45):.5+.5*kt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-jt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*jt.easeInBounce(2*t):.5*jt.easeOutBounce(2*t-1)+.5};function St(t){return t+.5|0}const Tt=(t,e,i)=>Math.max(Math.min(t,i),e);function Ct(t){return Tt(St(2.55*t),0,255)}function Mt(t){return Tt(St(255*t),0,255)}function At(t){return Tt(St(t/2.55)/100,0,1)}function Et(t){return Tt(St(100*t),0,100)}const Ot={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Pt=[..."0123456789ABCDEF"],Dt=t=>Pt[15&t],Lt=t=>Pt[(240&t)>>4]+Pt[15&t],Nt=t=>(240&t)>>4==(15&t);function It(t){var e=(t=>Nt(t.r)&&Nt(t.g)&&Nt(t.b)&&Nt(t.a))(t)?Dt:Lt;return t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0}const Rt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Ft(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function Ht(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function Bt(t,e,i){const n=Ft(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function zt(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),r=(s+o)/2;let a,l,c;return s!==o&&(c=s-o,l=r>.5?c/(2-s-o):c/(s+o),a=function(t,e,i,n,s){return t===s?(e-i)/n+(e<i?6:0):e===s?(i-t)/n+2:(t-e)/n+4}(e,i,n,c,s),a=60*a+.5),[0|a,l||0,r]}function Wt(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(Mt)}function $t(t,e,i){return Wt(Ft,t,e,i)}function Vt(t){return(t%360+360)%360}function qt(t){const e=Rt.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?Ct(+e[5]):Mt(+e[5]));const s=Vt(+e[2]),o=+e[3]/100,r=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return Wt(Bt,t,e,i)}(s,o,r):"hsv"===e[1]?function(t,e,i){return Wt(Ht,t,e,i)}(s,o,r):$t(s,o,r),{r:i[0],g:i[1],b:i[2],a:n}}const Yt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Xt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ut;function Kt(t){Ut||(Ut=function(){const t={},e=Object.keys(Xt),i=Object.keys(Yt);let n,s,o,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],s=0;s<i.length;s++)o=i[s],a=a.replace(o,Yt[o]);o=parseInt(Xt[r],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),Ut.transparent=[0,0,0,0]);const e=Ut[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const Qt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const Gt=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Jt=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Zt(t,e,i){if(t){let n=zt(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=$t(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function te(t,e){return t?Object.assign(e||{},t):t}function ee(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=Mt(t[3]))):(e=te(t,{r:0,g:0,b:0,a:1})).a=Mt(e.a),e}function ie(t){return"r"===t.charAt(0)?function(t){const e=Qt.exec(t);let i,n,s,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?Ct(t):Tt(255*t,0,255)}return i=+e[1],n=+e[3],s=+e[5],i=255&(e[2]?Ct(i):Tt(i,0,255)),n=255&(e[4]?Ct(n):Tt(n,0,255)),s=255&(e[6]?Ct(s):Tt(s,0,255)),{r:i,g:n,b:s,a:o}}}(t):qt(t)}class ne{constructor(t){if(t instanceof ne)return t;const e=typeof t;let i;var n,s,o;"object"===e?i=ee(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?s={r:255&17*Ot[n[1]],g:255&17*Ot[n[2]],b:255&17*Ot[n[3]],a:5===o?17*Ot[n[4]]:255}:7!==o&&9!==o||(s={r:Ot[n[1]]<<4|Ot[n[2]],g:Ot[n[3]]<<4|Ot[n[4]],b:Ot[n[5]]<<4|Ot[n[6]],a:9===o?Ot[n[7]]<<4|Ot[n[8]]:255})),i=s||Kt(t)||ie(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=te(this._rgb);return t&&(t.a=At(t.a)),t}set rgb(t){this._rgb=ee(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${At(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?It(this._rgb):void 0}hslString(){return this._valid?function(t){if(!t)return;const e=zt(t),i=e[0],n=Et(e[1]),s=Et(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${At(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let s;const o=e===s?.5:e,r=2*o-1,a=i.a-n.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;s=1-l,i.r=255&l*i.r+s*n.r+.5,i.g=255&l*i.g+s*n.g+.5,i.b=255&l*i.b+s*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=Jt(At(t.r)),s=Jt(At(t.g)),o=Jt(At(t.b));return{r:Mt(Gt(n+i*(Jt(At(e.r))-n))),g:Mt(Gt(s+i*(Jt(At(e.g))-s))),b:Mt(Gt(o+i*(Jt(At(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new ne(this.rgb)}alpha(t){return this._rgb.a=Mt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=St(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Zt(this._rgb,2,t),this}darken(t){return Zt(this._rgb,2,-t),this}saturate(t){return Zt(this._rgb,1,t),this}desaturate(t){return Zt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=zt(t);i[0]=Vt(i[0]+e),i=$t(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function se(t){return new ne(t)}function oe(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function re(t){return oe(t)?t:se(t)}function ae(t){return oe(t)?t:se(t).saturate(.5).darken(.1).hexString()}const le=Object.create(null),ce=Object.create(null);function he(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function de(t,e,i){return"string"==typeof e?v(he(t,e),i):v(he(t,""),e)}var ue=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>ae(e.backgroundColor),this.hoverBorderColor=(t,e)=>ae(e.borderColor),this.hoverColor=(t,e)=>ae(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return de(this,t,e)}get(t){return he(this,t)}describe(t,e){return de(ce,t,e)}override(t,e){return de(le,t,e)}route(t,e,i,n){const s=he(this,t),o=he(this,i),r="_"+e;Object.defineProperties(s,{[r]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=o[n];return a(t)?Object.assign({},e,t):h(t,e)},set(t){this[r]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function pe(t){return!t||o(t.size)||o(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function fe(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function ge(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let a=0;const l=i.length;let c,h,d,u,p;for(c=0;c<l;c++)if(u=i[c],null!=u&&!0!==r(u))a=fe(t,s,o,a,u);else if(r(u))for(h=0,d=u.length;h<d;h++)p=u[h],null==p||r(p)||(a=fe(t,s,o,a,p));t.restore();const f=o.length/2;if(f>i.length){for(c=0;c<f;c++)delete s[o[c]];o.splice(0,f)}return a}function me(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function be(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function _e(t,e,i,n){ve(t,e,i,n,null)}function ve(t,e,i,n,s){let o,r,a,l,c,h;const d=e.pointStyle,u=e.rotation,p=e.radius;let f=(u||0)*N;if(d&&"object"==typeof d&&(o=d.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(f),t.drawImage(d,-d.width/2,-d.height/2,d.width,d.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),d){default:s?t.ellipse(i,n,s/2,p,0,0,P):t.arc(i,n,p,0,P),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(f)*p,n-Math.cos(f)*p),f+=F,t.lineTo(i+Math.sin(f)*p,n-Math.cos(f)*p),f+=F,t.lineTo(i+Math.sin(f)*p,n-Math.cos(f)*p),t.closePath();break;case"rectRounded":c=.516*p,l=p-c,r=Math.cos(f+R)*l,a=Math.sin(f+R)*l,t.arc(i-r,n-a,c,f-O,f-I),t.arc(i+a,n-r,c,f-I,f),t.arc(i+r,n+a,c,f,f+I),t.arc(i-a,n+r,c,f+I,f+O),t.closePath();break;case"rect":if(!u){l=Math.SQRT1_2*p,h=s?s/2:l,t.rect(i-h,n-l,2*h,2*l);break}f+=R;case"rectRot":r=Math.cos(f)*p,a=Math.sin(f)*p,t.moveTo(i-r,n-a),t.lineTo(i+a,n-r),t.lineTo(i+r,n+a),t.lineTo(i-a,n+r),t.closePath();break;case"crossRot":f+=R;case"cross":r=Math.cos(f)*p,a=Math.sin(f)*p,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a),t.moveTo(i+a,n-r),t.lineTo(i-a,n+r);break;case"star":r=Math.cos(f)*p,a=Math.sin(f)*p,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a),t.moveTo(i+a,n-r),t.lineTo(i-a,n+r),f+=R,r=Math.cos(f)*p,a=Math.sin(f)*p,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a),t.moveTo(i+a,n-r),t.lineTo(i-a,n+r);break;case"line":r=s?s/2:Math.cos(f)*p,a=Math.sin(f)*p,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(f)*p,n+Math.sin(f)*p)}t.fill(),e.borderWidth>0&&t.stroke()}}function ye(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function xe(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function we(t){t.restore()}function ke(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function je(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Se(t,e,i,n,s,a={}){const l=r(e)?e:[e],c=a.strokeWidth>0&&""!==a.strokeColor;let h,d;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]);o(e.rotation)||t.rotate(e.rotation);e.color&&(t.fillStyle=e.color);e.textAlign&&(t.textAlign=e.textAlign);e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,a),h=0;h<l.length;++h)d=l[h],c&&(a.strokeColor&&(t.strokeStyle=a.strokeColor),o(a.strokeWidth)||(t.lineWidth=a.strokeWidth),t.strokeText(d,i,n,a.maxWidth)),t.fillText(d,i,n,a.maxWidth),Te(t,i,n,d,a),n+=s.lineHeight;t.restore()}function Te(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),r=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,c=i+o.actualBoundingBoxDescent,h=s.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(r,h),t.lineTo(a,h),t.stroke()}}function Ce(t,e){const{x:i,y:n,w:s,h:o,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,-I,O,!0),t.lineTo(i,n+o-r.bottomLeft),t.arc(i+r.bottomLeft,n+o-r.bottomLeft,r.bottomLeft,O,I,!0),t.lineTo(i+s-r.bottomRight,n+o),t.arc(i+s-r.bottomRight,n+o-r.bottomRight,r.bottomRight,I,0,!0),t.lineTo(i+s,n+r.topRight),t.arc(i+s-r.topRight,n+r.topRight,r.topRight,0,-I,!0),t.lineTo(i+r.topLeft,n)}const Me=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Ae=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Ee(t,e){const i=(""+t).match(Me);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const Oe=t=>+t||0;function Pe(t,e){const i={},n=a(e),s=n?Object.keys(e):e,o=a(t)?n?i=>h(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=Oe(o(t));return i}function De(t){return Pe(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Le(t){return Pe(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ne(t){const e=De(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Ie(t,e){t=t||{},e=e||ue.font;let i=h(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=h(t.style,e.style);n&&!(""+n).match(Ae)&&(console.warn('Invalid font style specified: "'+n+'"'),n="");const s={family:h(t.family,e.family),lineHeight:Ee(h(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:h(t.weight,e.weight),string:""};return s.string=pe(s),s}function Re(t,e,i,n){let s,o,a,l=!0;for(s=0,o=t.length;s<o;++s)if(a=t[s],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),l=!1),void 0!==i&&r(a)&&(a=a[i%a.length],l=!1),void 0!==a))return n&&!l&&(n.cacheable=!1),a}function Fe(t,e,i){const{min:n,max:s}=t,o=u(e,(s-n)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(n,-Math.abs(o)),max:r(s,o)}}function He(t,e){return Object.assign(Object.create(t),e)}function Be(t,e=[""],i=t,n,s=(()=>t[0])){C(n)||(n=Ge("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:n,_getTarget:s,override:s=>Be([s,...t],e,i,n)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>qe(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=Ge($e(o,t),i),C(s))return Ve(t,s)?Ke(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Je(t).includes(e),ownKeys:t=>Je(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function ze(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:We(t,n),setContext:e=>ze(t,e,i,n),override:s=>ze(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>qe(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:l}=t;let c=n[e];M(c)&&l.isScriptable(e)&&(c=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t),e=e(o,r||n),a.delete(t),Ve(t,e)&&(e=Ke(s._scopes,s,t,e));return e}(e,c,t,i));r(c)&&c.length&&(c=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_descriptors:l}=i;if(C(o.index)&&n(t))e=e[o.index%e.length];else if(a(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const a of i){const i=Ke(n,s,t,a);e.push(ze(i,o,r&&r[t],l))}}return e}(e,c,t,l.isIndexable));Ve(e,c)&&(c=ze(c,s,o&&o[e],l));return c}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function We(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:M(i)?i:()=>i,isIndexable:M(n)?n:()=>n}}const $e=(t,e)=>t?t+T(e):e,Ve=(t,e)=>a(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function qe(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function Ye(t,e,i){return M(t)?t(e,i):t}const Xe=(t,e)=>!0===t?e:"string"==typeof t?j(e,t):void 0;function Ue(t,e,i,n,s){for(const o of e){const e=Xe(i,o);if(e){t.add(e);const o=Ye(e._fallback,i,s);if(C(o)&&o!==i&&o!==n)return o}else if(!1===e&&C(n)&&i!==n)return null}return!1}function Ke(t,e,i,n){const s=e._rootScopes,o=Ye(e._fallback,i,n),l=[...t,...s],c=new Set;c.add(n);let h=Qe(c,l,i,o||i,n);return null!==h&&((!C(o)||o===i||(h=Qe(c,l,o,h,n),null!==h))&&Be(Array.from(c),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];if(r(s)&&a(i))return i;return s}(e,i,n))))}function Qe(t,e,i,n,s){for(;i;)i=Ue(t,e,i,n,s);return i}function Ge(t,e){for(const i of e){if(!i)continue;const e=i[t];if(C(e))return e}}function Je(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ze(t,e,i,n){const{iScale:s}=t,{key:o="r"}=this._parsing,r=new Array(n);let a,l,c,h;for(a=0,l=n;a<l;++a)c=a+i,h=e[c],r[a]={r:s.parse(j(h,o),c)};return r}const ti=Number.EPSILON||1e-14,ei=(t,e)=>e<t.length&&!t[e].skip&&t[e],ii=t=>"x"===t?"y":"x";function ni(t,e,i,n){const s=t.skip?e:t,o=e,r=i.skip?e:i,a=G(o,s),l=G(r,o);let c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const d=n*c,u=n*h;return{previous:{x:o.x-d*(r.x-s.x),y:o.y-d*(r.y-s.y)},next:{x:o.x+u*(r.x-s.x),y:o.y+u*(r.y-s.y)}}}function si(t,e="x"){const i=ii(e),n=t.length,s=Array(n).fill(0),o=Array(n);let r,a,l,c=ei(t,0);for(r=0;r<n;++r)if(a=l,l=c,c=ei(t,r+1),l){if(c){const t=c[e]-l[e];s[r]=0!==t?(c[i]-l[i])/t:0}o[r]=a?c?B(s[r-1])!==B(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(t,e,i){const n=t.length;let s,o,r,a,l,c=ei(t,0);for(let h=0;h<n-1;++h)l=c,c=ei(t,h+1),l&&c&&(V(e[h],0,ti)?i[h]=i[h+1]=0:(s=i[h]/e[h],o=i[h+1]/e[h],a=Math.pow(s,2)+Math.pow(o,2),a<=9||(r=3/Math.sqrt(a),i[h]=s*r*e[h],i[h+1]=o*r*e[h])))}(t,s,o),function(t,e,i="x"){const n=ii(i),s=t.length;let o,r,a,l=ei(t,0);for(let c=0;c<s;++c){if(r=a,a=l,l=ei(t,c+1),!a)continue;const s=a[i],h=a[n];r&&(o=(s-r[i])/3,a[`cp1${i}`]=s-o,a[`cp1${n}`]=h-o*e[c]),l&&(o=(l[i]-s)/3,a[`cp2${i}`]=s+o,a[`cp2${n}`]=h+o*e[c])}}(t,o,e)}function oi(t,e,i){return Math.max(Math.min(t,i),e)}function ri(t,e,i,n,s){let o,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)si(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,r=t.length;o<r;++o)a=t[o],l=ni(i,a,t[Math.min(o+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,s,o,r,a=ye(t[0],e);for(i=0,n=t.length;i<n;++i)r=o,o=a,a=i<n-1&&ye(t[i+1],e),o&&(s=t[i],r&&(s.cp1x=oi(s.cp1x,e.left,e.right),s.cp1y=oi(s.cp1y,e.top,e.bottom)),a&&(s.cp2x=oi(s.cp2x,e.left,e.right),s.cp2y=oi(s.cp2y,e.top,e.bottom)))}(t,i)}function ai(){return"undefined"!=typeof window&&"undefined"!=typeof document}function li(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function ci(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const hi=t=>window.getComputedStyle(t,null);function di(t,e){return hi(t).getPropertyValue(e)}const ui=["top","right","bottom","left"];function pi(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=ui[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const fi=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function gi(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,s=hi(i),o="border-box"===s.boxSizing,r=pi(s,"padding"),a=pi(s,"border","width"),{x:l,y:c,box:h}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:s,offsetY:o}=n;let r,a,l=!1;if(fi(s,o,t.target))r=s,a=o;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,i),d=r.left+(h&&a.left),u=r.top+(h&&a.top);let{width:p,height:f}=e;return o&&(p-=r.width+a.width,f-=r.height+a.height),{x:Math.round((l-d)/p*i.width/n),y:Math.round((c-u)/f*i.height/n)}}const mi=t=>Math.round(10*t)/10;function bi(t,e,i,n){const s=hi(t),o=pi(s,"margin"),r=ci(s.maxWidth,t,"clientWidth")||L,a=ci(s.maxHeight,t,"clientHeight")||L,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=li(t);if(o){const t=o.getBoundingClientRect(),r=hi(o),a=pi(r,"border","width"),l=pi(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=ci(r.maxWidth,o,"clientWidth"),s=ci(r.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||L,maxHeight:s||L}}(t,e,i);let{width:c,height:h}=l;if("content-box"===s.boxSizing){const t=pi(s,"border","width"),e=pi(s,"padding");c-=e.width+t.width,h-=e.height+t.height}return c=Math.max(0,c-o.width),h=Math.max(0,n?Math.floor(c/n):h-o.height),c=mi(Math.min(c,r,l.maxWidth)),h=mi(Math.min(h,a,l.maxHeight)),c&&!h&&(h=mi(c/2)),{width:c,height:h}}function _i(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=s/n,t.width=o/n;const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||r.height!==s||r.width!==o)&&(t.currentDevicePixelRatio=n,r.height=s,r.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const vi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function yi(t,e){const i=di(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function xi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function wi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function ki(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},r=xi(t,s,i),a=xi(s,o,i),l=xi(o,e,i),c=xi(r,a,i),h=xi(a,l,i);return xi(c,h,i)}const ji=new Map;function Si(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=ji.get(i);return n||(n=new Intl.NumberFormat(t,e),ji.set(i,n)),n}(e,i).format(t)}const Ti=function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}},Ci=function(){return{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}};function Mi(t,e,i){return t?Ti(e,i):Ci()}function Ai(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function Ei(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Oi(t){return"angle"===t?{between:tt,compare:J,normalize:Z}:{between:nt,compare:(t,e)=>t-e,normalize:t=>t}}function Pi({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function Di(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,r=e.length,{compare:a,between:l,normalize:c}=Oi(n),{start:h,end:d,loop:u,style:p}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:r,normalize:a}=Oi(n),l=e.length;let c,h,{start:d,end:u,loop:p}=t;if(p){for(d+=l,u+=l,c=0,h=l;c<h&&r(a(e[d%l][n]),s,o);++c)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:p,style:t.style}}(t,e,i),f=[];let g,m,b,_=!1,v=null;const y=()=>_||l(s,b,g)&&0!==a(s,b),x=()=>!_||0===a(o,g)||l(o,b,g);for(let t=h,i=h;t<=d;++t)m=e[t%r],m.skip||(g=c(m[n]),g!==b&&(_=l(g,s,o),null===v&&y()&&(v=0===a(g,s)?t:i),null!==v&&x()&&(f.push(Pi({start:v,end:t,loop:u,count:r,style:p})),v=null),i=t,b=g));return null!==v&&f.push(Pi({start:v,end:d,loop:u,count:r,style:p})),f}function Li(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=Di(n[s],t.points,e);o.length&&i.push(...o)}return i}function Ni(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:r,end:a}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);if(!0===n)return Ii(t,[{start:r,end:a,loop:o}],i,e);return Ii(t,function(t,e,i,n){const s=t.length,o=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(r-1)%s,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&o.push({start:e%s,end:a%s,loop:n}),o}(i,r,a<r?a+s:a,!!t._fullLoop&&0===r&&a===s-1),i,e)}function Ii(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=Ri(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=i.length,c=[];let h=o,d=e[0].start,u=d;function p(t,e,n,s){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:n,style:s}),h=s,d=e%l)}}for(const t of e){d=a?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const a=i[u%l];e=Ri(n.setContext(He(s,{type:"segment",p0:o,p1:a,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),Fi(e,h)&&p(d,u-1,t.loop,h),o=a,h=e}d<u-1&&p(d,u-1,t.loop,h)}return c}(t,e,i,n):e}function Ri(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Fi(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,